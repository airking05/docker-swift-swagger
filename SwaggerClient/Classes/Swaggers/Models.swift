// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.addr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Addr"])
                instance.prefixLen = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PrefixLen"])
                return instance
            }


            // Decoder for [AuthConfig]
            Decoders.addDecoder(clazz: [AuthConfig].self) { (source: AnyObject) -> [AuthConfig] in
                return Decoders.decode(clazz: [AuthConfig].self, source: source)
            }
            // Decoder for AuthConfig
            Decoders.addDecoder(clazz: AuthConfig.self) { (source: AnyObject) -> AuthConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuthConfig()
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.serveraddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serveraddress"])
                return instance
            }


            // Decoder for [Body]
            Decoders.addDecoder(clazz: [Body].self) { (source: AnyObject) -> [Body] in
                return Decoders.decode(clazz: [Body].self, source: source)
            }
            // Decoder for Body
            Decoders.addDecoder(clazz: Body.self) { (source: AnyObject) -> Body in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.value = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [Body1]
            Decoders.addDecoder(clazz: [Body1].self) { (source: AnyObject) -> [Body1] in
                return Decoders.decode(clazz: [Body1].self, source: source)
            }
            // Decoder for Body1
            Decoders.addDecoder(clazz: Body1.self) { (source: AnyObject) -> Body1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body1()
                instance.listenAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ListenAddr"])
                instance.advertiseAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AdvertiseAddr"])
                instance.dataPathAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DataPathAddr"])
                instance.forceNewCluster = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ForceNewCluster"])
                instance.spec = Decoders.decodeOptional(clazz: SwarmSpec.self, source: sourceDictionary["Spec"])
                return instance
            }


            // Decoder for [Body2]
            Decoders.addDecoder(clazz: [Body2].self) { (source: AnyObject) -> [Body2] in
                return Decoders.decode(clazz: [Body2].self, source: source)
            }
            // Decoder for Body2
            Decoders.addDecoder(clazz: Body2.self) { (source: AnyObject) -> Body2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body2()
                instance.listenAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ListenAddr"])
                instance.advertiseAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AdvertiseAddr"])
                instance.dataPathAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DataPathAddr"])
                instance.remoteAddrs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RemoteAddrs"])
                instance.joinToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["JoinToken"])
                return instance
            }


            // Decoder for [Body3]
            Decoders.addDecoder(clazz: [Body3].self) { (source: AnyObject) -> [Body3] in
                return Decoders.decode(clazz: [Body3].self, source: source)
            }
            // Decoder for Body3
            Decoders.addDecoder(clazz: Body3.self) { (source: AnyObject) -> Body3 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body3()
                instance.unlockKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UnlockKey"])
                return instance
            }


            // Decoder for [BuildInfo]
            Decoders.addDecoder(clazz: [BuildInfo].self) { (source: AnyObject) -> [BuildInfo] in
                return Decoders.decode(clazz: [BuildInfo].self, source: source)
            }
            // Decoder for BuildInfo
            Decoders.addDecoder(clazz: BuildInfo.self) { (source: AnyObject) -> BuildInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BuildInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.stream = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stream"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.errorDetail = Decoders.decodeOptional(clazz: ErrorDetail.self, source: sourceDictionary["errorDetail"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.progress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["progress"])
                instance.progressDetail = Decoders.decodeOptional(clazz: ProgressDetail.self, source: sourceDictionary["progressDetail"])
                instance.aux = Decoders.decodeOptional(clazz: ImageID.self, source: sourceDictionary["aux"])
                return instance
            }


            // Decoder for [BuildPruneResponse]
            Decoders.addDecoder(clazz: [BuildPruneResponse].self) { (source: AnyObject) -> [BuildPruneResponse] in
                return Decoders.decode(clazz: [BuildPruneResponse].self, source: source)
            }
            // Decoder for BuildPruneResponse
            Decoders.addDecoder(clazz: BuildPruneResponse.self) { (source: AnyObject) -> BuildPruneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BuildPruneResponse()
                instance.spaceReclaimed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SpaceReclaimed"])
                return instance
            }


            // Decoder for [ClusterInfo]
            Decoders.addDecoder(clazz: [ClusterInfo].self) { (source: AnyObject) -> [ClusterInfo] in
                return Decoders.decode(clazz: [ClusterInfo].self, source: source)
            }
            // Decoder for ClusterInfo
            Decoders.addDecoder(clazz: ClusterInfo.self) { (source: AnyObject) -> ClusterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ClusterInfo()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: SwarmSpec.self, source: sourceDictionary["Spec"])
                instance.tLSInfo = Decoders.decodeOptional(clazz: TLSInfo.self, source: sourceDictionary["TLSInfo"])
                instance.rootRotationInProgress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["RootRotationInProgress"])
                return instance
            }


            // Decoder for [Commit]
            Decoders.addDecoder(clazz: [Commit].self) { (source: AnyObject) -> [Commit] in
                return Decoders.decode(clazz: [Commit].self, source: source)
            }
            // Decoder for Commit
            Decoders.addDecoder(clazz: Commit.self) { (source: AnyObject) -> Commit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Commit()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.expected = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Expected"])
                return instance
            }


            // Decoder for [Config]
            Decoders.addDecoder(clazz: [Config].self) { (source: AnyObject) -> [Config] in
                return Decoders.decode(clazz: [Config].self, source: source)
            }
            // Decoder for Config
            Decoders.addDecoder(clazz: Config.self) { (source: AnyObject) -> Config in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Config()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: ConfigSpec.self, source: sourceDictionary["Spec"])
                return instance
            }


            // Decoder for [ConfigSpec]
            Decoders.addDecoder(clazz: [ConfigSpec].self) { (source: AnyObject) -> [ConfigSpec] in
                return Decoders.decode(clazz: [ConfigSpec].self, source: source)
            }
            // Decoder for ConfigSpec
            Decoders.addDecoder(clazz: ConfigSpec.self) { (source: AnyObject) -> ConfigSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Data"])
                return instance
            }


            // Decoder for [Container]
            Decoders.addDecoder(clazz: [Container].self) { (source: AnyObject) -> [Container] in
                return Decoders.decode(clazz: [Container].self, source: source)
            }
            // Decoder for Container
            Decoders.addDecoder(clazz: Container.self) { (source: AnyObject) -> Container in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Container()
                instance.container = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Container"])
                instance.endpointConfig = Decoders.decodeOptional(clazz: EndpointSettings.self, source: sourceDictionary["EndpointConfig"])
                return instance
            }


            // Decoder for [Container1]
            Decoders.addDecoder(clazz: [Container1].self) { (source: AnyObject) -> [Container1] in
                return Decoders.decode(clazz: [Container1].self, source: source)
            }
            // Decoder for Container1
            Decoders.addDecoder(clazz: Container1.self) { (source: AnyObject) -> Container1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Container1()
                instance.container = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Container"])
                instance.force = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Force"])
                return instance
            }


            // Decoder for [ContainerChangeResponseItem]
            Decoders.addDecoder(clazz: [ContainerChangeResponseItem].self) { (source: AnyObject) -> [ContainerChangeResponseItem] in
                return Decoders.decode(clazz: [ContainerChangeResponseItem].self, source: source)
            }
            // Decoder for ContainerChangeResponseItem
            Decoders.addDecoder(clazz: ContainerChangeResponseItem.self) { (source: AnyObject) -> ContainerChangeResponseItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerChangeResponseItem()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"])
                instance.kind = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Kind"])
                return instance
            }


            // Decoder for [ContainerConfig]
            Decoders.addDecoder(clazz: [ContainerConfig].self) { (source: AnyObject) -> [ContainerConfig] in
                return Decoders.decode(clazz: [ContainerConfig].self, source: source)
            }
            // Decoder for ContainerConfig
            Decoders.addDecoder(clazz: ContainerConfig.self) { (source: AnyObject) -> ContainerConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerConfig()
                instance.hostname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Hostname"])
                instance.domainname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Domainname"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["User"])
                instance.attachStdin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStdin"])
                instance.attachStdout = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStdout"])
                instance.attachStderr = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStderr"])
                instance.exposedPorts = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["ExposedPorts"])
                instance.tty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Tty"])
                instance.openStdin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OpenStdin"])
                instance.stdinOnce = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["StdinOnce"])
                instance.env = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Env"])
                instance.cmd = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Cmd"])
                instance.healthcheck = Decoders.decodeOptional(clazz: HealthConfig.self, source: sourceDictionary["Healthcheck"])
                instance.argsEscaped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ArgsEscaped"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Image"])
                instance.volumes = Decoders.decodeOptional(clazz: ContainerConfigVolumes.self, source: sourceDictionary["Volumes"])
                instance.workingDir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["WorkingDir"])
                instance.entrypoint = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Entrypoint"])
                instance.networkDisabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["NetworkDisabled"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MacAddress"])
                instance.onBuild = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["OnBuild"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.stopSignal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["StopSignal"])
                instance.stopTimeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["StopTimeout"])
                instance.shell = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Shell"])
                return instance
            }


            // Decoder for [ContainerConfigVolumes]
            Decoders.addDecoder(clazz: [ContainerConfigVolumes].self) { (source: AnyObject) -> [ContainerConfigVolumes] in
                return Decoders.decode(clazz: [ContainerConfigVolumes].self, source: source)
            }
            // Decoder for ContainerConfigVolumes
            Decoders.addDecoder(clazz: ContainerConfigVolumes.self) { (source: AnyObject) -> ContainerConfigVolumes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerConfigVolumes()
                instance.additionalProperties = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["additionalProperties"])
                return instance
            }


            // Decoder for [ContainerCreateResponse]
            Decoders.addDecoder(clazz: [ContainerCreateResponse].self) { (source: AnyObject) -> [ContainerCreateResponse] in
                return Decoders.decode(clazz: [ContainerCreateResponse].self, source: source)
            }
            // Decoder for ContainerCreateResponse
            Decoders.addDecoder(clazz: ContainerCreateResponse.self) { (source: AnyObject) -> ContainerCreateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerCreateResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Warnings"])
                return instance
            }


            // Decoder for [ContainerInspectResponse]
            Decoders.addDecoder(clazz: [ContainerInspectResponse].self) { (source: AnyObject) -> [ContainerInspectResponse] in
                return Decoders.decode(clazz: [ContainerInspectResponse].self, source: source)
            }
            // Decoder for ContainerInspectResponse
            Decoders.addDecoder(clazz: ContainerInspectResponse.self) { (source: AnyObject) -> ContainerInspectResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerInspectResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Created"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"])
                instance.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Args"])
                instance.state = Decoders.decodeOptional(clazz: ContainerInspectResponseState.self, source: sourceDictionary["State"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Image"])
                instance.resolvConfPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ResolvConfPath"])
                instance.hostnamePath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HostnamePath"])
                instance.hostsPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HostsPath"])
                instance.logPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LogPath"])
                instance.node = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["Node"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.restartCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["RestartCount"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.mountLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MountLabel"])
                instance.processLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProcessLabel"])
                instance.appArmorProfile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AppArmorProfile"])
                instance.execIDs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ExecIDs"])
                instance.hostConfig = Decoders.decodeOptional(clazz: HostConfig.self, source: sourceDictionary["HostConfig"])
                instance.graphDriver = Decoders.decodeOptional(clazz: GraphDriverData.self, source: sourceDictionary["GraphDriver"])
                instance.sizeRw = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SizeRw"])
                instance.sizeRootFs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SizeRootFs"])
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                instance.config = Decoders.decodeOptional(clazz: ContainerConfig.self, source: sourceDictionary["Config"])
                instance.networkSettings = Decoders.decodeOptional(clazz: NetworkSettings.self, source: sourceDictionary["NetworkSettings"])
                return instance
            }


            // Decoder for [ContainerInspectResponseState]
            Decoders.addDecoder(clazz: [ContainerInspectResponseState].self) { (source: AnyObject) -> [ContainerInspectResponseState] in
                return Decoders.decode(clazz: [ContainerInspectResponseState].self, source: source)
            }
            // Decoder for ContainerInspectResponseState
            Decoders.addDecoder(clazz: ContainerInspectResponseState.self) { (source: AnyObject) -> ContainerInspectResponseState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerInspectResponseState()
                instance.status = ContainerInspectResponseState.Status(rawValue: (sourceDictionary["Status"] as? String) ?? "") 
                instance.running = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Running"])
                instance.paused = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Paused"])
                instance.restarting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Restarting"])
                instance.oOMKilled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OOMKilled"])
                instance.dead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Dead"])
                instance.pid = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Pid"])
                instance.exitCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ExitCode"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Error"])
                instance.startedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["StartedAt"])
                instance.finishedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FinishedAt"])
                return instance
            }


            // Decoder for [ContainerPruneResponse]
            Decoders.addDecoder(clazz: [ContainerPruneResponse].self) { (source: AnyObject) -> [ContainerPruneResponse] in
                return Decoders.decode(clazz: [ContainerPruneResponse].self, source: source)
            }
            // Decoder for ContainerPruneResponse
            Decoders.addDecoder(clazz: ContainerPruneResponse.self) { (source: AnyObject) -> ContainerPruneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerPruneResponse()
                instance.containersDeleted = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ContainersDeleted"])
                instance.spaceReclaimed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SpaceReclaimed"])
                return instance
            }


            // Decoder for [ContainerSummary]
            Decoders.addDecoder(clazz: [ContainerSummary].self) { (source: AnyObject) -> [ContainerSummary] in
                return Decoders.decode(clazz: [ContainerSummary].self, source: source)
            }
            // Decoder for ContainerSummary
            Decoders.addDecoder(clazz: ContainerSummary.self) { (source: AnyObject) -> ContainerSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerSummary()
                return instance
            }


            // Decoder for [ContainerSummaryInner]
            Decoders.addDecoder(clazz: [ContainerSummaryInner].self) { (source: AnyObject) -> [ContainerSummaryInner] in
                return Decoders.decode(clazz: [ContainerSummaryInner].self, source: source)
            }
            // Decoder for ContainerSummaryInner
            Decoders.addDecoder(clazz: ContainerSummaryInner.self) { (source: AnyObject) -> ContainerSummaryInner in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerSummaryInner()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.names = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Names"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Image"])
                instance.imageID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ImageID"])
                instance.command = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Command"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Created"])
                instance.ports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Ports"])
                instance.sizeRw = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SizeRw"])
                instance.sizeRootFs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SizeRootFs"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["State"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Status"])
                instance.hostConfig = Decoders.decodeOptional(clazz: ContainerSummaryInnerHostConfig.self, source: sourceDictionary["HostConfig"])
                instance.networkSettings = Decoders.decodeOptional(clazz: ContainerSummaryInnerNetworkSettings.self, source: sourceDictionary["NetworkSettings"])
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                return instance
            }


            // Decoder for [ContainerSummaryInnerHostConfig]
            Decoders.addDecoder(clazz: [ContainerSummaryInnerHostConfig].self) { (source: AnyObject) -> [ContainerSummaryInnerHostConfig] in
                return Decoders.decode(clazz: [ContainerSummaryInnerHostConfig].self, source: source)
            }
            // Decoder for ContainerSummaryInnerHostConfig
            Decoders.addDecoder(clazz: ContainerSummaryInnerHostConfig.self) { (source: AnyObject) -> ContainerSummaryInnerHostConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerSummaryInnerHostConfig()
                instance.networkMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NetworkMode"])
                return instance
            }


            // Decoder for [ContainerSummaryInnerNetworkSettings]
            Decoders.addDecoder(clazz: [ContainerSummaryInnerNetworkSettings].self) { (source: AnyObject) -> [ContainerSummaryInnerNetworkSettings] in
                return Decoders.decode(clazz: [ContainerSummaryInnerNetworkSettings].self, source: source)
            }
            // Decoder for ContainerSummaryInnerNetworkSettings
            Decoders.addDecoder(clazz: ContainerSummaryInnerNetworkSettings.self) { (source: AnyObject) -> ContainerSummaryInnerNetworkSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerSummaryInnerNetworkSettings()
                instance.networks = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Networks"])
                return instance
            }


            // Decoder for [ContainerTopResponse]
            Decoders.addDecoder(clazz: [ContainerTopResponse].self) { (source: AnyObject) -> [ContainerTopResponse] in
                return Decoders.decode(clazz: [ContainerTopResponse].self, source: source)
            }
            // Decoder for ContainerTopResponse
            Decoders.addDecoder(clazz: ContainerTopResponse.self) { (source: AnyObject) -> ContainerTopResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerTopResponse()
                instance.titles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Titles"])
                instance.processes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Processes"])
                return instance
            }


            // Decoder for [ContainerUpdateResponse]
            Decoders.addDecoder(clazz: [ContainerUpdateResponse].self) { (source: AnyObject) -> [ContainerUpdateResponse] in
                return Decoders.decode(clazz: [ContainerUpdateResponse].self, source: source)
            }
            // Decoder for ContainerUpdateResponse
            Decoders.addDecoder(clazz: ContainerUpdateResponse.self) { (source: AnyObject) -> ContainerUpdateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerUpdateResponse()
                instance.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Warnings"])
                return instance
            }


            // Decoder for [ContainerWaitResponse]
            Decoders.addDecoder(clazz: [ContainerWaitResponse].self) { (source: AnyObject) -> [ContainerWaitResponse] in
                return Decoders.decode(clazz: [ContainerWaitResponse].self, source: source)
            }
            // Decoder for ContainerWaitResponse
            Decoders.addDecoder(clazz: ContainerWaitResponse.self) { (source: AnyObject) -> ContainerWaitResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerWaitResponse()
                instance.statusCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["StatusCode"])
                instance.error = Decoders.decodeOptional(clazz: ContainerWaitResponseError.self, source: sourceDictionary["Error"])
                return instance
            }


            // Decoder for [ContainerWaitResponseError]
            Decoders.addDecoder(clazz: [ContainerWaitResponseError].self) { (source: AnyObject) -> [ContainerWaitResponseError] in
                return Decoders.decode(clazz: [ContainerWaitResponseError].self, source: source)
            }
            // Decoder for ContainerWaitResponseError
            Decoders.addDecoder(clazz: ContainerWaitResponseError.self) { (source: AnyObject) -> ContainerWaitResponseError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContainerWaitResponseError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Message"])
                return instance
            }


            // Decoder for [CreateImageInfo]
            Decoders.addDecoder(clazz: [CreateImageInfo].self) { (source: AnyObject) -> [CreateImageInfo] in
                return Decoders.decode(clazz: [CreateImageInfo].self, source: source)
            }
            // Decoder for CreateImageInfo
            Decoders.addDecoder(clazz: CreateImageInfo.self) { (source: AnyObject) -> CreateImageInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateImageInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.progress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["progress"])
                instance.progressDetail = Decoders.decodeOptional(clazz: ProgressDetail.self, source: sourceDictionary["progressDetail"])
                return instance
            }


            // Decoder for [DeviceMapping]
            Decoders.addDecoder(clazz: [DeviceMapping].self) { (source: AnyObject) -> [DeviceMapping] in
                return Decoders.decode(clazz: [DeviceMapping].self, source: source)
            }
            // Decoder for DeviceMapping
            Decoders.addDecoder(clazz: DeviceMapping.self) { (source: AnyObject) -> DeviceMapping in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceMapping()
                instance.pathOnHost = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PathOnHost"])
                instance.pathInContainer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PathInContainer"])
                instance.cgroupPermissions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CgroupPermissions"])
                return instance
            }


            // Decoder for [DistributionInspectResponse]
            Decoders.addDecoder(clazz: [DistributionInspectResponse].self) { (source: AnyObject) -> [DistributionInspectResponse] in
                return Decoders.decode(clazz: [DistributionInspectResponse].self, source: source)
            }
            // Decoder for DistributionInspectResponse
            Decoders.addDecoder(clazz: DistributionInspectResponse.self) { (source: AnyObject) -> DistributionInspectResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistributionInspectResponse()
                instance.descriptor = Decoders.decodeOptional(clazz: DistributionInspectResponseDescriptor.self, source: sourceDictionary["Descriptor"])
                instance.platforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Platforms"])
                return instance
            }


            // Decoder for [DistributionInspectResponseDescriptor]
            Decoders.addDecoder(clazz: [DistributionInspectResponseDescriptor].self) { (source: AnyObject) -> [DistributionInspectResponseDescriptor] in
                return Decoders.decode(clazz: [DistributionInspectResponseDescriptor].self, source: source)
            }
            // Decoder for DistributionInspectResponseDescriptor
            Decoders.addDecoder(clazz: DistributionInspectResponseDescriptor.self) { (source: AnyObject) -> DistributionInspectResponseDescriptor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistributionInspectResponseDescriptor()
                instance.mediaType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MediaType"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Size"])
                instance.digest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Digest"])
                instance.uRLs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["URLs"])
                return instance
            }


            // Decoder for [DistributionInspectResponsePlatforms]
            Decoders.addDecoder(clazz: [DistributionInspectResponsePlatforms].self) { (source: AnyObject) -> [DistributionInspectResponsePlatforms] in
                return Decoders.decode(clazz: [DistributionInspectResponsePlatforms].self, source: source)
            }
            // Decoder for DistributionInspectResponsePlatforms
            Decoders.addDecoder(clazz: DistributionInspectResponsePlatforms.self) { (source: AnyObject) -> DistributionInspectResponsePlatforms in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistributionInspectResponsePlatforms()
                instance.architecture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Architecture"])
                instance.OS = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OS"])
                instance.oSVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OSVersion"])
                instance.oSFeatures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["OSFeatures"])
                instance.variant = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Variant"])
                instance.features = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Features"])
                return instance
            }


            // Decoder for [Driver]
            Decoders.addDecoder(clazz: [Driver].self) { (source: AnyObject) -> [Driver] in
                return Decoders.decode(clazz: [Driver].self, source: source)
            }
            // Decoder for Driver
            Decoders.addDecoder(clazz: Driver.self) { (source: AnyObject) -> Driver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Driver()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [EndpointIPAMConfig]
            Decoders.addDecoder(clazz: [EndpointIPAMConfig].self) { (source: AnyObject) -> [EndpointIPAMConfig] in
                return Decoders.decode(clazz: [EndpointIPAMConfig].self, source: source)
            }
            // Decoder for EndpointIPAMConfig
            Decoders.addDecoder(clazz: EndpointIPAMConfig.self) { (source: AnyObject) -> EndpointIPAMConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EndpointIPAMConfig()
                instance.iPv4Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv4Address"])
                instance.iPv6Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv6Address"])
                instance.linkLocalIPs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["LinkLocalIPs"])
                return instance
            }


            // Decoder for [EndpointPortConfig]
            Decoders.addDecoder(clazz: [EndpointPortConfig].self) { (source: AnyObject) -> [EndpointPortConfig] in
                return Decoders.decode(clazz: [EndpointPortConfig].self, source: source)
            }
            // Decoder for EndpointPortConfig
            Decoders.addDecoder(clazz: EndpointPortConfig.self) { (source: AnyObject) -> EndpointPortConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EndpointPortConfig()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance._protocol = EndpointPortConfig.ModelProtocol(rawValue: (sourceDictionary["Protocol"] as? String) ?? "") 
                instance.targetPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["TargetPort"])
                instance.publishedPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PublishedPort"])
                instance.publishMode = EndpointPortConfig.PublishMode(rawValue: (sourceDictionary["PublishMode"] as? String) ?? "") 
                return instance
            }


            // Decoder for [EndpointSettings]
            Decoders.addDecoder(clazz: [EndpointSettings].self) { (source: AnyObject) -> [EndpointSettings] in
                return Decoders.decode(clazz: [EndpointSettings].self, source: source)
            }
            // Decoder for EndpointSettings
            Decoders.addDecoder(clazz: EndpointSettings.self) { (source: AnyObject) -> EndpointSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EndpointSettings()
                instance.iPAMConfig = Decoders.decodeOptional(clazz: EndpointIPAMConfig.self, source: sourceDictionary["IPAMConfig"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Links"])
                instance.aliases = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Aliases"])
                instance.networkID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NetworkID"])
                instance.endpointID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EndpointID"])
                instance.gateway = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Gateway"])
                instance.iPAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPAddress"])
                instance.iPPrefixLen = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["IPPrefixLen"])
                instance.iPv6Gateway = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv6Gateway"])
                instance.globalIPv6Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["GlobalIPv6Address"])
                instance.globalIPv6PrefixLen = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["GlobalIPv6PrefixLen"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MacAddress"])
                instance.driverOpts = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["DriverOpts"])
                return instance
            }


            // Decoder for [EndpointSpec]
            Decoders.addDecoder(clazz: [EndpointSpec].self) { (source: AnyObject) -> [EndpointSpec] in
                return Decoders.decode(clazz: [EndpointSpec].self, source: source)
            }
            // Decoder for EndpointSpec
            Decoders.addDecoder(clazz: EndpointSpec.self) { (source: AnyObject) -> EndpointSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EndpointSpec()
                instance.mode = EndpointSpec.Mode(rawValue: (sourceDictionary["Mode"] as? String) ?? "") 
                instance.ports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Ports"])
                return instance
            }


            // Decoder for [EngineDescription]
            Decoders.addDecoder(clazz: [EngineDescription].self) { (source: AnyObject) -> [EngineDescription] in
                return Decoders.decode(clazz: [EngineDescription].self, source: source)
            }
            // Decoder for EngineDescription
            Decoders.addDecoder(clazz: EngineDescription.self) { (source: AnyObject) -> EngineDescription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EngineDescription()
                instance.engineVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EngineVersion"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.plugins = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Plugins"])
                return instance
            }


            // Decoder for [EngineDescriptionPlugins]
            Decoders.addDecoder(clazz: [EngineDescriptionPlugins].self) { (source: AnyObject) -> [EngineDescriptionPlugins] in
                return Decoders.decode(clazz: [EngineDescriptionPlugins].self, source: source)
            }
            // Decoder for EngineDescriptionPlugins
            Decoders.addDecoder(clazz: EngineDescriptionPlugins.self) { (source: AnyObject) -> EngineDescriptionPlugins in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EngineDescriptionPlugins()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                return instance
            }


            // Decoder for [ErrorDetail]
            Decoders.addDecoder(clazz: [ErrorDetail].self) { (source: AnyObject) -> [ErrorDetail] in
                return Decoders.decode(clazz: [ErrorDetail].self, source: source)
            }
            // Decoder for ErrorDetail
            Decoders.addDecoder(clazz: ErrorDetail.self) { (source: AnyObject) -> ErrorDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ErrorDetail()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [ExecConfig]
            Decoders.addDecoder(clazz: [ExecConfig].self) { (source: AnyObject) -> [ExecConfig] in
                return Decoders.decode(clazz: [ExecConfig].self, source: source)
            }
            // Decoder for ExecConfig
            Decoders.addDecoder(clazz: ExecConfig.self) { (source: AnyObject) -> ExecConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExecConfig()
                instance.attachStdin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStdin"])
                instance.attachStdout = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStdout"])
                instance.attachStderr = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AttachStderr"])
                instance.detachKeys = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DetachKeys"])
                instance.tty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Tty"])
                instance.env = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Env"])
                instance.cmd = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Cmd"])
                instance.privileged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Privileged"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["User"])
                instance.workingDir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["WorkingDir"])
                return instance
            }


            // Decoder for [ExecInspectResponse]
            Decoders.addDecoder(clazz: [ExecInspectResponse].self) { (source: AnyObject) -> [ExecInspectResponse] in
                return Decoders.decode(clazz: [ExecInspectResponse].self, source: source)
            }
            // Decoder for ExecInspectResponse
            Decoders.addDecoder(clazz: ExecInspectResponse.self) { (source: AnyObject) -> ExecInspectResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExecInspectResponse()
                instance.canRemove = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CanRemove"])
                instance.detachKeys = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DetachKeys"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.running = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Running"])
                instance.exitCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ExitCode"])
                instance.processConfig = Decoders.decodeOptional(clazz: ProcessConfig.self, source: sourceDictionary["ProcessConfig"])
                instance.openStdin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OpenStdin"])
                instance.openStderr = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OpenStderr"])
                instance.openStdout = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OpenStdout"])
                instance.containerID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ContainerID"])
                instance.pid = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Pid"])
                return instance
            }


            // Decoder for [ExecStartConfig]
            Decoders.addDecoder(clazz: [ExecStartConfig].self) { (source: AnyObject) -> [ExecStartConfig] in
                return Decoders.decode(clazz: [ExecStartConfig].self, source: source)
            }
            // Decoder for ExecStartConfig
            Decoders.addDecoder(clazz: ExecStartConfig.self) { (source: AnyObject) -> ExecStartConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExecStartConfig()
                instance.detach = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Detach"])
                instance.tty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Tty"])
                return instance
            }


            // Decoder for [GenericResources]
            Decoders.addDecoder(clazz: [GenericResources].self) { (source: AnyObject) -> [GenericResources] in
                return Decoders.decode(clazz: [GenericResources].self, source: source)
            }
            // Decoder for GenericResources
            Decoders.addDecoder(clazz: GenericResources.self) { (source: AnyObject) -> GenericResources in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GenericResources()
                return instance
            }


            // Decoder for [GenericResourcesInner]
            Decoders.addDecoder(clazz: [GenericResourcesInner].self) { (source: AnyObject) -> [GenericResourcesInner] in
                return Decoders.decode(clazz: [GenericResourcesInner].self, source: source)
            }
            // Decoder for GenericResourcesInner
            Decoders.addDecoder(clazz: GenericResourcesInner.self) { (source: AnyObject) -> GenericResourcesInner in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GenericResourcesInner()
                instance.namedResourceSpec = Decoders.decodeOptional(clazz: GenericResourcesInnerNamedResourceSpec.self, source: sourceDictionary["NamedResourceSpec"])
                instance.discreteResourceSpec = Decoders.decodeOptional(clazz: GenericResourcesInnerDiscreteResourceSpec.self, source: sourceDictionary["DiscreteResourceSpec"])
                return instance
            }


            // Decoder for [GenericResourcesInnerDiscreteResourceSpec]
            Decoders.addDecoder(clazz: [GenericResourcesInnerDiscreteResourceSpec].self) { (source: AnyObject) -> [GenericResourcesInnerDiscreteResourceSpec] in
                return Decoders.decode(clazz: [GenericResourcesInnerDiscreteResourceSpec].self, source: source)
            }
            // Decoder for GenericResourcesInnerDiscreteResourceSpec
            Decoders.addDecoder(clazz: GenericResourcesInnerDiscreteResourceSpec.self) { (source: AnyObject) -> GenericResourcesInnerDiscreteResourceSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GenericResourcesInnerDiscreteResourceSpec()
                instance.kind = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Kind"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [GenericResourcesInnerNamedResourceSpec]
            Decoders.addDecoder(clazz: [GenericResourcesInnerNamedResourceSpec].self) { (source: AnyObject) -> [GenericResourcesInnerNamedResourceSpec] in
                return Decoders.decode(clazz: [GenericResourcesInnerNamedResourceSpec].self, source: source)
            }
            // Decoder for GenericResourcesInnerNamedResourceSpec
            Decoders.addDecoder(clazz: GenericResourcesInnerNamedResourceSpec.self) { (source: AnyObject) -> GenericResourcesInnerNamedResourceSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GenericResourcesInnerNamedResourceSpec()
                instance.kind = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Kind"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [GraphDriverData]
            Decoders.addDecoder(clazz: [GraphDriverData].self) { (source: AnyObject) -> [GraphDriverData] in
                return Decoders.decode(clazz: [GraphDriverData].self, source: source)
            }
            // Decoder for GraphDriverData
            Decoders.addDecoder(clazz: GraphDriverData.self) { (source: AnyObject) -> GraphDriverData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GraphDriverData()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Data"])
                return instance
            }


            // Decoder for [HealthConfig]
            Decoders.addDecoder(clazz: [HealthConfig].self) { (source: AnyObject) -> [HealthConfig] in
                return Decoders.decode(clazz: [HealthConfig].self, source: source)
            }
            // Decoder for HealthConfig
            Decoders.addDecoder(clazz: HealthConfig.self) { (source: AnyObject) -> HealthConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HealthConfig()
                instance.test = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Test"])
                instance.interval = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Interval"])
                instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Timeout"])
                instance.retries = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Retries"])
                instance.startPeriod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["StartPeriod"])
                return instance
            }


            // Decoder for [HistoryResponseItem]
            Decoders.addDecoder(clazz: [HistoryResponseItem].self) { (source: AnyObject) -> [HistoryResponseItem] in
                return Decoders.decode(clazz: [HistoryResponseItem].self, source: source)
            }
            // Decoder for HistoryResponseItem
            Decoders.addDecoder(clazz: HistoryResponseItem.self) { (source: AnyObject) -> HistoryResponseItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HistoryResponseItem()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Created"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedBy"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Tags"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Size"])
                instance.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Comment"])
                return instance
            }


            // Decoder for [HostConfigLogConfig]
            Decoders.addDecoder(clazz: [HostConfigLogConfig].self) { (source: AnyObject) -> [HostConfigLogConfig] in
                return Decoders.decode(clazz: [HostConfigLogConfig].self, source: source)
            }
            // Decoder for HostConfigLogConfig
            Decoders.addDecoder(clazz: HostConfigLogConfig.self) { (source: AnyObject) -> HostConfigLogConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HostConfigLogConfig()
                instance.type = HostConfigLogConfig.ModelType(rawValue: (sourceDictionary["Type"] as? String) ?? "") 
                instance.config = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Config"])
                return instance
            }


            // Decoder for [IPAM]
            Decoders.addDecoder(clazz: [IPAM].self) { (source: AnyObject) -> [IPAM] in
                return Decoders.decode(clazz: [IPAM].self, source: source)
            }
            // Decoder for IPAM
            Decoders.addDecoder(clazz: IPAM.self) { (source: AnyObject) -> IPAM in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IPAM()
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.config = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Config"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [IdResponse]
            Decoders.addDecoder(clazz: [IdResponse].self) { (source: AnyObject) -> [IdResponse] in
                return Decoders.decode(clazz: [IdResponse].self, source: source)
            }
            // Decoder for IdResponse
            Decoders.addDecoder(clazz: IdResponse.self) { (source: AnyObject) -> IdResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IdResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                return instance
            }


            // Decoder for [Image]
            Decoders.addDecoder(clazz: [Image].self) { (source: AnyObject) -> [Image] in
                return Decoders.decode(clazz: [Image].self, source: source)
            }
            // Decoder for Image
            Decoders.addDecoder(clazz: Image.self) { (source: AnyObject) -> Image in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Image()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.repoTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["RepoTags"])
                instance.repoDigests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["RepoDigests"])
                instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Parent"])
                instance.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Comment"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Created"])
                instance.container = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Container"])
                instance.containerConfig = Decoders.decodeOptional(clazz: ContainerConfig.self, source: sourceDictionary["ContainerConfig"])
                instance.dockerVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DockerVersion"])
                instance.author = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Author"])
                instance.config = Decoders.decodeOptional(clazz: ContainerConfig.self, source: sourceDictionary["Config"])
                instance.architecture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Architecture"])
                instance.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Os"])
                instance.osVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OsVersion"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Size"])
                instance.virtualSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["VirtualSize"])
                instance.graphDriver = Decoders.decodeOptional(clazz: GraphDriverData.self, source: sourceDictionary["GraphDriver"])
                instance.rootFS = Decoders.decodeOptional(clazz: ImageRootFS.self, source: sourceDictionary["RootFS"])
                instance.metadata = Decoders.decodeOptional(clazz: ImageMetadata.self, source: sourceDictionary["Metadata"])
                return instance
            }


            // Decoder for [ImageDeleteResponseItem]
            Decoders.addDecoder(clazz: [ImageDeleteResponseItem].self) { (source: AnyObject) -> [ImageDeleteResponseItem] in
                return Decoders.decode(clazz: [ImageDeleteResponseItem].self, source: source)
            }
            // Decoder for ImageDeleteResponseItem
            Decoders.addDecoder(clazz: ImageDeleteResponseItem.self) { (source: AnyObject) -> ImageDeleteResponseItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageDeleteResponseItem()
                instance.untagged = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Untagged"])
                instance.deleted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Deleted"])
                return instance
            }


            // Decoder for [ImageID]
            Decoders.addDecoder(clazz: [ImageID].self) { (source: AnyObject) -> [ImageID] in
                return Decoders.decode(clazz: [ImageID].self, source: source)
            }
            // Decoder for ImageID
            Decoders.addDecoder(clazz: ImageID.self) { (source: AnyObject) -> ImageID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageID()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                return instance
            }


            // Decoder for [ImageMetadata]
            Decoders.addDecoder(clazz: [ImageMetadata].self) { (source: AnyObject) -> [ImageMetadata] in
                return Decoders.decode(clazz: [ImageMetadata].self, source: source)
            }
            // Decoder for ImageMetadata
            Decoders.addDecoder(clazz: ImageMetadata.self) { (source: AnyObject) -> ImageMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageMetadata()
                instance.lastTagTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastTagTime"])
                return instance
            }


            // Decoder for [ImagePruneResponse]
            Decoders.addDecoder(clazz: [ImagePruneResponse].self) { (source: AnyObject) -> [ImagePruneResponse] in
                return Decoders.decode(clazz: [ImagePruneResponse].self, source: source)
            }
            // Decoder for ImagePruneResponse
            Decoders.addDecoder(clazz: ImagePruneResponse.self) { (source: AnyObject) -> ImagePruneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImagePruneResponse()
                instance.imagesDeleted = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ImagesDeleted"])
                instance.spaceReclaimed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SpaceReclaimed"])
                return instance
            }


            // Decoder for [ImageRootFS]
            Decoders.addDecoder(clazz: [ImageRootFS].self) { (source: AnyObject) -> [ImageRootFS] in
                return Decoders.decode(clazz: [ImageRootFS].self, source: source)
            }
            // Decoder for ImageRootFS
            Decoders.addDecoder(clazz: ImageRootFS.self) { (source: AnyObject) -> ImageRootFS in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageRootFS()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.layers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Layers"])
                instance.baseLayer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BaseLayer"])
                return instance
            }


            // Decoder for [ImageSearchResponseItem]
            Decoders.addDecoder(clazz: [ImageSearchResponseItem].self) { (source: AnyObject) -> [ImageSearchResponseItem] in
                return Decoders.decode(clazz: [ImageSearchResponseItem].self, source: source)
            }
            // Decoder for ImageSearchResponseItem
            Decoders.addDecoder(clazz: ImageSearchResponseItem.self) { (source: AnyObject) -> ImageSearchResponseItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageSearchResponseItem()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.isOfficial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_official"])
                instance.isAutomated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_automated"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.starCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["star_count"])
                return instance
            }


            // Decoder for [ImageSummary]
            Decoders.addDecoder(clazz: [ImageSummary].self) { (source: AnyObject) -> [ImageSummary] in
                return Decoders.decode(clazz: [ImageSummary].self, source: source)
            }
            // Decoder for ImageSummary
            Decoders.addDecoder(clazz: ImageSummary.self) { (source: AnyObject) -> ImageSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageSummary()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.parentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ParentId"])
                instance.repoTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["RepoTags"])
                instance.repoDigests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["RepoDigests"])
                instance.created = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Created"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Size"])
                instance.sharedSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["SharedSize"])
                instance.virtualSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["VirtualSize"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.containers = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Containers"])
                return instance
            }


            // Decoder for [IndexInfo]
            Decoders.addDecoder(clazz: [IndexInfo].self) { (source: AnyObject) -> [IndexInfo] in
                return Decoders.decode(clazz: [IndexInfo].self, source: source)
            }
            // Decoder for IndexInfo
            Decoders.addDecoder(clazz: IndexInfo.self) { (source: AnyObject) -> IndexInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IndexInfo()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.mirrors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mirrors"])
                instance.secure = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Secure"])
                instance.official = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Official"])
                return instance
            }


            // Decoder for [JoinTokens]
            Decoders.addDecoder(clazz: [JoinTokens].self) { (source: AnyObject) -> [JoinTokens] in
                return Decoders.decode(clazz: [JoinTokens].self, source: source)
            }
            // Decoder for JoinTokens
            Decoders.addDecoder(clazz: JoinTokens.self) { (source: AnyObject) -> JoinTokens in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JoinTokens()
                instance.worker = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Worker"])
                instance.manager = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Manager"])
                return instance
            }


            // Decoder for [LocalNodeState]
            Decoders.addDecoder(clazz: [LocalNodeState].self) { (source: AnyObject) -> [LocalNodeState] in
                return Decoders.decode(clazz: [LocalNodeState].self, source: source)
            }
            // Decoder for LocalNodeState
            Decoders.addDecoder(clazz: LocalNodeState.self) { (source: AnyObject) -> LocalNodeState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocalNodeState()
                return instance
            }


            // Decoder for [ManagerStatus]
            Decoders.addDecoder(clazz: [ManagerStatus].self) { (source: AnyObject) -> [ManagerStatus] in
                return Decoders.decode(clazz: [ManagerStatus].self, source: source)
            }
            // Decoder for ManagerStatus
            Decoders.addDecoder(clazz: ManagerStatus.self) { (source: AnyObject) -> ManagerStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ManagerStatus()
                instance.leader = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Leader"])
                instance.reachability = Decoders.decodeOptional(clazz: Reachability.self, source: sourceDictionary["Reachability"])
                instance.addr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Addr"])
                return instance
            }


            // Decoder for [ModelErrorResponse]
            Decoders.addDecoder(clazz: [ModelErrorResponse].self) { (source: AnyObject) -> [ModelErrorResponse] in
                return Decoders.decode(clazz: [ModelErrorResponse].self, source: source)
            }
            // Decoder for ModelErrorResponse
            Decoders.addDecoder(clazz: ModelErrorResponse.self) { (source: AnyObject) -> ModelErrorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModelErrorResponse()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [Mount]
            Decoders.addDecoder(clazz: [Mount].self) { (source: AnyObject) -> [Mount] in
                return Decoders.decode(clazz: [Mount].self, source: source)
            }
            // Decoder for Mount
            Decoders.addDecoder(clazz: Mount.self) { (source: AnyObject) -> Mount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Mount()
                instance.target = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Target"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Source"])
                instance.type = Mount.ModelType(rawValue: (sourceDictionary["Type"] as? String) ?? "") 
                instance.readOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ReadOnly"])
                instance.consistency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Consistency"])
                instance.bindOptions = Decoders.decodeOptional(clazz: MountBindOptions.self, source: sourceDictionary["BindOptions"])
                instance.volumeOptions = Decoders.decodeOptional(clazz: MountVolumeOptions.self, source: sourceDictionary["VolumeOptions"])
                instance.tmpfsOptions = Decoders.decodeOptional(clazz: MountTmpfsOptions.self, source: sourceDictionary["TmpfsOptions"])
                return instance
            }


            // Decoder for [MountBindOptions]
            Decoders.addDecoder(clazz: [MountBindOptions].self) { (source: AnyObject) -> [MountBindOptions] in
                return Decoders.decode(clazz: [MountBindOptions].self, source: source)
            }
            // Decoder for MountBindOptions
            Decoders.addDecoder(clazz: MountBindOptions.self) { (source: AnyObject) -> MountBindOptions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MountBindOptions()
                instance.propagation = MountBindOptions.Propagation(rawValue: (sourceDictionary["Propagation"] as? String) ?? "") 
                return instance
            }


            // Decoder for [MountPoint]
            Decoders.addDecoder(clazz: [MountPoint].self) { (source: AnyObject) -> [MountPoint] in
                return Decoders.decode(clazz: [MountPoint].self, source: source)
            }
            // Decoder for MountPoint
            Decoders.addDecoder(clazz: MountPoint.self) { (source: AnyObject) -> MountPoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MountPoint()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Source"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Destination"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Mode"])
                instance.RW = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["RW"])
                instance.propagation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Propagation"])
                return instance
            }


            // Decoder for [MountTmpfsOptions]
            Decoders.addDecoder(clazz: [MountTmpfsOptions].self) { (source: AnyObject) -> [MountTmpfsOptions] in
                return Decoders.decode(clazz: [MountTmpfsOptions].self, source: source)
            }
            // Decoder for MountTmpfsOptions
            Decoders.addDecoder(clazz: MountTmpfsOptions.self) { (source: AnyObject) -> MountTmpfsOptions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MountTmpfsOptions()
                instance.sizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SizeBytes"])
                instance.mode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Mode"])
                return instance
            }


            // Decoder for [MountVolumeOptions]
            Decoders.addDecoder(clazz: [MountVolumeOptions].self) { (source: AnyObject) -> [MountVolumeOptions] in
                return Decoders.decode(clazz: [MountVolumeOptions].self, source: source)
            }
            // Decoder for MountVolumeOptions
            Decoders.addDecoder(clazz: MountVolumeOptions.self) { (source: AnyObject) -> MountVolumeOptions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MountVolumeOptions()
                instance.noCopy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["NoCopy"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.driverConfig = Decoders.decodeOptional(clazz: MountVolumeOptionsDriverConfig.self, source: sourceDictionary["DriverConfig"])
                return instance
            }


            // Decoder for [MountVolumeOptionsDriverConfig]
            Decoders.addDecoder(clazz: [MountVolumeOptionsDriverConfig].self) { (source: AnyObject) -> [MountVolumeOptionsDriverConfig] in
                return Decoders.decode(clazz: [MountVolumeOptionsDriverConfig].self, source: source)
            }
            // Decoder for MountVolumeOptionsDriverConfig
            Decoders.addDecoder(clazz: MountVolumeOptionsDriverConfig.self) { (source: AnyObject) -> MountVolumeOptionsDriverConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MountVolumeOptionsDriverConfig()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [Network]
            Decoders.addDecoder(clazz: [Network].self) { (source: AnyObject) -> [Network] in
                return Decoders.decode(clazz: [Network].self, source: source)
            }
            // Decoder for Network
            Decoders.addDecoder(clazz: Network.self) { (source: AnyObject) -> Network in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Network()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Created"])
                instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Scope"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.enableIPv6 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["EnableIPv6"])
                instance.IPAM = Decoders.decodeOptional(clazz: IPAM.self, source: sourceDictionary["IPAM"])
                instance._internal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Internal"])
                instance.attachable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Attachable"])
                instance.ingress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Ingress"])
                instance.containers = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Containers"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                return instance
            }


            // Decoder for [NetworkConfig]
            Decoders.addDecoder(clazz: [NetworkConfig].self) { (source: AnyObject) -> [NetworkConfig] in
                return Decoders.decode(clazz: [NetworkConfig].self, source: source)
            }
            // Decoder for NetworkConfig
            Decoders.addDecoder(clazz: NetworkConfig.self) { (source: AnyObject) -> NetworkConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetworkConfig()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.checkDuplicate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CheckDuplicate"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance._internal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Internal"])
                instance.attachable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Attachable"])
                instance.ingress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Ingress"])
                instance.IPAM = Decoders.decodeOptional(clazz: IPAM.self, source: sourceDictionary["IPAM"])
                instance.enableIPv6 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["EnableIPv6"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                return instance
            }


            // Decoder for [NetworkContainer]
            Decoders.addDecoder(clazz: [NetworkContainer].self) { (source: AnyObject) -> [NetworkContainer] in
                return Decoders.decode(clazz: [NetworkContainer].self, source: source)
            }
            // Decoder for NetworkContainer
            Decoders.addDecoder(clazz: NetworkContainer.self) { (source: AnyObject) -> NetworkContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetworkContainer()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.endpointID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EndpointID"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MacAddress"])
                instance.iPv4Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv4Address"])
                instance.iPv6Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv6Address"])
                return instance
            }


            // Decoder for [NetworkCreateResponse]
            Decoders.addDecoder(clazz: [NetworkCreateResponse].self) { (source: AnyObject) -> [NetworkCreateResponse] in
                return Decoders.decode(clazz: [NetworkCreateResponse].self, source: source)
            }
            // Decoder for NetworkCreateResponse
            Decoders.addDecoder(clazz: NetworkCreateResponse.self) { (source: AnyObject) -> NetworkCreateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetworkCreateResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.warning = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Warning"])
                return instance
            }


            // Decoder for [NetworkPruneResponse]
            Decoders.addDecoder(clazz: [NetworkPruneResponse].self) { (source: AnyObject) -> [NetworkPruneResponse] in
                return Decoders.decode(clazz: [NetworkPruneResponse].self, source: source)
            }
            // Decoder for NetworkPruneResponse
            Decoders.addDecoder(clazz: NetworkPruneResponse.self) { (source: AnyObject) -> NetworkPruneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetworkPruneResponse()
                instance.networksDeleted = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["NetworksDeleted"])
                return instance
            }


            // Decoder for [NetworkSettings]
            Decoders.addDecoder(clazz: [NetworkSettings].self) { (source: AnyObject) -> [NetworkSettings] in
                return Decoders.decode(clazz: [NetworkSettings].self, source: source)
            }
            // Decoder for NetworkSettings
            Decoders.addDecoder(clazz: NetworkSettings.self) { (source: AnyObject) -> NetworkSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetworkSettings()
                instance.bridge = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Bridge"])
                instance.sandboxID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SandboxID"])
                instance.hairpinMode = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["HairpinMode"])
                instance.linkLocalIPv6Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LinkLocalIPv6Address"])
                instance.linkLocalIPv6PrefixLen = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["LinkLocalIPv6PrefixLen"])
                instance.ports = Decoders.decodeOptional(clazz: PortMap.self, source: sourceDictionary["Ports"])
                instance.sandboxKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SandboxKey"])
                instance.secondaryIPAddresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SecondaryIPAddresses"])
                instance.secondaryIPv6Addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SecondaryIPv6Addresses"])
                instance.endpointID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EndpointID"])
                instance.gateway = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Gateway"])
                instance.globalIPv6Address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["GlobalIPv6Address"])
                instance.globalIPv6PrefixLen = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["GlobalIPv6PrefixLen"])
                instance.iPAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPAddress"])
                instance.iPPrefixLen = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["IPPrefixLen"])
                instance.iPv6Gateway = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IPv6Gateway"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MacAddress"])
                instance.networks = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Networks"])
                return instance
            }


            // Decoder for [Node]
            Decoders.addDecoder(clazz: [Node].self) { (source: AnyObject) -> [Node] in
                return Decoders.decode(clazz: [Node].self, source: source)
            }
            // Decoder for Node
            Decoders.addDecoder(clazz: Node.self) { (source: AnyObject) -> Node in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Node()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: NodeSpec.self, source: sourceDictionary["Spec"])
                instance.description = Decoders.decodeOptional(clazz: NodeDescription.self, source: sourceDictionary["Description"])
                instance.status = Decoders.decodeOptional(clazz: NodeStatus.self, source: sourceDictionary["Status"])
                instance.managerStatus = Decoders.decodeOptional(clazz: ManagerStatus.self, source: sourceDictionary["ManagerStatus"])
                return instance
            }


            // Decoder for [NodeDescription]
            Decoders.addDecoder(clazz: [NodeDescription].self) { (source: AnyObject) -> [NodeDescription] in
                return Decoders.decode(clazz: [NodeDescription].self, source: source)
            }
            // Decoder for NodeDescription
            Decoders.addDecoder(clazz: NodeDescription.self) { (source: AnyObject) -> NodeDescription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NodeDescription()
                instance.hostname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Hostname"])
                instance.platform = Decoders.decodeOptional(clazz: Platform.self, source: sourceDictionary["Platform"])
                instance.resources = Decoders.decodeOptional(clazz: ResourceObject.self, source: sourceDictionary["Resources"])
                instance.engine = Decoders.decodeOptional(clazz: EngineDescription.self, source: sourceDictionary["Engine"])
                instance.tLSInfo = Decoders.decodeOptional(clazz: TLSInfo.self, source: sourceDictionary["TLSInfo"])
                return instance
            }


            // Decoder for [NodeSpec]
            Decoders.addDecoder(clazz: [NodeSpec].self) { (source: AnyObject) -> [NodeSpec] in
                return Decoders.decode(clazz: [NodeSpec].self, source: source)
            }
            // Decoder for NodeSpec
            Decoders.addDecoder(clazz: NodeSpec.self) { (source: AnyObject) -> NodeSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NodeSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.role = NodeSpec.Role(rawValue: (sourceDictionary["Role"] as? String) ?? "") 
                instance.availability = NodeSpec.Availability(rawValue: (sourceDictionary["Availability"] as? String) ?? "") 
                return instance
            }


            // Decoder for [NodeState]
            Decoders.addDecoder(clazz: [NodeState].self) { (source: AnyObject) -> [NodeState] in
                return Decoders.decode(clazz: [NodeState].self, source: source)
            }
            // Decoder for NodeState
            Decoders.addDecoder(clazz: NodeState.self) { (source: AnyObject) -> NodeState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NodeState()
                return instance
            }


            // Decoder for [NodeStatus]
            Decoders.addDecoder(clazz: [NodeStatus].self) { (source: AnyObject) -> [NodeStatus] in
                return Decoders.decode(clazz: [NodeStatus].self, source: source)
            }
            // Decoder for NodeStatus
            Decoders.addDecoder(clazz: NodeStatus.self) { (source: AnyObject) -> NodeStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NodeStatus()
                instance.state = Decoders.decodeOptional(clazz: NodeState.self, source: sourceDictionary["State"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Message"])
                instance.addr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Addr"])
                return instance
            }


            // Decoder for [ObjectVersion]
            Decoders.addDecoder(clazz: [ObjectVersion].self) { (source: AnyObject) -> [ObjectVersion] in
                return Decoders.decode(clazz: [ObjectVersion].self, source: source)
            }
            // Decoder for ObjectVersion
            Decoders.addDecoder(clazz: ObjectVersion.self) { (source: AnyObject) -> ObjectVersion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ObjectVersion()
                instance.index = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Index"])
                return instance
            }


            // Decoder for [PeerNode]
            Decoders.addDecoder(clazz: [PeerNode].self) { (source: AnyObject) -> [PeerNode] in
                return Decoders.decode(clazz: [PeerNode].self, source: source)
            }
            // Decoder for PeerNode
            Decoders.addDecoder(clazz: PeerNode.self) { (source: AnyObject) -> PeerNode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PeerNode()
                instance.nodeID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NodeID"])
                instance.addr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Addr"])
                return instance
            }


            // Decoder for [Platform]
            Decoders.addDecoder(clazz: [Platform].self) { (source: AnyObject) -> [Platform] in
                return Decoders.decode(clazz: [Platform].self, source: source)
            }
            // Decoder for Platform
            Decoders.addDecoder(clazz: Platform.self) { (source: AnyObject) -> Platform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Platform()
                instance.architecture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Architecture"])
                instance.OS = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OS"])
                return instance
            }


            // Decoder for [Plugin]
            Decoders.addDecoder(clazz: [Plugin].self) { (source: AnyObject) -> [Plugin] in
                return Decoders.decode(clazz: [Plugin].self, source: source)
            }
            // Decoder for Plugin
            Decoders.addDecoder(clazz: Plugin.self) { (source: AnyObject) -> Plugin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Plugin()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Enabled"])
                instance.settings = Decoders.decodeOptional(clazz: PluginSettings.self, source: sourceDictionary["Settings"])
                instance.pluginReference = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PluginReference"])
                instance.config = Decoders.decodeOptional(clazz: PluginConfig.self, source: sourceDictionary["Config"])
                return instance
            }


            // Decoder for [PluginConfig]
            Decoders.addDecoder(clazz: [PluginConfig].self) { (source: AnyObject) -> [PluginConfig] in
                return Decoders.decode(clazz: [PluginConfig].self, source: source)
            }
            // Decoder for PluginConfig
            Decoders.addDecoder(clazz: PluginConfig.self) { (source: AnyObject) -> PluginConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfig()
                instance.dockerVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DockerVersion"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.documentation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Documentation"])
                instance.interface = Decoders.decodeOptional(clazz: PluginConfigInterface.self, source: sourceDictionary["Interface"])
                instance.entrypoint = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Entrypoint"])
                instance.workDir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["WorkDir"])
                instance.user = Decoders.decodeOptional(clazz: PluginConfigUser.self, source: sourceDictionary["User"])
                instance.network = Decoders.decodeOptional(clazz: PluginConfigNetwork.self, source: sourceDictionary["Network"])
                instance.linux = Decoders.decodeOptional(clazz: PluginConfigLinux.self, source: sourceDictionary["Linux"])
                instance.propagatedMount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PropagatedMount"])
                instance.ipcHost = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IpcHost"])
                instance.pidHost = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["PidHost"])
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                instance.env = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Env"])
                instance.args = Decoders.decodeOptional(clazz: PluginConfigArgs.self, source: sourceDictionary["Args"])
                instance.rootfs = Decoders.decodeOptional(clazz: PluginConfigRootfs.self, source: sourceDictionary["rootfs"])
                return instance
            }


            // Decoder for [PluginConfigArgs]
            Decoders.addDecoder(clazz: [PluginConfigArgs].self) { (source: AnyObject) -> [PluginConfigArgs] in
                return Decoders.decode(clazz: [PluginConfigArgs].self, source: source)
            }
            // Decoder for PluginConfigArgs
            Decoders.addDecoder(clazz: PluginConfigArgs.self) { (source: AnyObject) -> PluginConfigArgs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigArgs()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.settable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Settable"])
                instance.value = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [PluginConfigInterface]
            Decoders.addDecoder(clazz: [PluginConfigInterface].self) { (source: AnyObject) -> [PluginConfigInterface] in
                return Decoders.decode(clazz: [PluginConfigInterface].self, source: source)
            }
            // Decoder for PluginConfigInterface
            Decoders.addDecoder(clazz: PluginConfigInterface.self) { (source: AnyObject) -> PluginConfigInterface in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigInterface()
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Types"])
                instance.socket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Socket"])
                return instance
            }


            // Decoder for [PluginConfigLinux]
            Decoders.addDecoder(clazz: [PluginConfigLinux].self) { (source: AnyObject) -> [PluginConfigLinux] in
                return Decoders.decode(clazz: [PluginConfigLinux].self, source: source)
            }
            // Decoder for PluginConfigLinux
            Decoders.addDecoder(clazz: PluginConfigLinux.self) { (source: AnyObject) -> PluginConfigLinux in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigLinux()
                instance.capabilities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Capabilities"])
                instance.allowAllDevices = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowAllDevices"])
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Devices"])
                return instance
            }


            // Decoder for [PluginConfigNetwork]
            Decoders.addDecoder(clazz: [PluginConfigNetwork].self) { (source: AnyObject) -> [PluginConfigNetwork] in
                return Decoders.decode(clazz: [PluginConfigNetwork].self, source: source)
            }
            // Decoder for PluginConfigNetwork
            Decoders.addDecoder(clazz: PluginConfigNetwork.self) { (source: AnyObject) -> PluginConfigNetwork in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigNetwork()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                return instance
            }


            // Decoder for [PluginConfigRootfs]
            Decoders.addDecoder(clazz: [PluginConfigRootfs].self) { (source: AnyObject) -> [PluginConfigRootfs] in
                return Decoders.decode(clazz: [PluginConfigRootfs].self, source: source)
            }
            // Decoder for PluginConfigRootfs
            Decoders.addDecoder(clazz: PluginConfigRootfs.self) { (source: AnyObject) -> PluginConfigRootfs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigRootfs()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.diffIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["diff_ids"])
                return instance
            }


            // Decoder for [PluginConfigUser]
            Decoders.addDecoder(clazz: [PluginConfigUser].self) { (source: AnyObject) -> [PluginConfigUser] in
                return Decoders.decode(clazz: [PluginConfigUser].self, source: source)
            }
            // Decoder for PluginConfigUser
            Decoders.addDecoder(clazz: PluginConfigUser.self) { (source: AnyObject) -> PluginConfigUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginConfigUser()
                instance.UID = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["UID"])
                instance.GID = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["GID"])
                return instance
            }


            // Decoder for [PluginDevice]
            Decoders.addDecoder(clazz: [PluginDevice].self) { (source: AnyObject) -> [PluginDevice] in
                return Decoders.decode(clazz: [PluginDevice].self, source: source)
            }
            // Decoder for PluginDevice
            Decoders.addDecoder(clazz: PluginDevice.self) { (source: AnyObject) -> PluginDevice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginDevice()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.settable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Settable"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"])
                return instance
            }


            // Decoder for [PluginEnv]
            Decoders.addDecoder(clazz: [PluginEnv].self) { (source: AnyObject) -> [PluginEnv] in
                return Decoders.decode(clazz: [PluginEnv].self, source: source)
            }
            // Decoder for PluginEnv
            Decoders.addDecoder(clazz: PluginEnv.self) { (source: AnyObject) -> PluginEnv in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginEnv()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.settable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Settable"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [PluginInterfaceType]
            Decoders.addDecoder(clazz: [PluginInterfaceType].self) { (source: AnyObject) -> [PluginInterfaceType] in
                return Decoders.decode(clazz: [PluginInterfaceType].self, source: source)
            }
            // Decoder for PluginInterfaceType
            Decoders.addDecoder(clazz: PluginInterfaceType.self) { (source: AnyObject) -> PluginInterfaceType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginInterfaceType()
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Prefix"])
                instance.capability = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Capability"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Version"])
                return instance
            }


            // Decoder for [PluginMount]
            Decoders.addDecoder(clazz: [PluginMount].self) { (source: AnyObject) -> [PluginMount] in
                return Decoders.decode(clazz: [PluginMount].self, source: source)
            }
            // Decoder for PluginMount
            Decoders.addDecoder(clazz: PluginMount.self) { (source: AnyObject) -> PluginMount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginMount()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.settable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Settable"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Source"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Destination"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [PluginPrivilegeItem]
            Decoders.addDecoder(clazz: [PluginPrivilegeItem].self) { (source: AnyObject) -> [PluginPrivilegeItem] in
                return Decoders.decode(clazz: [PluginPrivilegeItem].self, source: source)
            }
            // Decoder for PluginPrivilegeItem
            Decoders.addDecoder(clazz: PluginPrivilegeItem.self) { (source: AnyObject) -> PluginPrivilegeItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginPrivilegeItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.value = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Value"])
                return instance
            }


            // Decoder for [PluginSettings]
            Decoders.addDecoder(clazz: [PluginSettings].self) { (source: AnyObject) -> [PluginSettings] in
                return Decoders.decode(clazz: [PluginSettings].self, source: source)
            }
            // Decoder for PluginSettings
            Decoders.addDecoder(clazz: PluginSettings.self) { (source: AnyObject) -> PluginSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginSettings()
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                instance.env = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Env"])
                instance.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Args"])
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Devices"])
                return instance
            }


            // Decoder for [PluginsInfo]
            Decoders.addDecoder(clazz: [PluginsInfo].self) { (source: AnyObject) -> [PluginsInfo] in
                return Decoders.decode(clazz: [PluginsInfo].self, source: source)
            }
            // Decoder for PluginsInfo
            Decoders.addDecoder(clazz: PluginsInfo.self) { (source: AnyObject) -> PluginsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PluginsInfo()
                instance.volume = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Volume"])
                instance.network = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Network"])
                instance.authorization = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Authorization"])
                instance.log = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Log"])
                return instance
            }


            // Decoder for [Port]
            Decoders.addDecoder(clazz: [Port].self) { (source: AnyObject) -> [Port] in
                return Decoders.decode(clazz: [Port].self, source: source)
            }
            // Decoder for Port
            Decoders.addDecoder(clazz: Port.self) { (source: AnyObject) -> Port in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Port()
                instance.IP = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IP"])
                instance.privatePort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PrivatePort"])
                instance.publicPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PublicPort"])
                instance.type = Port.ModelType(rawValue: (sourceDictionary["Type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [PortBinding]
            Decoders.addDecoder(clazz: [PortBinding].self) { (source: AnyObject) -> [PortBinding] in
                return Decoders.decode(clazz: [PortBinding].self, source: source)
            }
            // Decoder for PortBinding
            Decoders.addDecoder(clazz: PortBinding.self) { (source: AnyObject) -> PortBinding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PortBinding()
                instance.hostIp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HostIp"])
                instance.hostPort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HostPort"])
                return instance
            }


            // Decoder for [PortMap]
            Decoders.addDecoder(clazz: [PortMap].self) { (source: AnyObject) -> [PortMap] in
                return Decoders.decode(clazz: [PortMap].self, source: source)
            }
            // Decoder for PortMap
            Decoders.addDecoder(clazz: PortMap.self) { (source: AnyObject) -> PortMap in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PortMap()
                return instance
            }


            // Decoder for [ProcessConfig]
            Decoders.addDecoder(clazz: [ProcessConfig].self) { (source: AnyObject) -> [ProcessConfig] in
                return Decoders.decode(clazz: [ProcessConfig].self, source: source)
            }
            // Decoder for ProcessConfig
            Decoders.addDecoder(clazz: ProcessConfig.self) { (source: AnyObject) -> ProcessConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProcessConfig()
                instance.privileged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["privileged"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.tty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tty"])
                instance.entrypoint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entrypoint"])
                instance.arguments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arguments"])
                return instance
            }


            // Decoder for [ProgressDetail]
            Decoders.addDecoder(clazz: [ProgressDetail].self) { (source: AnyObject) -> [ProgressDetail] in
                return Decoders.decode(clazz: [ProgressDetail].self, source: source)
            }
            // Decoder for ProgressDetail
            Decoders.addDecoder(clazz: ProgressDetail.self) { (source: AnyObject) -> ProgressDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProgressDetail()
                instance.current = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["current"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [PushImageInfo]
            Decoders.addDecoder(clazz: [PushImageInfo].self) { (source: AnyObject) -> [PushImageInfo] in
                return Decoders.decode(clazz: [PushImageInfo].self, source: source)
            }
            // Decoder for PushImageInfo
            Decoders.addDecoder(clazz: PushImageInfo.self) { (source: AnyObject) -> PushImageInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PushImageInfo()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.progress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["progress"])
                instance.progressDetail = Decoders.decodeOptional(clazz: ProgressDetail.self, source: sourceDictionary["progressDetail"])
                return instance
            }


            // Decoder for [Reachability]
            Decoders.addDecoder(clazz: [Reachability].self) { (source: AnyObject) -> [Reachability] in
                return Decoders.decode(clazz: [Reachability].self, source: source)
            }
            // Decoder for Reachability
            Decoders.addDecoder(clazz: Reachability.self) { (source: AnyObject) -> Reachability in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Reachability()
                return instance
            }


            // Decoder for [RegistryServiceConfig]
            Decoders.addDecoder(clazz: [RegistryServiceConfig].self) { (source: AnyObject) -> [RegistryServiceConfig] in
                return Decoders.decode(clazz: [RegistryServiceConfig].self, source: source)
            }
            // Decoder for RegistryServiceConfig
            Decoders.addDecoder(clazz: RegistryServiceConfig.self) { (source: AnyObject) -> RegistryServiceConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RegistryServiceConfig()
                instance.allowNondistributableArtifactsCIDRs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["AllowNondistributableArtifactsCIDRs"])
                instance.allowNondistributableArtifactsHostnames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["AllowNondistributableArtifactsHostnames"])
                instance.insecureRegistryCIDRs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["InsecureRegistryCIDRs"])
                instance.indexConfigs = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["IndexConfigs"])
                instance.mirrors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mirrors"])
                return instance
            }


            // Decoder for [ResourceObject]
            Decoders.addDecoder(clazz: [ResourceObject].self) { (source: AnyObject) -> [ResourceObject] in
                return Decoders.decode(clazz: [ResourceObject].self, source: source)
            }
            // Decoder for ResourceObject
            Decoders.addDecoder(clazz: ResourceObject.self) { (source: AnyObject) -> ResourceObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResourceObject()
                instance.nanoCPUs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["NanoCPUs"])
                instance.memoryBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemoryBytes"])
                instance.genericResources = Decoders.decodeOptional(clazz: GenericResources.self, source: sourceDictionary["GenericResources"])
                return instance
            }


            // Decoder for [Resources]
            Decoders.addDecoder(clazz: [Resources].self) { (source: AnyObject) -> [Resources] in
                return Decoders.decode(clazz: [Resources].self, source: source)
            }
            // Decoder for Resources
            Decoders.addDecoder(clazz: Resources.self) { (source: AnyObject) -> Resources in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Resources()
                instance.cpuShares = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["CpuShares"])
                instance.memory = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Memory"])
                instance.cgroupParent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CgroupParent"])
                instance.blkioWeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["BlkioWeight"])
                instance.blkioWeightDevice = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioWeightDevice"])
                instance.blkioDeviceReadBps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceReadBps"])
                instance.blkioDeviceWriteBps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceWriteBps"])
                instance.blkioDeviceReadIOps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceReadIOps"])
                instance.blkioDeviceWriteIOps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceWriteIOps"])
                instance.cpuPeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuPeriod"])
                instance.cpuQuota = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuQuota"])
                instance.cpuRealtimePeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuRealtimePeriod"])
                instance.cpuRealtimeRuntime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuRealtimeRuntime"])
                instance.cpusetCpus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CpusetCpus"])
                instance.cpusetMems = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CpusetMems"])
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Devices"])
                instance.deviceCgroupRules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["DeviceCgroupRules"])
                instance.diskQuota = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["DiskQuota"])
                instance.kernelMemory = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["KernelMemory"])
                instance.memoryReservation = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemoryReservation"])
                instance.memorySwap = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemorySwap"])
                instance.memorySwappiness = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemorySwappiness"])
                instance.nanoCPUs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["NanoCPUs"])
                instance.oomKillDisable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OomKillDisable"])
                instance.pidsLimit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["PidsLimit"])
                instance.ulimits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Ulimits"])
                instance.cpuCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuCount"])
                instance.cpuPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuPercent"])
                instance.iOMaximumIOps = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["IOMaximumIOps"])
                instance.iOMaximumBandwidth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["IOMaximumBandwidth"])
                return instance
            }


            // Decoder for [ResourcesBlkioWeightDevice]
            Decoders.addDecoder(clazz: [ResourcesBlkioWeightDevice].self) { (source: AnyObject) -> [ResourcesBlkioWeightDevice] in
                return Decoders.decode(clazz: [ResourcesBlkioWeightDevice].self, source: source)
            }
            // Decoder for ResourcesBlkioWeightDevice
            Decoders.addDecoder(clazz: ResourcesBlkioWeightDevice.self) { (source: AnyObject) -> ResourcesBlkioWeightDevice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResourcesBlkioWeightDevice()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"])
                instance.weight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Weight"])
                return instance
            }


            // Decoder for [ResourcesUlimits]
            Decoders.addDecoder(clazz: [ResourcesUlimits].self) { (source: AnyObject) -> [ResourcesUlimits] in
                return Decoders.decode(clazz: [ResourcesUlimits].self, source: source)
            }
            // Decoder for ResourcesUlimits
            Decoders.addDecoder(clazz: ResourcesUlimits.self) { (source: AnyObject) -> ResourcesUlimits in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResourcesUlimits()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.soft = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Soft"])
                instance.hard = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Hard"])
                return instance
            }


            // Decoder for [RestartPolicy]
            Decoders.addDecoder(clazz: [RestartPolicy].self) { (source: AnyObject) -> [RestartPolicy] in
                return Decoders.decode(clazz: [RestartPolicy].self, source: source)
            }
            // Decoder for RestartPolicy
            Decoders.addDecoder(clazz: RestartPolicy.self) { (source: AnyObject) -> RestartPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RestartPolicy()
                instance.name = RestartPolicy.Name(rawValue: (sourceDictionary["Name"] as? String) ?? "") 
                instance.maximumRetryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["MaximumRetryCount"])
                return instance
            }


            // Decoder for [Runtime]
            Decoders.addDecoder(clazz: [Runtime].self) { (source: AnyObject) -> [Runtime] in
                return Decoders.decode(clazz: [Runtime].self, source: source)
            }
            // Decoder for Runtime
            Decoders.addDecoder(clazz: Runtime.self) { (source: AnyObject) -> Runtime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Runtime()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.runtimeArgs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["runtimeArgs"])
                return instance
            }


            // Decoder for [Secret]
            Decoders.addDecoder(clazz: [Secret].self) { (source: AnyObject) -> [Secret] in
                return Decoders.decode(clazz: [Secret].self, source: source)
            }
            // Decoder for Secret
            Decoders.addDecoder(clazz: Secret.self) { (source: AnyObject) -> Secret in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Secret()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: SecretSpec.self, source: sourceDictionary["Spec"])
                return instance
            }


            // Decoder for [SecretSpec]
            Decoders.addDecoder(clazz: [SecretSpec].self) { (source: AnyObject) -> [SecretSpec] in
                return Decoders.decode(clazz: [SecretSpec].self, source: source)
            }
            // Decoder for SecretSpec
            Decoders.addDecoder(clazz: SecretSpec.self) { (source: AnyObject) -> SecretSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SecretSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Data"])
                instance.driver = Decoders.decodeOptional(clazz: Driver.self, source: sourceDictionary["Driver"])
                return instance
            }


            // Decoder for [Service]
            Decoders.addDecoder(clazz: [Service].self) { (source: AnyObject) -> [Service] in
                return Decoders.decode(clazz: [Service].self, source: source)
            }
            // Decoder for Service
            Decoders.addDecoder(clazz: Service.self) { (source: AnyObject) -> Service in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Service()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: ServiceSpec.self, source: sourceDictionary["Spec"])
                instance.endpoint = Decoders.decodeOptional(clazz: ServiceEndpoint.self, source: sourceDictionary["Endpoint"])
                instance.updateStatus = Decoders.decodeOptional(clazz: ServiceUpdateStatus.self, source: sourceDictionary["UpdateStatus"])
                return instance
            }


            // Decoder for [ServiceCreateResponse]
            Decoders.addDecoder(clazz: [ServiceCreateResponse].self) { (source: AnyObject) -> [ServiceCreateResponse] in
                return Decoders.decode(clazz: [ServiceCreateResponse].self, source: source)
            }
            // Decoder for ServiceCreateResponse
            Decoders.addDecoder(clazz: ServiceCreateResponse.self) { (source: AnyObject) -> ServiceCreateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceCreateResponse()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.warning = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Warning"])
                return instance
            }


            // Decoder for [ServiceEndpoint]
            Decoders.addDecoder(clazz: [ServiceEndpoint].self) { (source: AnyObject) -> [ServiceEndpoint] in
                return Decoders.decode(clazz: [ServiceEndpoint].self, source: source)
            }
            // Decoder for ServiceEndpoint
            Decoders.addDecoder(clazz: ServiceEndpoint.self) { (source: AnyObject) -> ServiceEndpoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceEndpoint()
                instance.spec = Decoders.decodeOptional(clazz: EndpointSpec.self, source: sourceDictionary["Spec"])
                instance.ports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Ports"])
                instance.virtualIPs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["VirtualIPs"])
                return instance
            }


            // Decoder for [ServiceEndpointVirtualIPs]
            Decoders.addDecoder(clazz: [ServiceEndpointVirtualIPs].self) { (source: AnyObject) -> [ServiceEndpointVirtualIPs] in
                return Decoders.decode(clazz: [ServiceEndpointVirtualIPs].self, source: source)
            }
            // Decoder for ServiceEndpointVirtualIPs
            Decoders.addDecoder(clazz: ServiceEndpointVirtualIPs.self) { (source: AnyObject) -> ServiceEndpointVirtualIPs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceEndpointVirtualIPs()
                instance.networkID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NetworkID"])
                instance.addr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Addr"])
                return instance
            }


            // Decoder for [ServiceSpec]
            Decoders.addDecoder(clazz: [ServiceSpec].self) { (source: AnyObject) -> [ServiceSpec] in
                return Decoders.decode(clazz: [ServiceSpec].self, source: source)
            }
            // Decoder for ServiceSpec
            Decoders.addDecoder(clazz: ServiceSpec.self) { (source: AnyObject) -> ServiceSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.taskTemplate = Decoders.decodeOptional(clazz: TaskSpec.self, source: sourceDictionary["TaskTemplate"])
                instance.mode = Decoders.decodeOptional(clazz: ServiceSpecMode.self, source: sourceDictionary["Mode"])
                instance.updateConfig = Decoders.decodeOptional(clazz: ServiceSpecUpdateConfig.self, source: sourceDictionary["UpdateConfig"])
                instance.rollbackConfig = Decoders.decodeOptional(clazz: ServiceSpecRollbackConfig.self, source: sourceDictionary["RollbackConfig"])
                instance.networks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Networks"])
                instance.endpointSpec = Decoders.decodeOptional(clazz: EndpointSpec.self, source: sourceDictionary["EndpointSpec"])
                return instance
            }


            // Decoder for [ServiceSpecMode]
            Decoders.addDecoder(clazz: [ServiceSpecMode].self) { (source: AnyObject) -> [ServiceSpecMode] in
                return Decoders.decode(clazz: [ServiceSpecMode].self, source: source)
            }
            // Decoder for ServiceSpecMode
            Decoders.addDecoder(clazz: ServiceSpecMode.self) { (source: AnyObject) -> ServiceSpecMode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceSpecMode()
                instance.replicated = Decoders.decodeOptional(clazz: ServiceSpecModeReplicated.self, source: sourceDictionary["Replicated"])
                instance.global = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["Global"])
                return instance
            }


            // Decoder for [ServiceSpecModeReplicated]
            Decoders.addDecoder(clazz: [ServiceSpecModeReplicated].self) { (source: AnyObject) -> [ServiceSpecModeReplicated] in
                return Decoders.decode(clazz: [ServiceSpecModeReplicated].self, source: source)
            }
            // Decoder for ServiceSpecModeReplicated
            Decoders.addDecoder(clazz: ServiceSpecModeReplicated.self) { (source: AnyObject) -> ServiceSpecModeReplicated in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceSpecModeReplicated()
                instance.replicas = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Replicas"])
                return instance
            }


            // Decoder for [ServiceSpecRollbackConfig]
            Decoders.addDecoder(clazz: [ServiceSpecRollbackConfig].self) { (source: AnyObject) -> [ServiceSpecRollbackConfig] in
                return Decoders.decode(clazz: [ServiceSpecRollbackConfig].self, source: source)
            }
            // Decoder for ServiceSpecRollbackConfig
            Decoders.addDecoder(clazz: ServiceSpecRollbackConfig.self) { (source: AnyObject) -> ServiceSpecRollbackConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceSpecRollbackConfig()
                instance.parallelism = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Parallelism"])
                instance.delay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Delay"])
                instance.failureAction = ServiceSpecRollbackConfig.FailureAction(rawValue: (sourceDictionary["FailureAction"] as? String) ?? "") 
                instance.monitor = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Monitor"])
                instance.maxFailureRatio = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["MaxFailureRatio"])
                instance.order = ServiceSpecRollbackConfig.Order(rawValue: (sourceDictionary["Order"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ServiceSpecUpdateConfig]
            Decoders.addDecoder(clazz: [ServiceSpecUpdateConfig].self) { (source: AnyObject) -> [ServiceSpecUpdateConfig] in
                return Decoders.decode(clazz: [ServiceSpecUpdateConfig].self, source: source)
            }
            // Decoder for ServiceSpecUpdateConfig
            Decoders.addDecoder(clazz: ServiceSpecUpdateConfig.self) { (source: AnyObject) -> ServiceSpecUpdateConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceSpecUpdateConfig()
                instance.parallelism = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Parallelism"])
                instance.delay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Delay"])
                instance.failureAction = ServiceSpecUpdateConfig.FailureAction(rawValue: (sourceDictionary["FailureAction"] as? String) ?? "") 
                instance.monitor = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Monitor"])
                instance.maxFailureRatio = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["MaxFailureRatio"])
                instance.order = ServiceSpecUpdateConfig.Order(rawValue: (sourceDictionary["Order"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ServiceUpdateResponse]
            Decoders.addDecoder(clazz: [ServiceUpdateResponse].self) { (source: AnyObject) -> [ServiceUpdateResponse] in
                return Decoders.decode(clazz: [ServiceUpdateResponse].self, source: source)
            }
            // Decoder for ServiceUpdateResponse
            Decoders.addDecoder(clazz: ServiceUpdateResponse.self) { (source: AnyObject) -> ServiceUpdateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceUpdateResponse()
                instance.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Warnings"])
                return instance
            }


            // Decoder for [ServiceUpdateStatus]
            Decoders.addDecoder(clazz: [ServiceUpdateStatus].self) { (source: AnyObject) -> [ServiceUpdateStatus] in
                return Decoders.decode(clazz: [ServiceUpdateStatus].self, source: source)
            }
            // Decoder for ServiceUpdateStatus
            Decoders.addDecoder(clazz: ServiceUpdateStatus.self) { (source: AnyObject) -> ServiceUpdateStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceUpdateStatus()
                instance.state = ServiceUpdateStatus.State(rawValue: (sourceDictionary["State"] as? String) ?? "") 
                instance.startedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["StartedAt"])
                instance.completedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CompletedAt"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Message"])
                return instance
            }


            // Decoder for [SwarmInfo]
            Decoders.addDecoder(clazz: [SwarmInfo].self) { (source: AnyObject) -> [SwarmInfo] in
                return Decoders.decode(clazz: [SwarmInfo].self, source: source)
            }
            // Decoder for SwarmInfo
            Decoders.addDecoder(clazz: SwarmInfo.self) { (source: AnyObject) -> SwarmInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmInfo()
                instance.nodeID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NodeID"])
                instance.nodeAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NodeAddr"])
                instance.localNodeState = Decoders.decodeOptional(clazz: LocalNodeState.self, source: sourceDictionary["LocalNodeState"])
                instance.controlAvailable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ControlAvailable"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Error"])
                instance.remoteManagers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["RemoteManagers"])
                instance.nodes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Nodes"])
                instance.managers = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Managers"])
                instance.cluster = Decoders.decodeOptional(clazz: ClusterInfo.self, source: sourceDictionary["Cluster"])
                return instance
            }


            // Decoder for [SwarmSpec]
            Decoders.addDecoder(clazz: [SwarmSpec].self) { (source: AnyObject) -> [SwarmSpec] in
                return Decoders.decode(clazz: [SwarmSpec].self, source: source)
            }
            // Decoder for SwarmSpec
            Decoders.addDecoder(clazz: SwarmSpec.self) { (source: AnyObject) -> SwarmSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.orchestration = Decoders.decodeOptional(clazz: SwarmSpecOrchestration.self, source: sourceDictionary["Orchestration"])
                instance.raft = Decoders.decodeOptional(clazz: SwarmSpecRaft.self, source: sourceDictionary["Raft"])
                instance.dispatcher = Decoders.decodeOptional(clazz: SwarmSpecDispatcher.self, source: sourceDictionary["Dispatcher"])
                instance.cAConfig = Decoders.decodeOptional(clazz: SwarmSpecCAConfig.self, source: sourceDictionary["CAConfig"])
                instance.encryptionConfig = Decoders.decodeOptional(clazz: SwarmSpecEncryptionConfig.self, source: sourceDictionary["EncryptionConfig"])
                instance.taskDefaults = Decoders.decodeOptional(clazz: SwarmSpecTaskDefaults.self, source: sourceDictionary["TaskDefaults"])
                return instance
            }


            // Decoder for [SwarmSpecCAConfig]
            Decoders.addDecoder(clazz: [SwarmSpecCAConfig].self) { (source: AnyObject) -> [SwarmSpecCAConfig] in
                return Decoders.decode(clazz: [SwarmSpecCAConfig].self, source: source)
            }
            // Decoder for SwarmSpecCAConfig
            Decoders.addDecoder(clazz: SwarmSpecCAConfig.self) { (source: AnyObject) -> SwarmSpecCAConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecCAConfig()
                instance.nodeCertExpiry = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["NodeCertExpiry"])
                instance.externalCAs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ExternalCAs"])
                instance.signingCACert = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SigningCACert"])
                instance.signingCAKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SigningCAKey"])
                instance.forceRotate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ForceRotate"])
                return instance
            }


            // Decoder for [SwarmSpecCAConfigExternalCAs]
            Decoders.addDecoder(clazz: [SwarmSpecCAConfigExternalCAs].self) { (source: AnyObject) -> [SwarmSpecCAConfigExternalCAs] in
                return Decoders.decode(clazz: [SwarmSpecCAConfigExternalCAs].self, source: source)
            }
            // Decoder for SwarmSpecCAConfigExternalCAs
            Decoders.addDecoder(clazz: SwarmSpecCAConfigExternalCAs.self) { (source: AnyObject) -> SwarmSpecCAConfigExternalCAs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecCAConfigExternalCAs()
                instance._protocol = SwarmSpecCAConfigExternalCAs.ModelProtocol(rawValue: (sourceDictionary["Protocol"] as? String) ?? "") 
                instance.URL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["URL"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                instance.cACert = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CACert"])
                return instance
            }


            // Decoder for [SwarmSpecDispatcher]
            Decoders.addDecoder(clazz: [SwarmSpecDispatcher].self) { (source: AnyObject) -> [SwarmSpecDispatcher] in
                return Decoders.decode(clazz: [SwarmSpecDispatcher].self, source: source)
            }
            // Decoder for SwarmSpecDispatcher
            Decoders.addDecoder(clazz: SwarmSpecDispatcher.self) { (source: AnyObject) -> SwarmSpecDispatcher in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecDispatcher()
                instance.heartbeatPeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["HeartbeatPeriod"])
                return instance
            }


            // Decoder for [SwarmSpecEncryptionConfig]
            Decoders.addDecoder(clazz: [SwarmSpecEncryptionConfig].self) { (source: AnyObject) -> [SwarmSpecEncryptionConfig] in
                return Decoders.decode(clazz: [SwarmSpecEncryptionConfig].self, source: source)
            }
            // Decoder for SwarmSpecEncryptionConfig
            Decoders.addDecoder(clazz: SwarmSpecEncryptionConfig.self) { (source: AnyObject) -> SwarmSpecEncryptionConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecEncryptionConfig()
                instance.autoLockManagers = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AutoLockManagers"])
                return instance
            }


            // Decoder for [SwarmSpecOrchestration]
            Decoders.addDecoder(clazz: [SwarmSpecOrchestration].self) { (source: AnyObject) -> [SwarmSpecOrchestration] in
                return Decoders.decode(clazz: [SwarmSpecOrchestration].self, source: source)
            }
            // Decoder for SwarmSpecOrchestration
            Decoders.addDecoder(clazz: SwarmSpecOrchestration.self) { (source: AnyObject) -> SwarmSpecOrchestration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecOrchestration()
                instance.taskHistoryRetentionLimit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["TaskHistoryRetentionLimit"])
                return instance
            }


            // Decoder for [SwarmSpecRaft]
            Decoders.addDecoder(clazz: [SwarmSpecRaft].self) { (source: AnyObject) -> [SwarmSpecRaft] in
                return Decoders.decode(clazz: [SwarmSpecRaft].self, source: source)
            }
            // Decoder for SwarmSpecRaft
            Decoders.addDecoder(clazz: SwarmSpecRaft.self) { (source: AnyObject) -> SwarmSpecRaft in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecRaft()
                instance.snapshotInterval = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["SnapshotInterval"])
                instance.keepOldSnapshots = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["KeepOldSnapshots"])
                instance.logEntriesForSlowFollowers = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["LogEntriesForSlowFollowers"])
                instance.electionTick = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ElectionTick"])
                instance.heartbeatTick = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HeartbeatTick"])
                return instance
            }


            // Decoder for [SwarmSpecTaskDefaults]
            Decoders.addDecoder(clazz: [SwarmSpecTaskDefaults].self) { (source: AnyObject) -> [SwarmSpecTaskDefaults] in
                return Decoders.decode(clazz: [SwarmSpecTaskDefaults].self, source: source)
            }
            // Decoder for SwarmSpecTaskDefaults
            Decoders.addDecoder(clazz: SwarmSpecTaskDefaults.self) { (source: AnyObject) -> SwarmSpecTaskDefaults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecTaskDefaults()
                instance.logDriver = Decoders.decodeOptional(clazz: SwarmSpecTaskDefaultsLogDriver.self, source: sourceDictionary["LogDriver"])
                return instance
            }


            // Decoder for [SwarmSpecTaskDefaultsLogDriver]
            Decoders.addDecoder(clazz: [SwarmSpecTaskDefaultsLogDriver].self) { (source: AnyObject) -> [SwarmSpecTaskDefaultsLogDriver] in
                return Decoders.decode(clazz: [SwarmSpecTaskDefaultsLogDriver].self, source: source)
            }
            // Decoder for SwarmSpecTaskDefaultsLogDriver
            Decoders.addDecoder(clazz: SwarmSpecTaskDefaultsLogDriver.self) { (source: AnyObject) -> SwarmSpecTaskDefaultsLogDriver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwarmSpecTaskDefaultsLogDriver()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [SystemAuthResponse]
            Decoders.addDecoder(clazz: [SystemAuthResponse].self) { (source: AnyObject) -> [SystemAuthResponse] in
                return Decoders.decode(clazz: [SystemAuthResponse].self, source: source)
            }
            // Decoder for SystemAuthResponse
            Decoders.addDecoder(clazz: SystemAuthResponse.self) { (source: AnyObject) -> SystemAuthResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemAuthResponse()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Status"])
                instance.identityToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IdentityToken"])
                return instance
            }


            // Decoder for [SystemDataUsageResponse]
            Decoders.addDecoder(clazz: [SystemDataUsageResponse].self) { (source: AnyObject) -> [SystemDataUsageResponse] in
                return Decoders.decode(clazz: [SystemDataUsageResponse].self, source: source)
            }
            // Decoder for SystemDataUsageResponse
            Decoders.addDecoder(clazz: SystemDataUsageResponse.self) { (source: AnyObject) -> SystemDataUsageResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemDataUsageResponse()
                instance.layersSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["LayersSize"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Images"])
                instance.containers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Containers"])
                instance.volumes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Volumes"])
                return instance
            }


            // Decoder for [SystemEventsResponse]
            Decoders.addDecoder(clazz: [SystemEventsResponse].self) { (source: AnyObject) -> [SystemEventsResponse] in
                return Decoders.decode(clazz: [SystemEventsResponse].self, source: source)
            }
            // Decoder for SystemEventsResponse
            Decoders.addDecoder(clazz: SystemEventsResponse.self) { (source: AnyObject) -> SystemEventsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemEventsResponse()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Action"])
                instance.actor = Decoders.decodeOptional(clazz: SystemEventsResponseActor.self, source: sourceDictionary["Actor"])
                instance.time = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time"])
                instance.timeNano = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timeNano"])
                return instance
            }


            // Decoder for [SystemEventsResponseActor]
            Decoders.addDecoder(clazz: [SystemEventsResponseActor].self) { (source: AnyObject) -> [SystemEventsResponseActor] in
                return Decoders.decode(clazz: [SystemEventsResponseActor].self, source: source)
            }
            // Decoder for SystemEventsResponseActor
            Decoders.addDecoder(clazz: SystemEventsResponseActor.self) { (source: AnyObject) -> SystemEventsResponseActor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemEventsResponseActor()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Attributes"])
                return instance
            }


            // Decoder for [SystemInfo]
            Decoders.addDecoder(clazz: [SystemInfo].self) { (source: AnyObject) -> [SystemInfo] in
                return Decoders.decode(clazz: [SystemInfo].self, source: source)
            }
            // Decoder for SystemInfo
            Decoders.addDecoder(clazz: SystemInfo.self) { (source: AnyObject) -> SystemInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemInfo()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.containers = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Containers"])
                instance.containersRunning = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ContainersRunning"])
                instance.containersPaused = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ContainersPaused"])
                instance.containersStopped = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ContainersStopped"])
                instance.images = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Images"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.driverStatus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["DriverStatus"])
                instance.dockerRootDir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DockerRootDir"])
                instance.systemStatus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SystemStatus"])
                instance.plugins = Decoders.decodeOptional(clazz: PluginsInfo.self, source: sourceDictionary["Plugins"])
                instance.memoryLimit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["MemoryLimit"])
                instance.swapLimit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["SwapLimit"])
                instance.kernelMemory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["KernelMemory"])
                instance.cpuCfsPeriod = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CpuCfsPeriod"])
                instance.cpuCfsQuota = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CpuCfsQuota"])
                instance.cPUShares = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CPUShares"])
                instance.cPUSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CPUSet"])
                instance.oomKillDisable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OomKillDisable"])
                instance.iPv4Forwarding = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IPv4Forwarding"])
                instance.bridgeNfIptables = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["BridgeNfIptables"])
                instance.bridgeNfIp6tables = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["BridgeNfIp6tables"])
                instance.debug = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Debug"])
                instance.nFd = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["NFd"])
                instance.nGoroutines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["NGoroutines"])
                instance.systemTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SystemTime"])
                instance.loggingDriver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoggingDriver"])
                instance.cgroupDriver = SystemInfo.CgroupDriver(rawValue: (sourceDictionary["CgroupDriver"] as? String) ?? "") 
                instance.nEventsListener = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["NEventsListener"])
                instance.kernelVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["KernelVersion"])
                instance.operatingSystem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OperatingSystem"])
                instance.oSType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OSType"])
                instance.architecture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Architecture"])
                instance.NCPU = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["NCPU"])
                instance.memTotal = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemTotal"])
                instance.indexServerAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IndexServerAddress"])
                instance.registryConfig = Decoders.decodeOptional(clazz: RegistryServiceConfig.self, source: sourceDictionary["RegistryConfig"])
                instance.genericResources = Decoders.decodeOptional(clazz: GenericResources.self, source: sourceDictionary["GenericResources"])
                instance.httpProxy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HttpProxy"])
                instance.httpsProxy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HttpsProxy"])
                instance.noProxy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NoProxy"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Labels"])
                instance.experimentalBuild = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ExperimentalBuild"])
                instance.serverVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ServerVersion"])
                instance.clusterStore = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ClusterStore"])
                instance.clusterAdvertise = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ClusterAdvertise"])
                instance.runtimes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Runtimes"])
                instance.defaultRuntime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultRuntime"])
                instance.swarm = Decoders.decodeOptional(clazz: SwarmInfo.self, source: sourceDictionary["Swarm"])
                instance.liveRestoreEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["LiveRestoreEnabled"])
                instance.isolation = SystemInfo.Isolation(rawValue: (sourceDictionary["Isolation"] as? String) ?? "") 
                instance.initBinary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["InitBinary"])
                instance.containerdCommit = Decoders.decodeOptional(clazz: Commit.self, source: sourceDictionary["ContainerdCommit"])
                instance.runcCommit = Decoders.decodeOptional(clazz: Commit.self, source: sourceDictionary["RuncCommit"])
                instance.initCommit = Decoders.decodeOptional(clazz: Commit.self, source: sourceDictionary["InitCommit"])
                instance.securityOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SecurityOptions"])
                return instance
            }


            // Decoder for [SystemVersionResponse]
            Decoders.addDecoder(clazz: [SystemVersionResponse].self) { (source: AnyObject) -> [SystemVersionResponse] in
                return Decoders.decode(clazz: [SystemVersionResponse].self, source: source)
            }
            // Decoder for SystemVersionResponse
            Decoders.addDecoder(clazz: SystemVersionResponse.self) { (source: AnyObject) -> SystemVersionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemVersionResponse()
                instance.platform = Decoders.decodeOptional(clazz: SystemVersionResponsePlatform.self, source: sourceDictionary["Platform"])
                instance.components = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Components"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Version"])
                instance.apiVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ApiVersion"])
                instance.minAPIVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MinAPIVersion"])
                instance.gitCommit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["GitCommit"])
                instance.goVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["GoVersion"])
                instance.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Os"])
                instance.arch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Arch"])
                instance.kernelVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["KernelVersion"])
                instance.experimental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Experimental"])
                instance.buildTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BuildTime"])
                return instance
            }


            // Decoder for [SystemVersionResponseComponents]
            Decoders.addDecoder(clazz: [SystemVersionResponseComponents].self) { (source: AnyObject) -> [SystemVersionResponseComponents] in
                return Decoders.decode(clazz: [SystemVersionResponseComponents].self, source: source)
            }
            // Decoder for SystemVersionResponseComponents
            Decoders.addDecoder(clazz: SystemVersionResponseComponents.self) { (source: AnyObject) -> SystemVersionResponseComponents in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemVersionResponseComponents()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Version"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["Details"])
                return instance
            }


            // Decoder for [SystemVersionResponsePlatform]
            Decoders.addDecoder(clazz: [SystemVersionResponsePlatform].self) { (source: AnyObject) -> [SystemVersionResponsePlatform] in
                return Decoders.decode(clazz: [SystemVersionResponsePlatform].self, source: source)
            }
            // Decoder for SystemVersionResponsePlatform
            Decoders.addDecoder(clazz: SystemVersionResponsePlatform.self) { (source: AnyObject) -> SystemVersionResponsePlatform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemVersionResponsePlatform()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                return instance
            }


            // Decoder for [TLSInfo]
            Decoders.addDecoder(clazz: [TLSInfo].self) { (source: AnyObject) -> [TLSInfo] in
                return Decoders.decode(clazz: [TLSInfo].self, source: source)
            }
            // Decoder for TLSInfo
            Decoders.addDecoder(clazz: TLSInfo.self) { (source: AnyObject) -> TLSInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TLSInfo()
                instance.trustRoot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TrustRoot"])
                instance.certIssuerSubject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CertIssuerSubject"])
                instance.certIssuerPublicKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CertIssuerPublicKey"])
                return instance
            }


            // Decoder for [Task]
            Decoders.addDecoder(clazz: [Task].self) { (source: AnyObject) -> [Task] in
                return Decoders.decode(clazz: [Task].self, source: source)
            }
            // Decoder for Task
            Decoders.addDecoder(clazz: Task.self) { (source: AnyObject) -> Task in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Task()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.spec = Decoders.decodeOptional(clazz: TaskSpec.self, source: sourceDictionary["Spec"])
                instance.serviceID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ServiceID"])
                instance.slot = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Slot"])
                instance.nodeID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NodeID"])
                instance.assignedGenericResources = Decoders.decodeOptional(clazz: GenericResources.self, source: sourceDictionary["AssignedGenericResources"])
                instance.status = Decoders.decodeOptional(clazz: TaskStatus.self, source: sourceDictionary["Status"])
                instance.desiredState = Decoders.decodeOptional(clazz: TaskState.self, source: sourceDictionary["DesiredState"])
                return instance
            }


            // Decoder for [TaskSpec]
            Decoders.addDecoder(clazz: [TaskSpec].self) { (source: AnyObject) -> [TaskSpec] in
                return Decoders.decode(clazz: [TaskSpec].self, source: source)
            }
            // Decoder for TaskSpec
            Decoders.addDecoder(clazz: TaskSpec.self) { (source: AnyObject) -> TaskSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpec()
                instance.pluginSpec = Decoders.decodeOptional(clazz: TaskSpecPluginSpec.self, source: sourceDictionary["PluginSpec"])
                instance.containerSpec = Decoders.decodeOptional(clazz: TaskSpecContainerSpec.self, source: sourceDictionary["ContainerSpec"])
                instance.resources = Decoders.decodeOptional(clazz: TaskSpecResources.self, source: sourceDictionary["Resources"])
                instance.restartPolicy = Decoders.decodeOptional(clazz: TaskSpecRestartPolicy.self, source: sourceDictionary["RestartPolicy"])
                instance.placement = Decoders.decodeOptional(clazz: TaskSpecPlacement.self, source: sourceDictionary["Placement"])
                instance.forceUpdate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ForceUpdate"])
                instance.runtime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Runtime"])
                instance.networks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Networks"])
                instance.logDriver = Decoders.decodeOptional(clazz: TaskSpecLogDriver.self, source: sourceDictionary["LogDriver"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpec]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpec].self) { (source: AnyObject) -> [TaskSpecContainerSpec] in
                return Decoders.decode(clazz: [TaskSpecContainerSpec].self, source: source)
            }
            // Decoder for TaskSpecContainerSpec
            Decoders.addDecoder(clazz: TaskSpecContainerSpec.self) { (source: AnyObject) -> TaskSpecContainerSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpec()
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Image"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.command = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Command"])
                instance.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Args"])
                instance.hostname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Hostname"])
                instance.env = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Env"])
                instance.dir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Dir"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["User"])
                instance.groups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Groups"])
                instance.privileges = Decoders.decodeOptional(clazz: TaskSpecContainerSpecPrivileges.self, source: sourceDictionary["Privileges"])
                instance.TTY = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["TTY"])
                instance.openStdin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OpenStdin"])
                instance.readOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ReadOnly"])
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                instance.stopSignal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["StopSignal"])
                instance.stopGracePeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["StopGracePeriod"])
                instance.healthCheck = Decoders.decodeOptional(clazz: HealthConfig.self, source: sourceDictionary["HealthCheck"])
                instance.hosts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Hosts"])
                instance.dNSConfig = Decoders.decodeOptional(clazz: TaskSpecContainerSpecDNSConfig.self, source: sourceDictionary["DNSConfig"])
                instance.secrets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Secrets"])
                instance.configs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Configs"])
                instance.isolation = TaskSpecContainerSpec.Isolation(rawValue: (sourceDictionary["Isolation"] as? String) ?? "") 
                return instance
            }


            // Decoder for [TaskSpecContainerSpecConfigs]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecConfigs].self) { (source: AnyObject) -> [TaskSpecContainerSpecConfigs] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecConfigs].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecConfigs
            Decoders.addDecoder(clazz: TaskSpecContainerSpecConfigs.self) { (source: AnyObject) -> TaskSpecContainerSpecConfigs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecConfigs()
                instance.file = Decoders.decodeOptional(clazz: TaskSpecContainerSpecFile.self, source: sourceDictionary["File"])
                instance.configID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfigID"])
                instance.configName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfigName"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecDNSConfig]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecDNSConfig].self) { (source: AnyObject) -> [TaskSpecContainerSpecDNSConfig] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecDNSConfig].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecDNSConfig
            Decoders.addDecoder(clazz: TaskSpecContainerSpecDNSConfig.self) { (source: AnyObject) -> TaskSpecContainerSpecDNSConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecDNSConfig()
                instance.nameservers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Nameservers"])
                instance.search = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Search"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecFile]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecFile].self) { (source: AnyObject) -> [TaskSpecContainerSpecFile] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecFile].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecFile
            Decoders.addDecoder(clazz: TaskSpecContainerSpecFile.self) { (source: AnyObject) -> TaskSpecContainerSpecFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecFile()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.UID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UID"])
                instance.GID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["GID"])
                instance.mode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Mode"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecPrivileges]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecPrivileges].self) { (source: AnyObject) -> [TaskSpecContainerSpecPrivileges] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecPrivileges].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecPrivileges
            Decoders.addDecoder(clazz: TaskSpecContainerSpecPrivileges.self) { (source: AnyObject) -> TaskSpecContainerSpecPrivileges in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecPrivileges()
                instance.credentialSpec = Decoders.decodeOptional(clazz: TaskSpecContainerSpecPrivilegesCredentialSpec.self, source: sourceDictionary["CredentialSpec"])
                instance.sELinuxContext = Decoders.decodeOptional(clazz: TaskSpecContainerSpecPrivilegesSELinuxContext.self, source: sourceDictionary["SELinuxContext"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecPrivilegesCredentialSpec]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecPrivilegesCredentialSpec].self) { (source: AnyObject) -> [TaskSpecContainerSpecPrivilegesCredentialSpec] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecPrivilegesCredentialSpec].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecPrivilegesCredentialSpec
            Decoders.addDecoder(clazz: TaskSpecContainerSpecPrivilegesCredentialSpec.self) { (source: AnyObject) -> TaskSpecContainerSpecPrivilegesCredentialSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecPrivilegesCredentialSpec()
                instance.file = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["File"])
                instance.registry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Registry"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecPrivilegesSELinuxContext]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecPrivilegesSELinuxContext].self) { (source: AnyObject) -> [TaskSpecContainerSpecPrivilegesSELinuxContext] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecPrivilegesSELinuxContext].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecPrivilegesSELinuxContext
            Decoders.addDecoder(clazz: TaskSpecContainerSpecPrivilegesSELinuxContext.self) { (source: AnyObject) -> TaskSpecContainerSpecPrivilegesSELinuxContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecPrivilegesSELinuxContext()
                instance.disable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Disable"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["User"])
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Role"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Level"])
                return instance
            }


            // Decoder for [TaskSpecContainerSpecSecrets]
            Decoders.addDecoder(clazz: [TaskSpecContainerSpecSecrets].self) { (source: AnyObject) -> [TaskSpecContainerSpecSecrets] in
                return Decoders.decode(clazz: [TaskSpecContainerSpecSecrets].self, source: source)
            }
            // Decoder for TaskSpecContainerSpecSecrets
            Decoders.addDecoder(clazz: TaskSpecContainerSpecSecrets.self) { (source: AnyObject) -> TaskSpecContainerSpecSecrets in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecContainerSpecSecrets()
                instance.file = Decoders.decodeOptional(clazz: TaskSpecContainerSpecFile.self, source: sourceDictionary["File"])
                instance.secretID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SecretID"])
                instance.secretName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SecretName"])
                return instance
            }


            // Decoder for [TaskSpecLogDriver]
            Decoders.addDecoder(clazz: [TaskSpecLogDriver].self) { (source: AnyObject) -> [TaskSpecLogDriver] in
                return Decoders.decode(clazz: [TaskSpecLogDriver].self, source: source)
            }
            // Decoder for TaskSpecLogDriver
            Decoders.addDecoder(clazz: TaskSpecLogDriver.self) { (source: AnyObject) -> TaskSpecLogDriver in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecLogDriver()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                return instance
            }


            // Decoder for [TaskSpecNetworks]
            Decoders.addDecoder(clazz: [TaskSpecNetworks].self) { (source: AnyObject) -> [TaskSpecNetworks] in
                return Decoders.decode(clazz: [TaskSpecNetworks].self, source: source)
            }
            // Decoder for TaskSpecNetworks
            Decoders.addDecoder(clazz: TaskSpecNetworks.self) { (source: AnyObject) -> TaskSpecNetworks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecNetworks()
                instance.target = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Target"])
                instance.aliases = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Aliases"])
                return instance
            }


            // Decoder for [TaskSpecPlacement]
            Decoders.addDecoder(clazz: [TaskSpecPlacement].self) { (source: AnyObject) -> [TaskSpecPlacement] in
                return Decoders.decode(clazz: [TaskSpecPlacement].self, source: source)
            }
            // Decoder for TaskSpecPlacement
            Decoders.addDecoder(clazz: TaskSpecPlacement.self) { (source: AnyObject) -> TaskSpecPlacement in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecPlacement()
                instance.constraints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Constraints"])
                instance.preferences = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Preferences"])
                instance.platforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Platforms"])
                return instance
            }


            // Decoder for [TaskSpecPlacementPreferences]
            Decoders.addDecoder(clazz: [TaskSpecPlacementPreferences].self) { (source: AnyObject) -> [TaskSpecPlacementPreferences] in
                return Decoders.decode(clazz: [TaskSpecPlacementPreferences].self, source: source)
            }
            // Decoder for TaskSpecPlacementPreferences
            Decoders.addDecoder(clazz: TaskSpecPlacementPreferences.self) { (source: AnyObject) -> TaskSpecPlacementPreferences in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecPlacementPreferences()
                instance.spread = Decoders.decodeOptional(clazz: TaskSpecPlacementSpread.self, source: sourceDictionary["Spread"])
                return instance
            }


            // Decoder for [TaskSpecPlacementSpread]
            Decoders.addDecoder(clazz: [TaskSpecPlacementSpread].self) { (source: AnyObject) -> [TaskSpecPlacementSpread] in
                return Decoders.decode(clazz: [TaskSpecPlacementSpread].self, source: source)
            }
            // Decoder for TaskSpecPlacementSpread
            Decoders.addDecoder(clazz: TaskSpecPlacementSpread.self) { (source: AnyObject) -> TaskSpecPlacementSpread in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecPlacementSpread()
                instance.spreadDescriptor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SpreadDescriptor"])
                return instance
            }


            // Decoder for [TaskSpecPluginSpec]
            Decoders.addDecoder(clazz: [TaskSpecPluginSpec].self) { (source: AnyObject) -> [TaskSpecPluginSpec] in
                return Decoders.decode(clazz: [TaskSpecPluginSpec].self, source: source)
            }
            // Decoder for TaskSpecPluginSpec
            Decoders.addDecoder(clazz: TaskSpecPluginSpec.self) { (source: AnyObject) -> TaskSpecPluginSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecPluginSpec()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.remote = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Remote"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Disabled"])
                instance.pluginPrivilege = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["PluginPrivilege"])
                return instance
            }


            // Decoder for [TaskSpecResources]
            Decoders.addDecoder(clazz: [TaskSpecResources].self) { (source: AnyObject) -> [TaskSpecResources] in
                return Decoders.decode(clazz: [TaskSpecResources].self, source: source)
            }
            // Decoder for TaskSpecResources
            Decoders.addDecoder(clazz: TaskSpecResources.self) { (source: AnyObject) -> TaskSpecResources in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecResources()
                instance.limits = Decoders.decodeOptional(clazz: ResourceObject.self, source: sourceDictionary["Limits"])
                instance.reservation = Decoders.decodeOptional(clazz: ResourceObject.self, source: sourceDictionary["Reservation"])
                return instance
            }


            // Decoder for [TaskSpecRestartPolicy]
            Decoders.addDecoder(clazz: [TaskSpecRestartPolicy].self) { (source: AnyObject) -> [TaskSpecRestartPolicy] in
                return Decoders.decode(clazz: [TaskSpecRestartPolicy].self, source: source)
            }
            // Decoder for TaskSpecRestartPolicy
            Decoders.addDecoder(clazz: TaskSpecRestartPolicy.self) { (source: AnyObject) -> TaskSpecRestartPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskSpecRestartPolicy()
                instance.condition = TaskSpecRestartPolicy.Condition(rawValue: (sourceDictionary["Condition"] as? String) ?? "") 
                instance.delay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Delay"])
                instance.maxAttempts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MaxAttempts"])
                instance.window = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Window"])
                return instance
            }


            // Decoder for [TaskState]
            Decoders.addDecoder(clazz: [TaskState].self) { (source: AnyObject) -> [TaskState] in
                return Decoders.decode(clazz: [TaskState].self, source: source)
            }
            // Decoder for TaskState
            Decoders.addDecoder(clazz: TaskState.self) { (source: AnyObject) -> TaskState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskState()
                return instance
            }


            // Decoder for [TaskStatus]
            Decoders.addDecoder(clazz: [TaskStatus].self) { (source: AnyObject) -> [TaskStatus] in
                return Decoders.decode(clazz: [TaskStatus].self, source: source)
            }
            // Decoder for TaskStatus
            Decoders.addDecoder(clazz: TaskStatus.self) { (source: AnyObject) -> TaskStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskStatus()
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Timestamp"])
                instance.state = Decoders.decodeOptional(clazz: TaskState.self, source: sourceDictionary["State"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Message"])
                instance.err = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Err"])
                instance.containerStatus = Decoders.decodeOptional(clazz: TaskStatusContainerStatus.self, source: sourceDictionary["ContainerStatus"])
                return instance
            }


            // Decoder for [TaskStatusContainerStatus]
            Decoders.addDecoder(clazz: [TaskStatusContainerStatus].self) { (source: AnyObject) -> [TaskStatusContainerStatus] in
                return Decoders.decode(clazz: [TaskStatusContainerStatus].self, source: source)
            }
            // Decoder for TaskStatusContainerStatus
            Decoders.addDecoder(clazz: TaskStatusContainerStatus.self) { (source: AnyObject) -> TaskStatusContainerStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaskStatusContainerStatus()
                instance.containerID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ContainerID"])
                instance.PID = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PID"])
                instance.exitCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ExitCode"])
                return instance
            }


            // Decoder for [ThrottleDevice]
            Decoders.addDecoder(clazz: [ThrottleDevice].self) { (source: AnyObject) -> [ThrottleDevice] in
                return Decoders.decode(clazz: [ThrottleDevice].self, source: source)
            }
            // Decoder for ThrottleDevice
            Decoders.addDecoder(clazz: ThrottleDevice.self) { (source: AnyObject) -> ThrottleDevice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ThrottleDevice()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"])
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Rate"])
                return instance
            }


            // Decoder for [UnlockKeyResponse]
            Decoders.addDecoder(clazz: [UnlockKeyResponse].self) { (source: AnyObject) -> [UnlockKeyResponse] in
                return Decoders.decode(clazz: [UnlockKeyResponse].self, source: source)
            }
            // Decoder for UnlockKeyResponse
            Decoders.addDecoder(clazz: UnlockKeyResponse.self) { (source: AnyObject) -> UnlockKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UnlockKeyResponse()
                instance.unlockKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UnlockKey"])
                return instance
            }


            // Decoder for [Volume]
            Decoders.addDecoder(clazz: [Volume].self) { (source: AnyObject) -> [Volume] in
                return Decoders.decode(clazz: [Volume].self, source: source)
            }
            // Decoder for Volume
            Decoders.addDecoder(clazz: Volume.self) { (source: AnyObject) -> Volume in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Volume()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.mountpoint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Mountpoint"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.status = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Status"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                instance.scope = Volume.Scope(rawValue: (sourceDictionary["Scope"] as? String) ?? "") 
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Options"])
                instance.usageData = Decoders.decodeOptional(clazz: VolumeUsageData.self, source: sourceDictionary["UsageData"])
                return instance
            }


            // Decoder for [VolumeConfig]
            Decoders.addDecoder(clazz: [VolumeConfig].self) { (source: AnyObject) -> [VolumeConfig] in
                return Decoders.decode(clazz: [VolumeConfig].self, source: source)
            }
            // Decoder for VolumeConfig
            Decoders.addDecoder(clazz: VolumeConfig.self) { (source: AnyObject) -> VolumeConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolumeConfig()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.driver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Driver"])
                instance.driverOpts = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["DriverOpts"])
                instance.labels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Labels"])
                return instance
            }


            // Decoder for [VolumeListResponse]
            Decoders.addDecoder(clazz: [VolumeListResponse].self) { (source: AnyObject) -> [VolumeListResponse] in
                return Decoders.decode(clazz: [VolumeListResponse].self, source: source)
            }
            // Decoder for VolumeListResponse
            Decoders.addDecoder(clazz: VolumeListResponse.self) { (source: AnyObject) -> VolumeListResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolumeListResponse()
                instance.volumes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Volumes"])
                instance.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Warnings"])
                return instance
            }


            // Decoder for [VolumePruneResponse]
            Decoders.addDecoder(clazz: [VolumePruneResponse].self) { (source: AnyObject) -> [VolumePruneResponse] in
                return Decoders.decode(clazz: [VolumePruneResponse].self, source: source)
            }
            // Decoder for VolumePruneResponse
            Decoders.addDecoder(clazz: VolumePruneResponse.self) { (source: AnyObject) -> VolumePruneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolumePruneResponse()
                instance.volumesDeleted = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["VolumesDeleted"])
                instance.spaceReclaimed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["SpaceReclaimed"])
                return instance
            }


            // Decoder for [VolumeUsageData]
            Decoders.addDecoder(clazz: [VolumeUsageData].self) { (source: AnyObject) -> [VolumeUsageData] in
                return Decoders.decode(clazz: [VolumeUsageData].self, source: source)
            }
            // Decoder for VolumeUsageData
            Decoders.addDecoder(clazz: VolumeUsageData.self) { (source: AnyObject) -> VolumeUsageData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolumeUsageData()
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Size"])
                instance.refCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["RefCount"])
                return instance
            }


            // Decoder for [HostConfig]
            Decoders.addDecoder(clazz: [HostConfig].self) { (source: AnyObject) -> [HostConfig] in
                return Decoders.decode(clazz: [HostConfig].self, source: source)
            }
            // Decoder for HostConfig
            Decoders.addDecoder(clazz: HostConfig.self) { (source: AnyObject) -> HostConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HostConfig()
                instance.cpuShares = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["CpuShares"])
                instance.memory = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["Memory"])
                instance.cgroupParent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CgroupParent"])
                instance.blkioWeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["BlkioWeight"])
                instance.blkioWeightDevice = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioWeightDevice"])
                instance.blkioDeviceReadBps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceReadBps"])
                instance.blkioDeviceWriteBps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceWriteBps"])
                instance.blkioDeviceReadIOps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceReadIOps"])
                instance.blkioDeviceWriteIOps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["BlkioDeviceWriteIOps"])
                instance.cpuPeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuPeriod"])
                instance.cpuQuota = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuQuota"])
                instance.cpuRealtimePeriod = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuRealtimePeriod"])
                instance.cpuRealtimeRuntime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuRealtimeRuntime"])
                instance.cpusetCpus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CpusetCpus"])
                instance.cpusetMems = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CpusetMems"])
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Devices"])
                instance.deviceCgroupRules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["DeviceCgroupRules"])
                instance.diskQuota = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["DiskQuota"])
                instance.kernelMemory = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["KernelMemory"])
                instance.memoryReservation = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemoryReservation"])
                instance.memorySwap = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemorySwap"])
                instance.memorySwappiness = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["MemorySwappiness"])
                instance.nanoCPUs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["NanoCPUs"])
                instance.oomKillDisable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["OomKillDisable"])
                instance.pidsLimit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["PidsLimit"])
                instance.ulimits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Ulimits"])
                instance.cpuCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuCount"])
                instance.cpuPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["CpuPercent"])
                instance.iOMaximumIOps = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["IOMaximumIOps"])
                instance.iOMaximumBandwidth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["IOMaximumBandwidth"])
                instance.binds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Binds"])
                instance.containerIDFile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ContainerIDFile"])
                instance.logConfig = Decoders.decodeOptional(clazz: HostConfigLogConfig.self, source: sourceDictionary["LogConfig"])
                instance.networkMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NetworkMode"])
                instance.portBindings = Decoders.decodeOptional(clazz: PortMap.self, source: sourceDictionary["PortBindings"])
                instance.restartPolicy = Decoders.decodeOptional(clazz: RestartPolicy.self, source: sourceDictionary["RestartPolicy"])
                instance.autoRemove = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AutoRemove"])
                instance.volumeDriver = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["VolumeDriver"])
                instance.volumesFrom = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["VolumesFrom"])
                instance.mounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Mounts"])
                instance.capAdd = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["CapAdd"])
                instance.capDrop = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["CapDrop"])
                instance.dns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Dns"])
                instance.dnsOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["DnsOptions"])
                instance.dnsSearch = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["DnsSearch"])
                instance.extraHosts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ExtraHosts"])
                instance.groupAdd = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["GroupAdd"])
                instance.ipcMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IpcMode"])
                instance.cgroup = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Cgroup"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Links"])
                instance.oomScoreAdj = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["OomScoreAdj"])
                instance.pidMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PidMode"])
                instance.privileged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Privileged"])
                instance.publishAllPorts = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["PublishAllPorts"])
                instance.readonlyRootfs = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ReadonlyRootfs"])
                instance.securityOpt = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SecurityOpt"])
                instance.storageOpt = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["StorageOpt"])
                instance.tmpfs = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Tmpfs"])
                instance.uTSMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UTSMode"])
                instance.usernsMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UsernsMode"])
                instance.shmSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ShmSize"])
                instance.sysctls = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["Sysctls"])
                instance.runtime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Runtime"])
                instance.consoleSize = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ConsoleSize"])
                instance.isolation = HostConfig.Isolation(rawValue: (sourceDictionary["Isolation"] as? String) ?? "") 
                return instance
            }


            // Decoder for [Swarm]
            Decoders.addDecoder(clazz: [Swarm].self) { (source: AnyObject) -> [Swarm] in
                return Decoders.decode(clazz: [Swarm].self, source: source)
            }
            // Decoder for Swarm
            Decoders.addDecoder(clazz: Swarm.self) { (source: AnyObject) -> Swarm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Swarm()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.version = Decoders.decodeOptional(clazz: ObjectVersion.self, source: sourceDictionary["Version"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreatedAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UpdatedAt"])
                instance.spec = Decoders.decodeOptional(clazz: SwarmSpec.self, source: sourceDictionary["Spec"])
                instance.tLSInfo = Decoders.decodeOptional(clazz: TLSInfo.self, source: sourceDictionary["TLSInfo"])
                instance.rootRotationInProgress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["RootRotationInProgress"])
                instance.joinTokens = Decoders.decodeOptional(clazz: JoinTokens.self, source: sourceDictionary["JoinTokens"])
                return instance
            }
        }
    }
}
