//
// ContainerConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Configuration for a container that is portable between hosts */
public class ContainerConfig: JSONEncodable {
    /** The hostname to use for the container, as a valid RFC 1123 hostname. */
    public var hostname: String?
    /** The domain name to use for the container. */
    public var domainname: String?
    /** The user that commands are run as inside the container. */
    public var user: String?
    /** Whether to attach to &#x60;stdin&#x60;. */
    public var attachStdin: Bool?
    /** Whether to attach to &#x60;stdout&#x60;. */
    public var attachStdout: Bool?
    /** Whether to attach to &#x60;stderr&#x60;. */
    public var attachStderr: Bool?
    /** An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp&gt;\&quot;: {}}&#x60;  */
    public var exposedPorts: [String:AnyObject]?
    /** Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed. */
    public var tty: Bool?
    /** Open &#x60;stdin&#x60; */
    public var openStdin: Bool?
    /** Close &#x60;stdin&#x60; after one attached client disconnects */
    public var stdinOnce: Bool?
    /** A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value.  */
    public var env: [String]?
    /** Command to run specified as a string or an array of strings. */
    public var cmd: [String]?
    public var healthcheck: HealthConfig?
    /** Command is already escaped (Windows only) */
    public var argsEscaped: Bool?
    /** The name of the image to use when creating the container */
    public var image: String?
    public var volumes: ContainerConfigVolumes?
    /** The working directory for commands to run in. */
    public var workingDir: String?
    /** The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;).  */
    public var entrypoint: [String]?
    /** Disable networking for the container. */
    public var networkDisabled: Bool?
    /** MAC address of the container. */
    public var macAddress: String?
    /** &#x60;ONBUILD&#x60; metadata that were defined in the image&#39;s &#x60;Dockerfile&#x60;. */
    public var onBuild: [String]?
    /** User-defined key/value metadata. */
    public var labels: [String:String]?
    /** Signal to stop a container as a string or unsigned integer. */
    public var stopSignal: String?
    /** Timeout to stop a container in seconds. */
    public var stopTimeout: Int32?
    /** Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell. */
    public var shell: [String]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Hostname"] = self.hostname
        nillableDictionary["Domainname"] = self.domainname
        nillableDictionary["User"] = self.user
        nillableDictionary["AttachStdin"] = self.attachStdin
        nillableDictionary["AttachStdout"] = self.attachStdout
        nillableDictionary["AttachStderr"] = self.attachStderr
        nillableDictionary["ExposedPorts"] = self.exposedPorts?.encodeToJSON()
        nillableDictionary["Tty"] = self.tty
        nillableDictionary["OpenStdin"] = self.openStdin
        nillableDictionary["StdinOnce"] = self.stdinOnce
        nillableDictionary["Env"] = self.env?.encodeToJSON()
        nillableDictionary["Cmd"] = self.cmd?.encodeToJSON()
        nillableDictionary["Healthcheck"] = self.healthcheck?.encodeToJSON()
        nillableDictionary["ArgsEscaped"] = self.argsEscaped
        nillableDictionary["Image"] = self.image
        nillableDictionary["Volumes"] = self.volumes?.encodeToJSON()
        nillableDictionary["WorkingDir"] = self.workingDir
        nillableDictionary["Entrypoint"] = self.entrypoint?.encodeToJSON()
        nillableDictionary["NetworkDisabled"] = self.networkDisabled
        nillableDictionary["MacAddress"] = self.macAddress
        nillableDictionary["OnBuild"] = self.onBuild?.encodeToJSON()
        nillableDictionary["Labels"] = self.labels?.encodeToJSON()
        nillableDictionary["StopSignal"] = self.stopSignal
        nillableDictionary["StopTimeout"] = self.stopTimeout?.encodeToJSON()
        nillableDictionary["Shell"] = self.shell?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
