//
// EndpointPortConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class EndpointPortConfig: JSONEncodable {
    public enum ModelProtocol: String { 
        case Tcp = "tcp"
        case Udp = "udp"
    }
    public enum PublishMode: String { 
        case Ingress = "ingress"
        case Host = "host"
    }
    public var name: String?
    public var _protocol: ModelProtocol?
    /** The port inside the container. */
    public var targetPort: Int32?
    /** The port on the swarm hosts. */
    public var publishedPort: Int32?
    /** The mode in which port is published.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  - \&quot;ingress\&quot; makes the target port accessible on on every node,   regardless of whether there is a task for the service running on   that node or not. - \&quot;host\&quot; bypasses the routing mesh and publish the port directly on   the swarm node where that service is running.  */
    public var publishMode: PublishMode?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Name"] = self.name
        nillableDictionary["Protocol"] = self._protocol?.rawValue
        nillableDictionary["TargetPort"] = self.targetPort?.encodeToJSON()
        nillableDictionary["PublishedPort"] = self.publishedPort?.encodeToJSON()
        nillableDictionary["PublishMode"] = self.publishMode?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
