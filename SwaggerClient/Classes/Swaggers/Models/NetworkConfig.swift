//
// NetworkConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class NetworkConfig: JSONEncodable {
    /** The network&#39;s name. */
    public var name: String?
    /** Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. */
    public var checkDuplicate: Bool?
    /** Name of the network driver plugin to use. */
    public var driver: String?
    /** Restrict external access to the network. */
    public var _internal: Bool?
    /** Globally scoped network is manually attachable by regular containers from workers in swarm mode. */
    public var attachable: Bool?
    /** Ingress network is the network which provides the routing-mesh in swarm mode. */
    public var ingress: Bool?
    /** Optional custom IP scheme for the network. */
    public var IPAM: IPAM?
    /** Enable IPv6 on the network. */
    public var enableIPv6: Bool?
    /** Network specific options to be used by the drivers. */
    public var options: [String:String]?
    /** User-defined key/value metadata. */
    public var labels: [String:String]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Name"] = self.name
        nillableDictionary["CheckDuplicate"] = self.checkDuplicate
        nillableDictionary["Driver"] = self.driver
        nillableDictionary["Internal"] = self._internal
        nillableDictionary["Attachable"] = self.attachable
        nillableDictionary["Ingress"] = self.ingress
        nillableDictionary["IPAM"] = self.IPAM?.encodeToJSON()
        nillableDictionary["EnableIPv6"] = self.enableIPv6
        nillableDictionary["Options"] = self.options?.encodeToJSON()
        nillableDictionary["Labels"] = self.labels?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
