//
// SwarmSpecCAConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** CA configuration. */
public class SwarmSpecCAConfig: JSONEncodable {
    /** The duration node certificates are issued for. */
    public var nodeCertExpiry: Int64?
    /** Configuration for forwarding signing requests to an external certificate authority. */
    public var externalCAs: [SwarmSpecCAConfigExternalCAs]?
    /** The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format. */
    public var signingCACert: String?
    /** The desired signing CA key for all swarm node TLS leaf certificates, in PEM format. */
    public var signingCAKey: String?
    /** An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in &#x60;SigningCACert&#x60; and &#x60;SigningCAKey&#x60; */
    public var forceRotate: Int32?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["NodeCertExpiry"] = self.nodeCertExpiry?.encodeToJSON()
        nillableDictionary["ExternalCAs"] = self.externalCAs?.encodeToJSON()
        nillableDictionary["SigningCACert"] = self.signingCACert
        nillableDictionary["SigningCAKey"] = self.signingCAKey
        nillableDictionary["ForceRotate"] = self.forceRotate?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
