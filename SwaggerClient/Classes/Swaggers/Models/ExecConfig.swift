//
// ExecConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ExecConfig: JSONEncodable {
    /** Attach to &#x60;stdin&#x60; of the exec command. */
    public var attachStdin: Bool?
    /** Attach to &#x60;stdout&#x60; of the exec command. */
    public var attachStdout: Bool?
    /** Attach to &#x60;stderr&#x60; of the exec command. */
    public var attachStderr: Bool?
    /** Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. */
    public var detachKeys: String?
    /** Allocate a pseudo-TTY. */
    public var tty: Bool?
    /** A list of environment variables in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. */
    public var env: [String]?
    /** Command to run, as a string or array of strings. */
    public var cmd: [String]?
    /** Runs the exec process with extended privileges. */
    public var privileged: Bool?
    /** The user, and optionally, group to run the exec process inside the container. Format is one of: &#x60;user&#x60;, &#x60;user:group&#x60;, &#x60;uid&#x60;, or &#x60;uid:gid&#x60;. */
    public var user: String?
    /** The working directory for the exec process inside the container. */
    public var workingDir: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["AttachStdin"] = self.attachStdin
        nillableDictionary["AttachStdout"] = self.attachStdout
        nillableDictionary["AttachStderr"] = self.attachStderr
        nillableDictionary["DetachKeys"] = self.detachKeys
        nillableDictionary["Tty"] = self.tty
        nillableDictionary["Env"] = self.env?.encodeToJSON()
        nillableDictionary["Cmd"] = self.cmd?.encodeToJSON()
        nillableDictionary["Privileged"] = self.privileged
        nillableDictionary["User"] = self.user
        nillableDictionary["WorkingDir"] = self.workingDir
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
