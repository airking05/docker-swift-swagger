//
// Mount.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class Mount: JSONEncodable {
    public enum ModelType: String { 
        case Bind = "bind"
        case Volume = "volume"
        case Tmpfs = "tmpfs"
    }
    /** Container path. */
    public var target: String?
    /** Mount source (e.g. a volume name, a host path). */
    public var source: String?
    /** The mount type. Available types:  - &#x60;bind&#x60; Mounts a file or directory from the host into the container. Must exist prior to creating the container. - &#x60;volume&#x60; Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - &#x60;tmpfs&#x60; Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.  */
    public var type: ModelType?
    /** Whether the mount should be read-only. */
    public var readOnly: Bool?
    /** The consistency requirement for the mount: &#x60;default&#x60;, &#x60;consistent&#x60;, &#x60;cached&#x60;, or &#x60;delegated&#x60;. */
    public var consistency: String?
    public var bindOptions: MountBindOptions?
    public var volumeOptions: MountVolumeOptions?
    public var tmpfsOptions: MountTmpfsOptions?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Target"] = self.target
        nillableDictionary["Source"] = self.source
        nillableDictionary["Type"] = self.type?.rawValue
        nillableDictionary["ReadOnly"] = self.readOnly
        nillableDictionary["Consistency"] = self.consistency
        nillableDictionary["BindOptions"] = self.bindOptions?.encodeToJSON()
        nillableDictionary["VolumeOptions"] = self.volumeOptions?.encodeToJSON()
        nillableDictionary["TmpfsOptions"] = self.tmpfsOptions?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
