//
// HostConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Container configuration that depends on the host we are running on */
public class HostConfig: JSONEncodable {
    public enum Isolation: String { 
        case Default = "default"
        case Process = "process"
        case Hyperv = "hyperv"
    }
    /** An integer value representing this container&#39;s relative CPU weight versus other containers. */
    public var cpuShares: Int32?
    /** Memory limit in bytes. */
    public var memory: Int64?
    /** Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created. If the path is not absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init process. Cgroups are created if they do not already exist. */
    public var cgroupParent: String?
    /** Block IO weight (relative weight). */
    public var blkioWeight: Int32?
    /** Block IO weight (relative device weight) in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Weight\&quot;: weight}]&#x60;.  */
    public var blkioWeightDevice: [ResourcesBlkioWeightDevice]?
    /** Limit read rate (bytes per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;.  */
    public var blkioDeviceReadBps: [ThrottleDevice]?
    /** Limit write rate (bytes per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;.  */
    public var blkioDeviceWriteBps: [ThrottleDevice]?
    /** Limit read rate (IO per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;.  */
    public var blkioDeviceReadIOps: [ThrottleDevice]?
    /** Limit write rate (IO per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;.  */
    public var blkioDeviceWriteIOps: [ThrottleDevice]?
    /** The length of a CPU period in microseconds. */
    public var cpuPeriod: Int64?
    /** Microseconds of CPU time that the container can get in a CPU period. */
    public var cpuQuota: Int64?
    /** The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. */
    public var cpuRealtimePeriod: Int64?
    /** The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. */
    public var cpuRealtimeRuntime: Int64?
    /** CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;) */
    public var cpusetCpus: String?
    /** Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. */
    public var cpusetMems: String?
    /** A list of devices to add to the container. */
    public var devices: [DeviceMapping]?
    /** a list of cgroup rules to apply to the container */
    public var deviceCgroupRules: [String]?
    /** Disk limit (in bytes). */
    public var diskQuota: Int64?
    /** Kernel memory limit in bytes. */
    public var kernelMemory: Int64?
    /** Memory soft limit in bytes. */
    public var memoryReservation: Int64?
    /** Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap. */
    public var memorySwap: Int64?
    /** Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100. */
    public var memorySwappiness: Int64?
    /** CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs. */
    public var nanoCPUs: Int64?
    /** Disable OOM Killer for the container. */
    public var oomKillDisable: Bool?
    /** Tune a container&#39;s pids limit. Set -1 for unlimited. */
    public var pidsLimit: Int64?
    /** A list of resource limits to set in the container. For example: &#x60;{\&quot;Name\&quot;: \&quot;nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048}&#x60;\&quot;  */
    public var ulimits: [ResourcesUlimits]?
    /** The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last.  */
    public var cpuCount: Int64?
    /** The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last.  */
    public var cpuPercent: Int64?
    /** Maximum IOps for the container system drive (Windows only) */
    public var iOMaximumIOps: Int64?
    /** Maximum IO in bytes per second for the container system drive (Windows only) */
    public var iOMaximumBandwidth: Int64?
    /** A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path.  */
    public var binds: [String]?
    /** Path to a file where the container ID is written */
    public var containerIDFile: String?
    public var logConfig: HostConfigLogConfig?
    /** Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to. */
    public var networkMode: String?
    public var portBindings: PortMap?
    public var restartPolicy: RestartPolicy?
    /** Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set. */
    public var autoRemove: Bool?
    /** Driver that this container uses to mount volumes. */
    public var volumeDriver: String?
    /** A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;. */
    public var volumesFrom: [String]?
    /** Specification for mounts to be added to the container. */
    public var mounts: [Mount]?
    /** A list of kernel capabilities to add to the container. */
    public var capAdd: [String]?
    /** A list of kernel capabilities to drop from the container. */
    public var capDrop: [String]?
    /** A list of DNS servers for the container to use. */
    public var dns: [String]?
    /** A list of DNS options. */
    public var dnsOptions: [String]?
    /** A list of DNS search domains. */
    public var dnsSearch: [String]?
    /** A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;.  */
    public var extraHosts: [String]?
    /** A list of additional groups that the container process will run as. */
    public var groupAdd: [String]?
    /** IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration.  */
    public var ipcMode: String?
    /** Cgroup to use for the container. */
    public var cgroup: String?
    /** A list of links for the container in the form &#x60;container_name:alias&#x60;. */
    public var links: [String]?
    /** An integer value containing the score given to the container in order to tune OOM killer preferences. */
    public var oomScoreAdj: Int32?
    /** Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container  */
    public var pidMode: String?
    /** Gives the container full access to the host. */
    public var privileged: Bool?
    /** Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;.  */
    public var publishAllPorts: Bool?
    /** Mount the container&#39;s root filesystem as read only. */
    public var readonlyRootfs: Bool?
    /** A list of string values to customize labels for MLS systems, such as SELinux. */
    public var securityOpt: [String]?
    /** Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;.  */
    public var storageOpt: [String:String]?
    /** A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;.  */
    public var tmpfs: [String:String]?
    /** UTS namespace to use for the container. */
    public var uTSMode: String?
    /** Sets the usernamespace mode for the container when usernamespace remapping option is enabled. */
    public var usernsMode: String?
    /** Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB. */
    public var shmSize: Int32?
    /** A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60;  */
    public var sysctls: [String:String]?
    /** Runtime to use with this container. */
    public var runtime: String?
    /** Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only) */
    public var consoleSize: [Int32]?
    /** Isolation technology of the container. (Windows only) */
    public var isolation: Isolation?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["CpuShares"] = self.cpuShares?.encodeToJSON()
        nillableDictionary["Memory"] = self.memory?.encodeToJSON()
        nillableDictionary["CgroupParent"] = self.cgroupParent
        nillableDictionary["BlkioWeight"] = self.blkioWeight?.encodeToJSON()
        nillableDictionary["BlkioWeightDevice"] = self.blkioWeightDevice?.encodeToJSON()
        nillableDictionary["BlkioDeviceReadBps"] = self.blkioDeviceReadBps?.encodeToJSON()
        nillableDictionary["BlkioDeviceWriteBps"] = self.blkioDeviceWriteBps?.encodeToJSON()
        nillableDictionary["BlkioDeviceReadIOps"] = self.blkioDeviceReadIOps?.encodeToJSON()
        nillableDictionary["BlkioDeviceWriteIOps"] = self.blkioDeviceWriteIOps?.encodeToJSON()
        nillableDictionary["CpuPeriod"] = self.cpuPeriod?.encodeToJSON()
        nillableDictionary["CpuQuota"] = self.cpuQuota?.encodeToJSON()
        nillableDictionary["CpuRealtimePeriod"] = self.cpuRealtimePeriod?.encodeToJSON()
        nillableDictionary["CpuRealtimeRuntime"] = self.cpuRealtimeRuntime?.encodeToJSON()
        nillableDictionary["CpusetCpus"] = self.cpusetCpus
        nillableDictionary["CpusetMems"] = self.cpusetMems
        nillableDictionary["Devices"] = self.devices?.encodeToJSON()
        nillableDictionary["DeviceCgroupRules"] = self.deviceCgroupRules?.encodeToJSON()
        nillableDictionary["DiskQuota"] = self.diskQuota?.encodeToJSON()
        nillableDictionary["KernelMemory"] = self.kernelMemory?.encodeToJSON()
        nillableDictionary["MemoryReservation"] = self.memoryReservation?.encodeToJSON()
        nillableDictionary["MemorySwap"] = self.memorySwap?.encodeToJSON()
        nillableDictionary["MemorySwappiness"] = self.memorySwappiness?.encodeToJSON()
        nillableDictionary["NanoCPUs"] = self.nanoCPUs?.encodeToJSON()
        nillableDictionary["OomKillDisable"] = self.oomKillDisable
        nillableDictionary["PidsLimit"] = self.pidsLimit?.encodeToJSON()
        nillableDictionary["Ulimits"] = self.ulimits?.encodeToJSON()
        nillableDictionary["CpuCount"] = self.cpuCount?.encodeToJSON()
        nillableDictionary["CpuPercent"] = self.cpuPercent?.encodeToJSON()
        nillableDictionary["IOMaximumIOps"] = self.iOMaximumIOps?.encodeToJSON()
        nillableDictionary["IOMaximumBandwidth"] = self.iOMaximumBandwidth?.encodeToJSON()
        nillableDictionary["Binds"] = self.binds?.encodeToJSON()
        nillableDictionary["ContainerIDFile"] = self.containerIDFile
        nillableDictionary["LogConfig"] = self.logConfig?.encodeToJSON()
        nillableDictionary["NetworkMode"] = self.networkMode
        nillableDictionary["PortBindings"] = self.portBindings?.encodeToJSON()
        nillableDictionary["RestartPolicy"] = self.restartPolicy?.encodeToJSON()
        nillableDictionary["AutoRemove"] = self.autoRemove
        nillableDictionary["VolumeDriver"] = self.volumeDriver
        nillableDictionary["VolumesFrom"] = self.volumesFrom?.encodeToJSON()
        nillableDictionary["Mounts"] = self.mounts?.encodeToJSON()
        nillableDictionary["CapAdd"] = self.capAdd?.encodeToJSON()
        nillableDictionary["CapDrop"] = self.capDrop?.encodeToJSON()
        nillableDictionary["Dns"] = self.dns?.encodeToJSON()
        nillableDictionary["DnsOptions"] = self.dnsOptions?.encodeToJSON()
        nillableDictionary["DnsSearch"] = self.dnsSearch?.encodeToJSON()
        nillableDictionary["ExtraHosts"] = self.extraHosts?.encodeToJSON()
        nillableDictionary["GroupAdd"] = self.groupAdd?.encodeToJSON()
        nillableDictionary["IpcMode"] = self.ipcMode
        nillableDictionary["Cgroup"] = self.cgroup
        nillableDictionary["Links"] = self.links?.encodeToJSON()
        nillableDictionary["OomScoreAdj"] = self.oomScoreAdj?.encodeToJSON()
        nillableDictionary["PidMode"] = self.pidMode
        nillableDictionary["Privileged"] = self.privileged
        nillableDictionary["PublishAllPorts"] = self.publishAllPorts
        nillableDictionary["ReadonlyRootfs"] = self.readonlyRootfs
        nillableDictionary["SecurityOpt"] = self.securityOpt?.encodeToJSON()
        nillableDictionary["StorageOpt"] = self.storageOpt?.encodeToJSON()
        nillableDictionary["Tmpfs"] = self.tmpfs?.encodeToJSON()
        nillableDictionary["UTSMode"] = self.uTSMode
        nillableDictionary["UsernsMode"] = self.usernsMode
        nillableDictionary["ShmSize"] = self.shmSize?.encodeToJSON()
        nillableDictionary["Sysctls"] = self.sysctls?.encodeToJSON()
        nillableDictionary["Runtime"] = self.runtime
        nillableDictionary["ConsoleSize"] = self.consoleSize?.encodeToJSON()
        nillableDictionary["Isolation"] = self.isolation?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
