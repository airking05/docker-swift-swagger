//
// TaskSpecContainerSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Invalid when specified with &#x60;PluginSpec&#x60;. */
public class TaskSpecContainerSpec: JSONEncodable {
    public enum Isolation: String { 
        case Default = "default"
        case Process = "process"
        case Hyperv = "hyperv"
    }
    /** The image name to use for the container */
    public var image: String?
    /** User-defined key/value data. */
    public var labels: [String:String]?
    /** The command to be run in the image. */
    public var command: [String]?
    /** Arguments to the command. */
    public var args: [String]?
    /** The hostname to use for the container, as a valid RFC 1123 hostname. */
    public var hostname: String?
    /** A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;. */
    public var env: [String]?
    /** The working directory for commands to run in. */
    public var dir: String?
    /** The user inside the container. */
    public var user: String?
    /** A list of additional groups that the container process will run as. */
    public var groups: [String]?
    public var privileges: TaskSpecContainerSpecPrivileges?
    /** Whether a pseudo-TTY should be allocated. */
    public var TTY: Bool?
    /** Open &#x60;stdin&#x60; */
    public var openStdin: Bool?
    /** Mount the container&#39;s root filesystem as read only. */
    public var readOnly: Bool?
    /** Specification for mounts to be added to containers created as part of the service. */
    public var mounts: [Mount]?
    /** Signal to stop the container. */
    public var stopSignal: String?
    /** Amount of time to wait for the container to terminate before forcefully killing it. */
    public var stopGracePeriod: Int64?
    public var healthCheck: HealthConfig?
    /** A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]  */
    public var hosts: [String]?
    public var dNSConfig: TaskSpecContainerSpecDNSConfig?
    /** Secrets contains references to zero or more secrets that will be exposed to the service. */
    public var secrets: [TaskSpecContainerSpecSecrets]?
    /** Configs contains references to zero or more configs that will be exposed to the service. */
    public var configs: [TaskSpecContainerSpecConfigs]?
    /** Isolation technology of the containers running the service. (Windows only) */
    public var isolation: Isolation?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Image"] = self.image
        nillableDictionary["Labels"] = self.labels?.encodeToJSON()
        nillableDictionary["Command"] = self.command?.encodeToJSON()
        nillableDictionary["Args"] = self.args?.encodeToJSON()
        nillableDictionary["Hostname"] = self.hostname
        nillableDictionary["Env"] = self.env?.encodeToJSON()
        nillableDictionary["Dir"] = self.dir
        nillableDictionary["User"] = self.user
        nillableDictionary["Groups"] = self.groups?.encodeToJSON()
        nillableDictionary["Privileges"] = self.privileges?.encodeToJSON()
        nillableDictionary["TTY"] = self.TTY
        nillableDictionary["OpenStdin"] = self.openStdin
        nillableDictionary["ReadOnly"] = self.readOnly
        nillableDictionary["Mounts"] = self.mounts?.encodeToJSON()
        nillableDictionary["StopSignal"] = self.stopSignal
        nillableDictionary["StopGracePeriod"] = self.stopGracePeriod?.encodeToJSON()
        nillableDictionary["HealthCheck"] = self.healthCheck?.encodeToJSON()
        nillableDictionary["Hosts"] = self.hosts?.encodeToJSON()
        nillableDictionary["DNSConfig"] = self.dNSConfig?.encodeToJSON()
        nillableDictionary["Secrets"] = self.secrets?.encodeToJSON()
        nillableDictionary["Configs"] = self.configs?.encodeToJSON()
        nillableDictionary["Isolation"] = self.isolation?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
