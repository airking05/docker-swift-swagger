//
// SwarmSpecRaft.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Raft configuration. */
public class SwarmSpecRaft: JSONEncodable {
    /** The number of log entries between snapshots. */
    public var snapshotInterval: Int32?
    /** The number of snapshots to keep beyond the current snapshot. */
    public var keepOldSnapshots: Int32?
    /** The number of log entries to keep around to sync up slow followers after a snapshot is created. */
    public var logEntriesForSlowFollowers: Int32?
    /** The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. &#x60;ElectionTick&#x60; must be greater than &#x60;HeartbeatTick&#x60;.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.  */
    public var electionTick: Int32?
    /** The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.  */
    public var heartbeatTick: Int32?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["SnapshotInterval"] = self.snapshotInterval?.encodeToJSON()
        nillableDictionary["KeepOldSnapshots"] = self.keepOldSnapshots?.encodeToJSON()
        nillableDictionary["LogEntriesForSlowFollowers"] = self.logEntriesForSlowFollowers?.encodeToJSON()
        nillableDictionary["ElectionTick"] = self.electionTick?.encodeToJSON()
        nillableDictionary["HeartbeatTick"] = self.heartbeatTick?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
