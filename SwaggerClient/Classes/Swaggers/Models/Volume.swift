//
// Volume.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class Volume: JSONEncodable {
    public enum Scope: String { 
        case Local = "local"
        case Global = "global"
    }
    /** Name of the volume. */
    public var name: String?
    /** Name of the volume driver used by the volume. */
    public var driver: String?
    /** Mount path of the volume on the host. */
    public var mountpoint: String?
    /** Date/Time the volume was created. */
    public var createdAt: String?
    /** Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: &#x60;{\&quot;key\&quot;:\&quot;value\&quot;,\&quot;key2\&quot;:\&quot;value2\&quot;}&#x60;.  The &#x60;Status&#x60; field is optional, and is omitted if the volume driver does not support this feature.  */
    public var status: [String:AnyObject]?
    /** User-defined key/value metadata. */
    public var labels: [String:String]?
    /** The level at which the volume exists. Either &#x60;global&#x60; for cluster-wide, or &#x60;local&#x60; for machine level. */
    public var scope: Scope?
    /** The driver specific options used when creating the volume. */
    public var options: [String:String]?
    public var usageData: VolumeUsageData?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["Name"] = self.name
        nillableDictionary["Driver"] = self.driver
        nillableDictionary["Mountpoint"] = self.mountpoint
        nillableDictionary["CreatedAt"] = self.createdAt
        nillableDictionary["Status"] = self.status?.encodeToJSON()
        nillableDictionary["Labels"] = self.labels?.encodeToJSON()
        nillableDictionary["Scope"] = self.scope?.rawValue
        nillableDictionary["Options"] = self.options?.encodeToJSON()
        nillableDictionary["UsageData"] = self.usageData?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
