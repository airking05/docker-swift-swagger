//
// NetworkAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class NetworkAPI: APIBase {
    /**
     Connect a container to a network
     
     - parameter id: (path) Network ID or name 
     - parameter container: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkConnect(id id: String, container: Container, completion: ((error: ErrorType?) -> Void)) {
        networkConnectWithRequestBuilder(id: id, container: container).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Connect a container to a network
     - POST /networks/{id}/connect
     
     - parameter id: (path) Network ID or name 
     - parameter container: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func networkConnectWithRequestBuilder(id id: String, container: Container) -> RequestBuilder<Void> {
        var path = "/networks/{id}/connect"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = container.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a network
     
     - parameter networkConfig: (body) Network configuration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkCreate(networkConfig networkConfig: NetworkConfig, completion: ((data: NetworkCreateResponse?, error: ErrorType?) -> Void)) {
        networkCreateWithRequestBuilder(networkConfig: networkConfig).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a network
     - POST /networks/create
     - examples: [{example="{\"Id\":\"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\",\"Warning\":\"\"}", contentType=application/json}]
     
     - parameter networkConfig: (body) Network configuration 

     - returns: RequestBuilder<NetworkCreateResponse> 
     */
    public class func networkCreateWithRequestBuilder(networkConfig networkConfig: NetworkConfig) -> RequestBuilder<NetworkCreateResponse> {
        let path = "/networks/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = networkConfig.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NetworkCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove a network
     
     - parameter id: (path) Network ID or name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkDelete(id id: String, completion: ((error: ErrorType?) -> Void)) {
        networkDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove a network
     - DELETE /networks/{id}
     
     - parameter id: (path) Network ID or name 

     - returns: RequestBuilder<Void> 
     */
    public class func networkDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/networks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Disconnect a container from a network
     
     - parameter id: (path) Network ID or name 
     - parameter container: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkDisconnect(id id: String, container: Container1, completion: ((error: ErrorType?) -> Void)) {
        networkDisconnectWithRequestBuilder(id: id, container: container).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Disconnect a container from a network
     - POST /networks/{id}/disconnect
     
     - parameter id: (path) Network ID or name 
     - parameter container: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func networkDisconnectWithRequestBuilder(id id: String, container: Container1) -> RequestBuilder<Void> {
        var path = "/networks/{id}/disconnect"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = container.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Inspect a network
     
     - parameter id: (path) Network ID or name 
     - parameter verbose: (query) Detailed inspect output for troubleshooting (optional, default to false)
     - parameter scope: (query) Filter the network by scope (swarm, global, or local) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkInspect(id id: String, verbose: Bool? = nil, scope: String? = nil, completion: ((data: Network?, error: ErrorType?) -> Void)) {
        networkInspectWithRequestBuilder(id: id, verbose: verbose, scope: scope).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect a network
     - GET /networks/{id}
     - examples: [{example={
  "Name" : "net01",
  "Id" : "7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99",
  "Created" : "2016-10-19T04:33:30.360899459Z",
  "Scope" : "local",
  "Driver" : "bridge",
  "EnableIPv6" : false,
  "IPAM" : {
    "Driver" : "default",
    "Config" : [ {
      "Subnet" : "172.19.0.0/16",
      "Gateway" : "172.19.0.1"
    } ],
    "Options" : {
      "foo" : "bar"
    }
  },
  "Internal" : false,
  "Attachable" : false,
  "Ingress" : false,
  "Containers" : {
    "19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c" : {
      "Name" : "test",
      "EndpointID" : "628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a",
      "MacAddress" : "02:42:ac:13:00:02",
      "IPv4Address" : "172.19.0.2/16",
      "IPv6Address" : ""
    }
  },
  "Options" : {
    "com.docker.network.bridge.default_bridge" : "true",
    "com.docker.network.bridge.enable_icc" : "true",
    "com.docker.network.bridge.enable_ip_masquerade" : "true",
    "com.docker.network.bridge.host_binding_ipv4" : "0.0.0.0",
    "com.docker.network.bridge.name" : "docker0",
    "com.docker.network.driver.mtu" : "1500"
  },
  "Labels" : {
    "com.example.some-label" : "some-value",
    "com.example.some-other-label" : "some-other-value"
  }
}, contentType=application/json}]
     
     - parameter id: (path) Network ID or name 
     - parameter verbose: (query) Detailed inspect output for troubleshooting (optional, default to false)
     - parameter scope: (query) Filter the network by scope (swarm, global, or local) (optional)

     - returns: RequestBuilder<Network> 
     */
    public class func networkInspectWithRequestBuilder(id id: String, verbose: Bool? = nil, scope: String? = nil) -> RequestBuilder<Network> {
        var path = "/networks/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "verbose": verbose,
            "scope": scope
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Network>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List networks
     
     - parameter filters: (query) JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list. Available filters:  - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkList(filters filters: String? = nil, completion: ((data: [Network]?, error: ErrorType?) -> Void)) {
        networkListWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List networks
     - GET /networks
     - Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
     - examples: [{example=[ {
  "Name" : "bridge",
  "Id" : "f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566",
  "Created" : "2016-10-19T06:21:00.416543526Z",
  "Scope" : "local",
  "Driver" : "bridge",
  "EnableIPv6" : false,
  "Internal" : false,
  "Attachable" : false,
  "Ingress" : false,
  "IPAM" : {
    "Driver" : "default",
    "Config" : [ {
      "Subnet" : "172.17.0.0/16"
    } ]
  },
  "Options" : {
    "com.docker.network.bridge.default_bridge" : "true",
    "com.docker.network.bridge.enable_icc" : "true",
    "com.docker.network.bridge.enable_ip_masquerade" : "true",
    "com.docker.network.bridge.host_binding_ipv4" : "0.0.0.0",
    "com.docker.network.bridge.name" : "docker0",
    "com.docker.network.driver.mtu" : "1500"
  }
}, {
  "Name" : "none",
  "Id" : "e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794",
  "Created" : "0001-01-01T00:00:00Z",
  "Scope" : "local",
  "Driver" : "null",
  "EnableIPv6" : false,
  "Internal" : false,
  "Attachable" : false,
  "Ingress" : false,
  "IPAM" : {
    "Driver" : "default",
    "Config" : [ ]
  },
  "Containers" : { },
  "Options" : { }
}, {
  "Name" : "host",
  "Id" : "13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e",
  "Created" : "0001-01-01T00:00:00Z",
  "Scope" : "local",
  "Driver" : "host",
  "EnableIPv6" : false,
  "Internal" : false,
  "Attachable" : false,
  "Ingress" : false,
  "IPAM" : {
    "Driver" : "default",
    "Config" : [ ]
  },
  "Containers" : { },
  "Options" : { }
} ], contentType=application/json}]
     
     - parameter filters: (query) JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list. Available filters:  - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks.  (optional)

     - returns: RequestBuilder<[Network]> 
     */
    public class func networkListWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<[Network]> {
        let path = "/networks"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Network]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete unused networks
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func networkPrune(filters filters: String? = nil, completion: ((data: NetworkPruneResponse?, error: ErrorType?) -> Void)) {
        networkPruneWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete unused networks
     - POST /networks/prune
     - examples: [{example={
  "NetworksDeleted" : [ "NetworksDeleted", "NetworksDeleted" ]
}, contentType=application/json}]
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)

     - returns: RequestBuilder<NetworkPruneResponse> 
     */
    public class func networkPruneWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<NetworkPruneResponse> {
        let path = "/networks/prune"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NetworkPruneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
