//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**
     Get task logs
     
     - parameter id: (path) ID of the task 
     - parameter details: (query) Show task context and extra details provided to logs. (optional, default to false)
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func taskLogs(id id: String, details: Bool? = nil, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        taskLogsWithRequestBuilder(id: id, details: details, follow: follow, stdout: stdout, stderr: stderr, since: since, timestamps: timestamps, tail: tail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get task logs
     - GET /tasks/{id}/logs
     - Get `stdout` and `stderr` logs from a task.  **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers. 
     - examples: [{example="", contentType=application/json}]
     
     - parameter id: (path) ID of the task 
     - parameter details: (query) Show task context and extra details provided to logs. (optional, default to false)
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)

     - returns: RequestBuilder<String> 
     */
    public class func taskLogsWithRequestBuilder(id id: String, details: Bool? = nil, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil) -> RequestBuilder<String> {
        var path = "/tasks/{id}/logs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "details": details,
            "follow": follow,
            "stdout": stdout,
            "stderr": stderr,
            "since": since?.encodeToJSON(),
            "timestamps": timestamps,
            "tail": tail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
