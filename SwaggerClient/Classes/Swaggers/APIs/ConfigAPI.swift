//
// ConfigAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConfigAPI: APIBase {
    /**
     Create a config
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configCreate(body body: ? = nil, completion: ((data: IdResponse?, error: ErrorType?) -> Void)) {
        configCreateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a config
     - POST /configs/create
     - examples: [{example={
  "Id" : "Id"
}, contentType=application/json}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<IdResponse> 
     */
    public class func configCreateWithRequestBuilder(body body: ? = nil) -> RequestBuilder<IdResponse> {
        let path = "/configs/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<IdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a config
     
     - parameter id: (path) ID of the config 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configDelete(id id: String, completion: ((error: ErrorType?) -> Void)) {
        configDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a config
     - DELETE /configs/{id}
     
     - parameter id: (path) ID of the config 

     - returns: RequestBuilder<Void> 
     */
    public class func configDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/configs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Inspect a config
     
     - parameter id: (path) ID of the config 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configInspect(id id: String, completion: ((data: Config?, error: ErrorType?) -> Void)) {
        configInspectWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect a config
     - GET /configs/{id}
     - examples: [{example={
  "ID" : "ktnbjxoalbkvbvedmg1urrz8h",
  "Version" : {
    "Index" : 11
  },
  "CreatedAt" : "2016-11-05T01:20:17.327670065Z",
  "UpdatedAt" : "2016-11-05T01:20:17.327670065Z",
  "Spec" : {
    "Name" : "app-dev.crt"
  }
}, contentType=application/json}]
     
     - parameter id: (path) ID of the config 

     - returns: RequestBuilder<Config> 
     */
    public class func configInspectWithRequestBuilder(id id: String) -> RequestBuilder<Config> {
        var path = "/configs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Config>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List configs
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list. Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configList(filters filters: String? = nil, completion: ((data: [Config]?, error: ErrorType?) -> Void)) {
        configListWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List configs
     - GET /configs
     - examples: [{example=[ {
  "ID" : "ktnbjxoalbkvbvedmg1urrz8h",
  "Version" : {
    "Index" : 11
  },
  "CreatedAt" : "2016-11-05T01:20:17.327670065Z",
  "UpdatedAt" : "2016-11-05T01:20:17.327670065Z",
  "Spec" : {
    "Name" : "server.conf"
  }
} ], contentType=application/json}]
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list. Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60;  (optional)

     - returns: RequestBuilder<[Config]> 
     */
    public class func configListWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<[Config]> {
        let path = "/configs"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Config]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a Config
     
     - parameter id: (path) The ID or name of the config 
     - parameter version: (query) The version number of the config object being updated. This is required to avoid conflicting writes. 
     - parameter body: (body) The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func configUpdate(id id: String, version: Int64, body: ConfigSpec? = nil, completion: ((error: ErrorType?) -> Void)) {
        configUpdateWithRequestBuilder(id: id, version: version, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a Config
     - POST /configs/{id}/update
     
     - parameter id: (path) The ID or name of the config 
     - parameter version: (query) The version number of the config object being updated. This is required to avoid conflicting writes. 
     - parameter body: (body) The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func configUpdateWithRequestBuilder(id id: String, version: Int64, body: ConfigSpec? = nil) -> RequestBuilder<Void> {
        var path = "/configs/{id}/update"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
