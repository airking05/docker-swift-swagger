//
// ContainerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContainerAPI: APIBase {
    /**
     Get an archive of a filesystem resource in a container
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Resource in the container’s filesystem to archive. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerArchive(id id: String, path: String, completion: ((error: ErrorType?) -> Void)) {
        containerArchiveWithRequestBuilder(id: id, path: path).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get an archive of a filesystem resource in a container
     - GET /containers/{id}/archive
     - Get a tar archive of a resource in the filesystem of container id.
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Resource in the container’s filesystem to archive. 

     - returns: RequestBuilder<Void> 
     */
    public class func containerArchiveWithRequestBuilder(id id: String, path: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/archive"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get information about files in a container
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Resource in the container’s filesystem to archive. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerArchiveInfo(id id: String, path: String, completion: ((error: ErrorType?) -> Void)) {
        containerArchiveInfoWithRequestBuilder(id: id, path: path).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get information about files in a container
     - HEAD /containers/{id}/archive
     - A response header `X-Docker-Container-Path-Stat` is return containing a base64 - encoded JSON object with some filesystem header information about the path.
     - responseHeaders: [X-Docker-Container-Path-Stat(String)]
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Resource in the container’s filesystem to archive. 

     - returns: RequestBuilder<Void> 
     */
    public class func containerArchiveInfoWithRequestBuilder(id id: String, path: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/archive"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Attach to a container
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)
     - parameter logs: (query) Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)
     - parameter stream: (query) Stream attached streams from the time the request was made onwards (optional, default to false)
     - parameter stdin: (query) Attach to &#x60;stdin&#x60; (optional, default to false)
     - parameter stdout: (query) Attach to &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Attach to &#x60;stderr&#x60; (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerAttach(id id: String, detachKeys: String? = nil, logs: Bool? = nil, stream: Bool? = nil, stdin: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerAttachWithRequestBuilder(id: id, detachKeys: detachKeys, logs: logs, stream: stream, stdin: stdin, stdout: stdout, stderr: stderr).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach to a container
     - POST /containers/{id}/attach
     - Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See [the documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)
     - parameter logs: (query) Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)
     - parameter stream: (query) Stream attached streams from the time the request was made onwards (optional, default to false)
     - parameter stdin: (query) Attach to &#x60;stdin&#x60; (optional, default to false)
     - parameter stdout: (query) Attach to &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Attach to &#x60;stderr&#x60; (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    public class func containerAttachWithRequestBuilder(id id: String, detachKeys: String? = nil, logs: Bool? = nil, stream: Bool? = nil, stdin: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/attach"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "detachKeys": detachKeys,
            "logs": logs,
            "stream": stream,
            "stdin": stdin,
            "stdout": stdout,
            "stderr": stderr
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Attach to a container via a websocket
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)
     - parameter logs: (query) Return logs (optional, default to false)
     - parameter stream: (query) Return stream (optional, default to false)
     - parameter stdin: (query) Attach to &#x60;stdin&#x60; (optional, default to false)
     - parameter stdout: (query) Attach to &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Attach to &#x60;stderr&#x60; (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerAttachWebsocket(id id: String, detachKeys: String? = nil, logs: Bool? = nil, stream: Bool? = nil, stdin: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerAttachWebsocketWithRequestBuilder(id: id, detachKeys: detachKeys, logs: logs, stream: stream, stdin: stdin, stdout: stdout, stderr: stderr).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach to a container via a websocket
     - GET /containers/{id}/attach/ws
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)
     - parameter logs: (query) Return logs (optional, default to false)
     - parameter stream: (query) Return stream (optional, default to false)
     - parameter stdin: (query) Attach to &#x60;stdin&#x60; (optional, default to false)
     - parameter stdout: (query) Attach to &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Attach to &#x60;stderr&#x60; (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    public class func containerAttachWebsocketWithRequestBuilder(id id: String, detachKeys: String? = nil, logs: Bool? = nil, stream: Bool? = nil, stdin: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/attach/ws"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "detachKeys": detachKeys,
            "logs": logs,
            "stream": stream,
            "stdin": stdin,
            "stdout": stdout,
            "stderr": stderr
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get changes on a container’s filesystem
     
     - parameter id: (path) ID or name of the container 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerChanges(id id: String, completion: ((data: [ContainerChangeResponseItem]?, error: ErrorType?) -> Void)) {
        containerChangesWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get changes on a container’s filesystem
     - GET /containers/{id}/changes
     - Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
     - examples: [{example=[ {
  "Path" : "/dev",
  "Kind" : 0
}, {
  "Path" : "/dev/kmsg",
  "Kind" : 1
}, {
  "Path" : "/test",
  "Kind" : 1
} ], contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 

     - returns: RequestBuilder<[ContainerChangeResponseItem]> 
     */
    public class func containerChangesWithRequestBuilder(id id: String) -> RequestBuilder<[ContainerChangeResponseItem]> {
        var path = "/containers/{id}/changes"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ContainerChangeResponseItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a container
     
     - parameter body: (body) Container to create 
     - parameter name: (query) Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerCreate(body body: , name: String? = nil, completion: ((data: ContainerCreateResponse?, error: ErrorType?) -> Void)) {
        containerCreateWithRequestBuilder(body: body, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a container
     - POST /containers/create
     - examples: [{example={
  "Id" : "e90e34656806",
  "Warnings" : [ ]
}, contentType=application/json}]
     
     - parameter body: (body) Container to create 
     - parameter name: (query) Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)

     - returns: RequestBuilder<ContainerCreateResponse> 
     */
    public class func containerCreateWithRequestBuilder(body body: , name: String? = nil) -> RequestBuilder<ContainerCreateResponse> {
        let path = "/containers/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove a container
     
     - parameter id: (path) ID or name of the container 
     - parameter v: (query) Remove the volumes associated with the container. (optional, default to false)
     - parameter force: (query) If the container is running, kill it before removing it. (optional, default to false)
     - parameter link: (query) Remove the specified link associated with the container. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerDelete(id id: String, v: Bool? = nil, force: Bool? = nil, link: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerDeleteWithRequestBuilder(id: id, v: v, force: force, link: link).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove a container
     - DELETE /containers/{id}
     
     - parameter id: (path) ID or name of the container 
     - parameter v: (query) Remove the volumes associated with the container. (optional, default to false)
     - parameter force: (query) If the container is running, kill it before removing it. (optional, default to false)
     - parameter link: (query) Remove the specified link associated with the container. (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    public class func containerDeleteWithRequestBuilder(id id: String, v: Bool? = nil, force: Bool? = nil, link: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "v": v,
            "force": force,
            "link": link
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Export a container
     
     - parameter id: (path) ID or name of the container 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerExport(id id: String, completion: ((error: ErrorType?) -> Void)) {
        containerExportWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Export a container
     - GET /containers/{id}/export
     - Export the contents of a container as a tarball.
     
     - parameter id: (path) ID or name of the container 

     - returns: RequestBuilder<Void> 
     */
    public class func containerExportWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/export"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Inspect a container
     
     - parameter id: (path) ID or name of the container 
     - parameter size: (query) Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerInspect(id id: String, size: Bool? = nil, completion: ((data: ContainerInspectResponse?, error: ErrorType?) -> Void)) {
        containerInspectWithRequestBuilder(id: id, size: size).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect a container
     - GET /containers/{id}/json
     - Return low-level information about a container.
     - examples: [{example={
  "AppArmorProfile" : "",
  "Args" : [ "-c", "exit 9" ],
  "Config" : {
    "AttachStderr" : true,
    "AttachStdin" : false,
    "AttachStdout" : true,
    "Cmd" : [ "/bin/sh", "-c", "exit 9" ],
    "Domainname" : "",
    "Env" : [ "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" ],
    "Hostname" : "ba033ac44011",
    "Image" : "ubuntu",
    "Labels" : {
      "com.example.vendor" : "Acme",
      "com.example.license" : "GPL",
      "com.example.version" : "1.0"
    },
    "MacAddress" : "",
    "NetworkDisabled" : false,
    "OpenStdin" : false,
    "StdinOnce" : false,
    "Tty" : false,
    "User" : "",
    "Volumes" : {
      "/volumes/data" : { }
    },
    "WorkingDir" : "",
    "StopSignal" : "SIGTERM",
    "StopTimeout" : 10
  },
  "Created" : "2015-01-06T15:47:31.485331387Z",
  "Driver" : "devicemapper",
  "HostConfig" : {
    "MaximumIOps" : 0,
    "MaximumIOBps" : 0,
    "BlkioWeight" : 0,
    "BlkioWeightDevice" : [ { } ],
    "BlkioDeviceReadBps" : [ { } ],
    "BlkioDeviceWriteBps" : [ { } ],
    "BlkioDeviceReadIOps" : [ { } ],
    "BlkioDeviceWriteIOps" : [ { } ],
    "ContainerIDFile" : "",
    "CpusetCpus" : "",
    "CpusetMems" : "",
    "CpuPercent" : 80,
    "CpuShares" : 0,
    "CpuPeriod" : 100000,
    "CpuRealtimePeriod" : 1000000,
    "CpuRealtimeRuntime" : 10000,
    "Devices" : [ ],
    "IpcMode" : "",
    "LxcConf" : [ ],
    "Memory" : 0,
    "MemorySwap" : 0,
    "MemoryReservation" : 0,
    "KernelMemory" : 0,
    "OomKillDisable" : false,
    "OomScoreAdj" : 500,
    "NetworkMode" : "bridge",
    "PidMode" : "",
    "PortBindings" : { },
    "Privileged" : false,
    "ReadonlyRootfs" : false,
    "PublishAllPorts" : false,
    "RestartPolicy" : {
      "MaximumRetryCount" : 2,
      "Name" : "on-failure"
    },
    "LogConfig" : {
      "Type" : "json-file"
    },
    "Sysctls" : {
      "net.ipv4.ip_forward" : "1"
    },
    "Ulimits" : [ { } ],
    "VolumeDriver" : "",
    "ShmSize" : 67108864
  },
  "HostnamePath" : "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname",
  "HostsPath" : "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts",
  "LogPath" : "/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log",
  "Id" : "ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39",
  "Image" : "04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2",
  "MountLabel" : "",
  "Name" : "/boring_euclid",
  "NetworkSettings" : {
    "Bridge" : "",
    "SandboxID" : "",
    "HairpinMode" : false,
    "LinkLocalIPv6Address" : "",
    "LinkLocalIPv6PrefixLen" : 0,
    "SandboxKey" : "",
    "EndpointID" : "",
    "Gateway" : "",
    "GlobalIPv6Address" : "",
    "GlobalIPv6PrefixLen" : 0,
    "IPAddress" : "",
    "IPPrefixLen" : 0,
    "IPv6Gateway" : "",
    "MacAddress" : "",
    "Networks" : {
      "bridge" : {
        "NetworkID" : "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID" : "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d",
        "Gateway" : "172.17.0.1",
        "IPAddress" : "172.17.0.2",
        "IPPrefixLen" : 16,
        "IPv6Gateway" : "",
        "GlobalIPv6Address" : "",
        "GlobalIPv6PrefixLen" : 0,
        "MacAddress" : "02:42:ac:12:00:02"
      }
    }
  },
  "Path" : "/bin/sh",
  "ProcessLabel" : "",
  "ResolvConfPath" : "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf",
  "RestartCount" : 1,
  "State" : {
    "Error" : "",
    "ExitCode" : 9,
    "FinishedAt" : "2015-01-06T15:47:32.080254511Z",
    "OOMKilled" : false,
    "Dead" : false,
    "Paused" : false,
    "Pid" : 0,
    "Restarting" : false,
    "Running" : true,
    "StartedAt" : "2015-01-06T15:47:32.072697474Z",
    "Status" : "running"
  },
  "Mounts" : [ {
    "Name" : "fac362...80535",
    "Source" : "/data",
    "Destination" : "/data",
    "Driver" : "local",
    "Mode" : "ro,Z",
    "RW" : false,
    "Propagation" : ""
  } ]
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter size: (query) Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)

     - returns: RequestBuilder<ContainerInspectResponse> 
     */
    public class func containerInspectWithRequestBuilder(id id: String, size: Bool? = nil) -> RequestBuilder<ContainerInspectResponse> {
        var path = "/containers/{id}/json"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerInspectResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Kill a container
     
     - parameter id: (path) ID or name of the container 
     - parameter signal: (query) Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerKill(id id: String, signal: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerKillWithRequestBuilder(id: id, signal: signal).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Kill a container
     - POST /containers/{id}/kill
     - Send a POSIX signal to a container, defaulting to killing to the container.
     
     - parameter id: (path) ID or name of the container 
     - parameter signal: (query) Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)

     - returns: RequestBuilder<Void> 
     */
    public class func containerKillWithRequestBuilder(id id: String, signal: String? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/kill"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "signal": signal
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List containers
     
     - parameter all: (query) Return all containers. By default, only running containers are shown (optional, default to false)
     - parameter limit: (query) Return this number of most recently created containers, including non-running ones. (optional)
     - parameter size: (query) Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)
     - parameter filters: (query) Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerList(all all: Bool? = nil, limit: Int32? = nil, size: Bool? = nil, filters: String? = nil, completion: ((data: ContainerSummary?, error: ErrorType?) -> Void)) {
        containerListWithRequestBuilder(all: all, limit: limit, size: size, filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List containers
     - GET /containers/json
     - Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     - examples: [{example=[ {
  "Id" : "8dfafdbc3a40",
  "Names" : [ "/boring_feynman" ],
  "Image" : "ubuntu:latest",
  "ImageID" : "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
  "Command" : "echo 1",
  "Created" : 1367854155,
  "State" : "Exited",
  "Status" : "Exit 0",
  "Ports" : [ {
    "PrivatePort" : 2222,
    "PublicPort" : 3333,
    "Type" : "tcp"
  } ],
  "Labels" : {
    "com.example.vendor" : "Acme",
    "com.example.license" : "GPL",
    "com.example.version" : "1.0"
  },
  "SizeRw" : 12288,
  "SizeRootFs" : 0,
  "HostConfig" : {
    "NetworkMode" : "default"
  },
  "NetworkSettings" : {
    "Networks" : {
      "bridge" : {
        "NetworkID" : "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID" : "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f",
        "Gateway" : "172.17.0.1",
        "IPAddress" : "172.17.0.2",
        "IPPrefixLen" : 16,
        "IPv6Gateway" : "",
        "GlobalIPv6Address" : "",
        "GlobalIPv6PrefixLen" : 0,
        "MacAddress" : "02:42:ac:11:00:02"
      }
    }
  },
  "Mounts" : [ {
    "Name" : "fac362...80535",
    "Source" : "/data",
    "Destination" : "/data",
    "Driver" : "local",
    "Mode" : "ro,Z",
    "RW" : false,
    "Propagation" : ""
  } ]
}, {
  "Id" : "9cd87474be90",
  "Names" : [ "/coolName" ],
  "Image" : "ubuntu:latest",
  "ImageID" : "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
  "Command" : "echo 222222",
  "Created" : 1367854155,
  "State" : "Exited",
  "Status" : "Exit 0",
  "Ports" : [ ],
  "Labels" : { },
  "SizeRw" : 12288,
  "SizeRootFs" : 0,
  "HostConfig" : {
    "NetworkMode" : "default"
  },
  "NetworkSettings" : {
    "Networks" : {
      "bridge" : {
        "NetworkID" : "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID" : "88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a",
        "Gateway" : "172.17.0.1",
        "IPAddress" : "172.17.0.8",
        "IPPrefixLen" : 16,
        "IPv6Gateway" : "",
        "GlobalIPv6Address" : "",
        "GlobalIPv6PrefixLen" : 0,
        "MacAddress" : "02:42:ac:11:00:08"
      }
    }
  },
  "Mounts" : [ ]
}, {
  "Id" : "3176a2479c92",
  "Names" : [ "/sleepy_dog" ],
  "Image" : "ubuntu:latest",
  "ImageID" : "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
  "Command" : "echo 3333333333333333",
  "Created" : 1367854154,
  "State" : "Exited",
  "Status" : "Exit 0",
  "Ports" : [ ],
  "Labels" : { },
  "SizeRw" : 12288,
  "SizeRootFs" : 0,
  "HostConfig" : {
    "NetworkMode" : "default"
  },
  "NetworkSettings" : {
    "Networks" : {
      "bridge" : {
        "NetworkID" : "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID" : "8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d",
        "Gateway" : "172.17.0.1",
        "IPAddress" : "172.17.0.6",
        "IPPrefixLen" : 16,
        "IPv6Gateway" : "",
        "GlobalIPv6Address" : "",
        "GlobalIPv6PrefixLen" : 0,
        "MacAddress" : "02:42:ac:11:00:06"
      }
    }
  },
  "Mounts" : [ ]
}, {
  "Id" : "4cb07b47f9fb",
  "Names" : [ "/running_cat" ],
  "Image" : "ubuntu:latest",
  "ImageID" : "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
  "Command" : "echo 444444444444444444444444444444444",
  "Created" : 1367854152,
  "State" : "Exited",
  "Status" : "Exit 0",
  "Ports" : [ ],
  "Labels" : { },
  "SizeRw" : 12288,
  "SizeRootFs" : 0,
  "HostConfig" : {
    "NetworkMode" : "default"
  },
  "NetworkSettings" : {
    "Networks" : {
      "bridge" : {
        "NetworkID" : "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID" : "d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9",
        "Gateway" : "172.17.0.1",
        "IPAddress" : "172.17.0.5",
        "IPPrefixLen" : 16,
        "IPv6Gateway" : "",
        "GlobalIPv6Address" : "",
        "GlobalIPv6PrefixLen" : 0,
        "MacAddress" : "02:42:ac:11:00:05"
      }
    }
  },
  "Mounts" : [ ]
} ], contentType=application/json}]
     
     - parameter all: (query) Return all containers. By default, only running containers are shown (optional, default to false)
     - parameter limit: (query) Return this number of most recently created containers, including non-running ones. (optional)
     - parameter size: (query) Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)
     - parameter filters: (query) Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)

     - returns: RequestBuilder<ContainerSummary> 
     */
    public class func containerListWithRequestBuilder(all all: Bool? = nil, limit: Int32? = nil, size: Bool? = nil, filters: String? = nil) -> RequestBuilder<ContainerSummary> {
        let path = "/containers/json"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "all": all,
            "limit": limit?.encodeToJSON(),
            "size": size,
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get container logs
     
     - parameter id: (path) ID or name of the container 
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter until: (query) Only return logs before this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerLogs(id id: String, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, until: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        containerLogsWithRequestBuilder(id: id, follow: follow, stdout: stdout, stderr: stderr, since: since, until: until, timestamps: timestamps, tail: tail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get container logs
     - GET /containers/{id}/logs
     - Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     - examples: [{example="", contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter until: (query) Only return logs before this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)

     - returns: RequestBuilder<String> 
     */
    public class func containerLogsWithRequestBuilder(id id: String, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, until: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil) -> RequestBuilder<String> {
        var path = "/containers/{id}/logs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "follow": follow,
            "stdout": stdout,
            "stderr": stderr,
            "since": since?.encodeToJSON(),
            "until": until?.encodeToJSON(),
            "timestamps": timestamps,
            "tail": tail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Pause a container
     
     - parameter id: (path) ID or name of the container 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerPause(id id: String, completion: ((error: ErrorType?) -> Void)) {
        containerPauseWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Pause a container
     - POST /containers/{id}/pause
     - Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     
     - parameter id: (path) ID or name of the container 

     - returns: RequestBuilder<Void> 
     */
    public class func containerPauseWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/pause"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete stopped containers
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerPrune(filters filters: String? = nil, completion: ((data: ContainerPruneResponse?, error: ErrorType?) -> Void)) {
        containerPruneWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete stopped containers
     - POST /containers/prune
     - examples: [{example={
  "SpaceReclaimed" : 0,
  "ContainersDeleted" : [ "ContainersDeleted", "ContainersDeleted" ]
}, contentType=application/json}]
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)

     - returns: RequestBuilder<ContainerPruneResponse> 
     */
    public class func containerPruneWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<ContainerPruneResponse> {
        let path = "/containers/prune"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerPruneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Rename a container
     
     - parameter id: (path) ID or name of the container 
     - parameter name: (query) New name for the container 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerRename(id id: String, name: String, completion: ((error: ErrorType?) -> Void)) {
        containerRenameWithRequestBuilder(id: id, name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Rename a container
     - POST /containers/{id}/rename
     
     - parameter id: (path) ID or name of the container 
     - parameter name: (query) New name for the container 

     - returns: RequestBuilder<Void> 
     */
    public class func containerRenameWithRequestBuilder(id id: String, name: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/rename"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Resize a container TTY
     
     - parameter id: (path) ID or name of the container 
     - parameter h: (query) Height of the tty session in characters (optional)
     - parameter w: (query) Width of the tty session in characters (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerResize(id id: String, h: Int32? = nil, w: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerResizeWithRequestBuilder(id: id, h: h, w: w).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Resize a container TTY
     - POST /containers/{id}/resize
     - Resize the TTY for a container. You must restart the container for the resize to take effect.
     
     - parameter id: (path) ID or name of the container 
     - parameter h: (query) Height of the tty session in characters (optional)
     - parameter w: (query) Width of the tty session in characters (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func containerResizeWithRequestBuilder(id id: String, h: Int32? = nil, w: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/resize"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "h": h?.encodeToJSON(),
            "w": w?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Restart a container
     
     - parameter id: (path) ID or name of the container 
     - parameter t: (query) Number of seconds to wait before killing the container (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerRestart(id id: String, t: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerRestartWithRequestBuilder(id: id, t: t).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Restart a container
     - POST /containers/{id}/restart
     
     - parameter id: (path) ID or name of the container 
     - parameter t: (query) Number of seconds to wait before killing the container (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func containerRestartWithRequestBuilder(id id: String, t: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/restart"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "t": t?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Start a container
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerStart(id id: String, detachKeys: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerStartWithRequestBuilder(id: id, detachKeys: detachKeys).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Start a container
     - POST /containers/{id}/start
     
     - parameter id: (path) ID or name of the container 
     - parameter detachKeys: (query) Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func containerStartWithRequestBuilder(id id: String, detachKeys: String? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/start"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "detachKeys": detachKeys
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get container stats based on resource usage
     
     - parameter id: (path) ID or name of the container 
     - parameter stream: (query) Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerStats(id id: String, stream: Bool? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        containerStatsWithRequestBuilder(id: id, stream: stream).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get container stats based on resource usage
     - GET /containers/{id}/stats
     - This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of last read, which is used for calculating the CPU usage percentage. It is not the same as the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used. 
     - examples: [{example={
  "read" : "2015-01-08T22:57:31.547920715Z",
  "pids_stats" : {
    "current" : 3
  },
  "networks" : {
    "eth0" : {
      "rx_bytes" : 5338,
      "rx_dropped" : 0,
      "rx_errors" : 0,
      "rx_packets" : 36,
      "tx_bytes" : 648,
      "tx_dropped" : 0,
      "tx_errors" : 0,
      "tx_packets" : 8
    },
    "eth5" : {
      "rx_bytes" : 4641,
      "rx_dropped" : 0,
      "rx_errors" : 0,
      "rx_packets" : 26,
      "tx_bytes" : 690,
      "tx_dropped" : 0,
      "tx_errors" : 0,
      "tx_packets" : 9
    }
  },
  "memory_stats" : {
    "stats" : {
      "total_pgmajfault" : 0,
      "cache" : 0,
      "mapped_file" : 0,
      "total_inactive_file" : 0,
      "pgpgout" : 414,
      "rss" : 6537216,
      "total_mapped_file" : 0,
      "writeback" : 0,
      "unevictable" : 0,
      "pgpgin" : 477,
      "total_unevictable" : 0,
      "pgmajfault" : 0,
      "total_rss" : 6537216,
      "total_rss_huge" : 6291456,
      "total_writeback" : 0,
      "total_inactive_anon" : 0,
      "rss_huge" : 6291456,
      "hierarchical_memory_limit" : 67108864,
      "total_pgfault" : 964,
      "total_active_file" : 0,
      "active_anon" : 6537216,
      "total_active_anon" : 6537216,
      "total_pgpgout" : 414,
      "total_cache" : 0,
      "inactive_anon" : 0,
      "active_file" : 0,
      "pgfault" : 964,
      "inactive_file" : 0,
      "total_pgpgin" : 477
    },
    "max_usage" : 6651904,
    "usage" : 6537216,
    "failcnt" : 0,
    "limit" : 67108864
  },
  "blkio_stats" : { },
  "cpu_stats" : {
    "cpu_usage" : {
      "percpu_usage" : [ 8646879, 24472255, 36438778, 30657443 ],
      "usage_in_usermode" : 50000000,
      "total_usage" : 100215355,
      "usage_in_kernelmode" : 30000000
    },
    "system_cpu_usage" : 739306590000000,
    "online_cpus" : 4,
    "throttling_data" : {
      "periods" : 0,
      "throttled_periods" : 0,
      "throttled_time" : 0
    }
  },
  "precpu_stats" : {
    "cpu_usage" : {
      "percpu_usage" : [ 8646879, 24350896, 36438778, 30657443 ],
      "usage_in_usermode" : 50000000,
      "total_usage" : 100093996,
      "usage_in_kernelmode" : 30000000
    },
    "system_cpu_usage" : 9492140000000,
    "online_cpus" : 4,
    "throttling_data" : {
      "periods" : 0,
      "throttled_periods" : 0,
      "throttled_time" : 0
    }
  }
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter stream: (query) Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func containerStatsWithRequestBuilder(id id: String, stream: Bool? = nil) -> RequestBuilder<AnyObject> {
        var path = "/containers/{id}/stats"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "stream": stream
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Stop a container
     
     - parameter id: (path) ID or name of the container 
     - parameter t: (query) Number of seconds to wait before killing the container (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerStop(id id: String, t: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        containerStopWithRequestBuilder(id: id, t: t).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Stop a container
     - POST /containers/{id}/stop
     
     - parameter id: (path) ID or name of the container 
     - parameter t: (query) Number of seconds to wait before killing the container (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func containerStopWithRequestBuilder(id id: String, t: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/stop"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "t": t?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List processes running inside a container
     
     - parameter id: (path) ID or name of the container 
     - parameter psArgs: (query) The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerTop(id id: String, psArgs: String? = nil, completion: ((data: ContainerTopResponse?, error: ErrorType?) -> Void)) {
        containerTopWithRequestBuilder(id: id, psArgs: psArgs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List processes running inside a container
     - GET /containers/{id}/top
     - On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows.
     - examples: [{example={
  "Titles" : [ "UID", "PID", "PPID", "C", "STIME", "TTY", "TIME", "CMD" ],
  "Processes" : [ [ "root", "13642", "882", "0", "17:03", "pts/0", "00:00:00", "/bin/bash" ], [ "root", "13735", "13642", "0", "17:06", "pts/0", "00:00:00", "sleep 10" ] ]
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter psArgs: (query) The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)

     - returns: RequestBuilder<ContainerTopResponse> 
     */
    public class func containerTopWithRequestBuilder(id id: String, psArgs: String? = nil) -> RequestBuilder<ContainerTopResponse> {
        var path = "/containers/{id}/top"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ps_args": psArgs
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerTopResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Unpause a container
     
     - parameter id: (path) ID or name of the container 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerUnpause(id id: String, completion: ((error: ErrorType?) -> Void)) {
        containerUnpauseWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Unpause a container
     - POST /containers/{id}/unpause
     - Resume a container which has been paused.
     
     - parameter id: (path) ID or name of the container 

     - returns: RequestBuilder<Void> 
     */
    public class func containerUnpauseWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/containers/{id}/unpause"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a container
     
     - parameter id: (path) ID or name of the container 
     - parameter update: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerUpdate(id id: String, update: , completion: ((data: ContainerUpdateResponse?, error: ErrorType?) -> Void)) {
        containerUpdateWithRequestBuilder(id: id, update: update).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a container
     - POST /containers/{id}/update
     - Change various configuration options of a container without having to recreate it.
     - examples: [{example={
  "Warnings" : [ "Warnings", "Warnings" ]
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter update: (body)  

     - returns: RequestBuilder<ContainerUpdateResponse> 
     */
    public class func containerUpdateWithRequestBuilder(id id: String, update: ) -> RequestBuilder<ContainerUpdateResponse> {
        var path = "/containers/{id}/update"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = update.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerUpdateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Wait for a container
     
     - parameter id: (path) ID or name of the container 
     - parameter condition: (query) Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func containerWait(id id: String, condition: String? = nil, completion: ((data: ContainerWaitResponse?, error: ErrorType?) -> Void)) {
        containerWaitWithRequestBuilder(id: id, condition: condition).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Wait for a container
     - POST /containers/{id}/wait
     - Block until a container stops, then returns the exit code.
     - examples: [{example={
  "StatusCode" : 0,
  "Error" : {
    "Message" : "Message"
  }
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of the container 
     - parameter condition: (query) Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)

     - returns: RequestBuilder<ContainerWaitResponse> 
     */
    public class func containerWaitWithRequestBuilder(id id: String, condition: String? = nil) -> RequestBuilder<ContainerWaitResponse> {
        var path = "/containers/{id}/wait"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "condition": condition
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContainerWaitResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Extract an archive of files or folders to a directory in a container
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Path to a directory in the container to extract the archive’s contents into.  
     - parameter inputStream: (body) The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. 
     - parameter noOverwriteDirNonDir: (query) If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putContainerArchive(id id: String, path: String, inputStream: String, noOverwriteDirNonDir: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        putContainerArchiveWithRequestBuilder(id: id, path: path, inputStream: inputStream, noOverwriteDirNonDir: noOverwriteDirNonDir).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Extract an archive of files or folders to a directory in a container
     - PUT /containers/{id}/archive
     - Upload a tar archive to be extracted to a path in the filesystem of container id.
     
     - parameter id: (path) ID or name of the container 
     - parameter path: (query) Path to a directory in the container to extract the archive’s contents into.  
     - parameter inputStream: (body) The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. 
     - parameter noOverwriteDirNonDir: (query) If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putContainerArchiveWithRequestBuilder(id id: String, path: String, inputStream: String, noOverwriteDirNonDir: String? = nil) -> RequestBuilder<Void> {
        var path = "/containers/{id}/archive"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inputStream.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
