//
// ServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ServiceAPI: APIBase {
    /**
     Create a service
     
     - parameter body: (body)  
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceCreate(body body: , xRegistryAuth: String? = nil, completion: ((data: ServiceCreateResponse?, error: ErrorType?) -> Void)) {
        serviceCreateWithRequestBuilder(body: body, xRegistryAuth: xRegistryAuth).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a service
     - POST /services/create
     - examples: [{example="{\"ID\":\"ak7w3gjqoa3kuz8xcpnyy0pvl\",\"Warning\":\"unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found\"}", contentType=application/json}]
     
     - parameter body: (body)  
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) (optional)

     - returns: RequestBuilder<ServiceCreateResponse> 
     */
    public class func serviceCreateWithRequestBuilder(body body: , xRegistryAuth: String? = nil) -> RequestBuilder<ServiceCreateResponse> {
        let path = "/services/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<ServiceCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Delete a service
     
     - parameter id: (path) ID or name of service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceDelete(id id: String, completion: ((error: ErrorType?) -> Void)) {
        serviceDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a service
     - DELETE /services/{id}
     
     - parameter id: (path) ID or name of service. 

     - returns: RequestBuilder<Void> 
     */
    public class func serviceDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/services/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Inspect a service
     
     - parameter id: (path) ID or name of service. 
     - parameter insertDefaults: (query) Fill empty fields with default values. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceInspect(id id: String, insertDefaults: Bool? = nil, completion: ((data: Service?, error: ErrorType?) -> Void)) {
        serviceInspectWithRequestBuilder(id: id, insertDefaults: insertDefaults).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect a service
     - GET /services/{id}
     - examples: [{example={
  "ID" : "9mnpnzenvg8p8tdbtq4wvbkcz",
  "Version" : {
    "Index" : 19
  },
  "CreatedAt" : "2016-06-07T21:05:51.880065305Z",
  "UpdatedAt" : "2016-06-07T21:07:29.962229872Z",
  "Spec" : {
    "Name" : "hopeful_cori",
    "TaskTemplate" : {
      "ContainerSpec" : {
        "Image" : "redis"
      },
      "Resources" : {
        "Limits" : { },
        "Reservations" : { }
      },
      "RestartPolicy" : {
        "Condition" : "any",
        "MaxAttempts" : 0
      },
      "Placement" : { },
      "ForceUpdate" : 0
    },
    "Mode" : {
      "Replicated" : {
        "Replicas" : 1
      }
    },
    "UpdateConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "RollbackConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "EndpointSpec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    }
  },
  "Endpoint" : {
    "Spec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    },
    "Ports" : [ {
      "Protocol" : "tcp",
      "TargetPort" : 6379,
      "PublishedPort" : 30001
    } ],
    "VirtualIPs" : [ {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.2/16"
    }, {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.3/16"
    } ]
  }
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of service. 
     - parameter insertDefaults: (query) Fill empty fields with default values. (optional, default to false)

     - returns: RequestBuilder<Service> 
     */
    public class func serviceInspectWithRequestBuilder(id id: String, insertDefaults: Bool? = nil) -> RequestBuilder<Service> {
        var path = "/services/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "insertDefaults": insertDefaults
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Service>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List services
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list. Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceList(filters filters: String? = nil, completion: ((data: [Service]?, error: ErrorType?) -> Void)) {
        serviceListWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List services
     - GET /services
     - examples: [{example=[ {
  "ID" : "9mnpnzenvg8p8tdbtq4wvbkcz",
  "Version" : {
    "Index" : 19
  },
  "CreatedAt" : "2016-06-07T21:05:51.880065305Z",
  "UpdatedAt" : "2016-06-07T21:07:29.962229872Z",
  "Spec" : {
    "Name" : "hopeful_cori",
    "TaskTemplate" : {
      "ContainerSpec" : {
        "Image" : "redis"
      },
      "Resources" : {
        "Limits" : { },
        "Reservations" : { }
      },
      "RestartPolicy" : {
        "Condition" : "any",
        "MaxAttempts" : 0
      },
      "Placement" : { },
      "ForceUpdate" : 0
    },
    "Mode" : {
      "Replicated" : {
        "Replicas" : 1
      }
    },
    "UpdateConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "RollbackConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "EndpointSpec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    }
  },
  "Endpoint" : {
    "Spec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    },
    "Ports" : [ {
      "Protocol" : "tcp",
      "TargetPort" : 6379,
      "PublishedPort" : 30001
    } ],
    "VirtualIPs" : [ {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.2/16"
    }, {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.3/16"
    } ]
  }
}, {
  "ID" : "9mnpnzenvg8p8tdbtq4wvbkcz",
  "Version" : {
    "Index" : 19
  },
  "CreatedAt" : "2016-06-07T21:05:51.880065305Z",
  "UpdatedAt" : "2016-06-07T21:07:29.962229872Z",
  "Spec" : {
    "Name" : "hopeful_cori",
    "TaskTemplate" : {
      "ContainerSpec" : {
        "Image" : "redis"
      },
      "Resources" : {
        "Limits" : { },
        "Reservations" : { }
      },
      "RestartPolicy" : {
        "Condition" : "any",
        "MaxAttempts" : 0
      },
      "Placement" : { },
      "ForceUpdate" : 0
    },
    "Mode" : {
      "Replicated" : {
        "Replicas" : 1
      }
    },
    "UpdateConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "RollbackConfig" : {
      "Parallelism" : 1,
      "Delay" : 1000000000,
      "FailureAction" : "pause",
      "Monitor" : 15000000000,
      "MaxFailureRatio" : 0.15
    },
    "EndpointSpec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    }
  },
  "Endpoint" : {
    "Spec" : {
      "Mode" : "vip",
      "Ports" : [ {
        "Protocol" : "tcp",
        "TargetPort" : 6379,
        "PublishedPort" : 30001
      } ]
    },
    "Ports" : [ {
      "Protocol" : "tcp",
      "TargetPort" : 6379,
      "PublishedPort" : 30001
    } ],
    "VirtualIPs" : [ {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.2/16"
    }, {
      "NetworkID" : "4qvuz4ko70xaltuqbt8956gd1",
      "Addr" : "10.255.0.3/16"
    } ]
  }
} ], contentType=application/json}]
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list. Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60;  (optional)

     - returns: RequestBuilder<[Service]> 
     */
    public class func serviceListWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<[Service]> {
        let path = "/services"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Service]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get service logs
     
     - parameter id: (path) ID or name of the service 
     - parameter details: (query) Show service context and extra details provided to logs. (optional, default to false)
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceLogs(id id: String, details: Bool? = nil, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        serviceLogsWithRequestBuilder(id: id, details: details, follow: follow, stdout: stdout, stderr: stderr, since: since, timestamps: timestamps, tail: tail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get service logs
     - GET /services/{id}/logs
     - Get `stdout` and `stderr` logs from a service.  **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers. 
     - examples: [{example="", contentType=application/json}]
     
     - parameter id: (path) ID or name of the service 
     - parameter details: (query) Show service context and extra details provided to logs. (optional, default to false)
     - parameter follow: (query) Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)
     - parameter stdout: (query) Return logs from &#x60;stdout&#x60; (optional, default to false)
     - parameter stderr: (query) Return logs from &#x60;stderr&#x60; (optional, default to false)
     - parameter since: (query) Only return logs since this time, as a UNIX timestamp (optional, default to 0)
     - parameter timestamps: (query) Add timestamps to every log line (optional, default to false)
     - parameter tail: (query) Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)

     - returns: RequestBuilder<String> 
     */
    public class func serviceLogsWithRequestBuilder(id id: String, details: Bool? = nil, follow: Bool? = nil, stdout: Bool? = nil, stderr: Bool? = nil, since: Int32? = nil, timestamps: Bool? = nil, tail: String? = nil) -> RequestBuilder<String> {
        var path = "/services/{id}/logs"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "details": details,
            "follow": follow,
            "stdout": stdout,
            "stderr": stderr,
            "since": since?.encodeToJSON(),
            "timestamps": timestamps,
            "tail": tail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a service
     
     - parameter id: (path) ID or name of service. 
     - parameter body: (body)  
     - parameter version: (query) The version number of the service object being updated. This is required to avoid conflicting writes. 
     - parameter registryAuthFrom: (query) If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are &#x60;spec&#x60; and &#x60;previous-spec&#x60;. (optional, default to spec)
     - parameter rollback: (query) Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func serviceUpdate(id id: String, body: , version: Int32, registryAuthFrom: String? = nil, rollback: String? = nil, xRegistryAuth: String? = nil, completion: ((data: ServiceUpdateResponse?, error: ErrorType?) -> Void)) {
        serviceUpdateWithRequestBuilder(id: id, body: body, version: version, registryAuthFrom: registryAuthFrom, rollback: rollback, xRegistryAuth: xRegistryAuth).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a service
     - POST /services/{id}/update
     - examples: [{example={
  "Warning" : "unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found"
}, contentType=application/json}]
     
     - parameter id: (path) ID or name of service. 
     - parameter body: (body)  
     - parameter version: (query) The version number of the service object being updated. This is required to avoid conflicting writes. 
     - parameter registryAuthFrom: (query) If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are &#x60;spec&#x60; and &#x60;previous-spec&#x60;. (optional, default to spec)
     - parameter rollback: (query) Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) (optional)

     - returns: RequestBuilder<ServiceUpdateResponse> 
     */
    public class func serviceUpdateWithRequestBuilder(id id: String, body: , version: Int32, registryAuthFrom: String? = nil, rollback: String? = nil, xRegistryAuth: String? = nil) -> RequestBuilder<ServiceUpdateResponse> {
        var path = "/services/{id}/update"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<ServiceUpdateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

}
