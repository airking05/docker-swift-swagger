//
// SystemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SystemAPI: APIBase {
    /**
     Check auth configuration
     
     - parameter authConfig: (body) Authentication to check (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemAuth(authConfig authConfig: AuthConfig? = nil, completion: ((data: SystemAuthResponse?, error: ErrorType?) -> Void)) {
        systemAuthWithRequestBuilder(authConfig: authConfig).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check auth configuration
     - POST /auth
     - Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.
     - examples: [{example={
  "Status" : "Login Succeeded",
  "IdentityToken" : "9cbaf023786cd7..."
}, contentType=application/json}]
     
     - parameter authConfig: (body) Authentication to check (optional)

     - returns: RequestBuilder<SystemAuthResponse> 
     */
    public class func systemAuthWithRequestBuilder(authConfig authConfig: AuthConfig? = nil) -> RequestBuilder<SystemAuthResponse> {
        let path = "/auth"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = authConfig?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SystemAuthResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get data usage information
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemDataUsage(completion: ((data: SystemDataUsageResponse?, error: ErrorType?) -> Void)) {
        systemDataUsageWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get data usage information
     - GET /system/df
     - examples: [{example="{\"LayersSize\":1092588,\"Images\":[{\"Id\":\"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\",\"ParentId\":\"\",\"RepoTags\":[\"busybox:latest\"],\"RepoDigests\":[\"busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\"],\"Created\":1466724217,\"Size\":1092588,\"SharedSize\":0,\"VirtualSize\":1092588,\"Labels\":{},\"Containers\":1}],\"Containers\":[{\"Id\":\"e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148\",\"Names\":[\"/top\"],\"Image\":\"busybox\",\"ImageID\":\"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\",\"Command\":\"top\",\"Created\":1472592424,\"Ports\":[],\"SizeRootFs\":1092588,\"Labels\":{},\"State\":\"exited\",\"Status\":\"Exited (0) 56 minutes ago\",\"HostConfig\":{\"NetworkMode\":\"default\"},\"NetworkSettings\":{\"Networks\":{\"bridge\":{\"NetworkID\":\"d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92\",\"EndpointID\":\"8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a\",\"Gateway\":\"172.18.0.1\",\"IPAddress\":\"172.18.0.2\",\"IPPrefixLen\":16,\"IPv6Gateway\":\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"02:42:ac:12:00:02\"}}},\"Mounts\":[]}],\"Volumes\":[{\"Name\":\"my-volume\",\"Driver\":\"local\",\"Mountpoint\":\"/var/lib/docker/volumes/my-volume/_data\",\"Scope\":\"local\",\"UsageData\":{\"Size\":10920104,\"RefCount\":2}}]}", contentType=application/json}]

     - returns: RequestBuilder<SystemDataUsageResponse> 
     */
    public class func systemDataUsageWithRequestBuilder() -> RequestBuilder<SystemDataUsageResponse> {
        let path = "/system/df"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SystemDataUsageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Monitor events
     
     - parameter since: (query) Show events created since this timestamp then stream new events. (optional)
     - parameter until: (query) Show events created until this timestamp then stop streaming. (optional)
     - parameter filters: (query) A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemEvents(since since: String? = nil, until: String? = nil, filters: String? = nil, completion: ((data: SystemEventsResponse?, error: ErrorType?) -> Void)) {
        systemEventsWithRequestBuilder(since: since, until: until, filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Monitor events
     - GET /events
     - Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`  Volumes report these events: `create`, `mount`, `unmount`, and `destroy`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove` 
     - examples: [{example={
  "Type" : "container",
  "Action" : "create",
  "Actor" : {
    "ID" : "ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743",
    "Attributes" : {
      "com.example.some-label" : "some-label-value",
      "image" : "alpine",
      "name" : "my-container"
    }
  },
  "time" : 1461943101
}, contentType=application/json}]
     
     - parameter since: (query) Show events created since this timestamp then stream new events. (optional)
     - parameter until: (query) Show events created until this timestamp then stop streaming. (optional)
     - parameter filters: (query) A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name  (optional)

     - returns: RequestBuilder<SystemEventsResponse> 
     */
    public class func systemEventsWithRequestBuilder(since since: String? = nil, until: String? = nil, filters: String? = nil) -> RequestBuilder<SystemEventsResponse> {
        let path = "/events"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "since": since,
            "until": until,
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SystemEventsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get system information
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemInfo(completion: ((data: SystemInfo?, error: ErrorType?) -> Void)) {
        systemInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get system information
     - GET /info
     - examples: [{example={
  "BridgeNfIp6tables" : true,
  "DockerRootDir" : "/var/lib/docker",
  "ClusterAdvertise" : "node5.corp.example.com:8000",
  "Runtimes" : {
    "runc" : {
      "path" : "docker-runc"
    },
    "runc-master" : {
      "path" : "/go/bin/runc"
    },
    "custom" : {
      "path" : "/usr/local/bin/my-oci-runtime",
      "runtimeArgs" : [ "--debug", "--systemd-cgroup=false" ]
    }
  },
  "Architecture" : "x86_64",
  "Images" : 508,
  "KernelMemory" : true,
  "ContainersRunning" : 3,
  "Driver" : "overlay2",
  "GenericResources" : "",
  "ExperimentalBuild" : true,
  "ID" : "7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS",
  "BridgeNfIptables" : true,
  "OperatingSystem" : "Alpine Linux v3.5",
  "ContainersPaused" : 1,
  "CPUShares" : true,
  "Swarm" : {
    "RemoteManagers" : [ {
      "NodeID" : "71izy0goik036k48jg985xnds",
      "Addr" : "10.0.0.158:2377"
    }, {
      "NodeID" : "79y6h1o4gv8n120drcprv5nmc",
      "Addr" : "10.0.0.159:2377"
    }, {
      "NodeID" : "k67qz4598weg5unwwffg6z1m1",
      "Addr" : "10.0.0.46:2377"
    } ],
    "Managers" : 3,
    "NodeID" : "k67qz4598weg5unwwffg6z1m1",
    "ControlAvailable" : true,
    "LocalNodeState" : "active",
    "Nodes" : 4,
    "Cluster" : {
      "UpdatedAt" : "2017-08-09T07:09:37.632105588Z",
      "TLSInfo" : {
        "TrustRoot" : "-----BEGIN CERTIFICATE-----\nMIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw\nEzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0\nMzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\nA0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf\n3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\nAf8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO\nPQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz\npxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H\n-----END CERTIFICATE-----\n",
        "CertIssuerSubject" : "MBMxETAPBgNVBAMTCHN3YXJtLWNh",
        "CertIssuerPublicKey" : "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A=="
      },
      "Spec" : {
        "Dispatcher" : {
          "HeartbeatPeriod" : 5000000000
        },
        "Name" : "default",
        "Orchestration" : {
          "TaskHistoryRetentionLimit" : 10
        },
        "Labels" : {
          "com.example.corp.type" : "production",
          "com.example.corp.department" : "engineering"
        },
        "EncryptionConfig" : {
          "AutoLockManagers" : false
        },
        "CAConfig" : {
          "NodeCertExpiry" : 7776000000000000,
          "ForceRotate" : 6,
          "SigningCAKey" : "SigningCAKey",
          "ExternalCAs" : [ {
            "CACert" : "CACert",
            "Options" : {
              "key" : "Options"
            },
            "URL" : "URL",
            "Protocol" : "cfssl"
          }, {
            "CACert" : "CACert",
            "Options" : {
              "key" : "Options"
            },
            "URL" : "URL",
            "Protocol" : "cfssl"
          } ],
          "SigningCACert" : "SigningCACert"
        },
        "TaskDefaults" : {
          "LogDriver" : {
            "Name" : "json-file",
            "Options" : {
              "max-file" : "10",
              "max-size" : "100m"
            }
          }
        },
        "Raft" : {
          "KeepOldSnapshots" : 0,
          "HeartbeatTick" : 1,
          "ElectionTick" : 3,
          "LogEntriesForSlowFollowers" : 500,
          "SnapshotInterval" : 10000
        }
      },
      "ID" : "abajmipo7b4xz5ip2nrla6b11",
      "RootRotationInProgress" : false,
      "Version" : {
        "Index" : 373531
      },
      "CreatedAt" : "2016-08-18T10:44:24.496525531Z"
    },
    "Error" : "Error",
    "NodeAddr" : "10.0.0.46"
  },
  "CgroupDriver" : "cgroupfs",
  "RegistryConfig" : {
    "AllowNondistributableArtifactsHostnames" : [ "registry.internal.corp.example.com:3000", "[2001:db8:a0b:12f0::1]:443" ],
    "IndexConfigs" : {
      "127.0.0.1:5000" : {
        "Name" : "127.0.0.1:5000",
        "Mirrors" : [ ],
        "Secure" : false,
        "Official" : false
      },
      "[2001:db8:a0b:12f0::1]:80" : {
        "Name" : "[2001:db8:a0b:12f0::1]:80",
        "Mirrors" : [ ],
        "Secure" : false,
        "Official" : false
      },
      "docker.io" : {
        "Name" : "docker.io",
        "Mirrors" : [ "https://hub-mirror.corp.example.com:5000/" ],
        "Secure" : true,
        "Official" : true
      },
      "registry.internal.corp.example.com:3000" : {
        "Name" : "registry.internal.corp.example.com:3000",
        "Mirrors" : [ ],
        "Secure" : false,
        "Official" : false
      }
    },
    "InsecureRegistryCIDRs" : [ "::1/128", "127.0.0.0/8" ],
    "Mirrors" : [ "https://hub-mirror.corp.example.com:5000/", "https://[2001:db8:a0b:12f0::1]/" ],
    "AllowNondistributableArtifactsCIDRs" : [ "::1/128", "127.0.0.0/8" ]
  },
  "InitBinary" : "docker-init",
  "DefaultRuntime" : "runc",
  "Labels" : [ "storage=ssd", "production" ],
  "NEventsListener" : 30,
  "OSType" : "linux",
  "SecurityOptions" : [ "name=apparmor", "name=seccomp,profile=default", "name=selinux", "name=userns" ],
  "Plugins" : {
    "Log" : [ "awslogs", "fluentd", "gcplogs", "gelf", "journald", "json-file", "logentries", "splunk", "syslog" ],
    "Authorization" : [ "img-authz-plugin", "hbm" ],
    "Network" : [ "bridge", "host", "ipvlan", "macvlan", "null", "overlay" ],
    "Volume" : [ "local" ]
  },
  "ContainerdCommit" : {
    "ID" : "cfb82a876ecc11b5ca0977d1733adbe58599088a",
    "Expected" : "2d41c047c83e09a6d61d464906feb2a2f3c52aa4"
  },
  "ClusterStore" : "consul://consul.corp.example.com:8600/some/path",
  "InitCommit" : {
    "ID" : "cfb82a876ecc11b5ca0977d1733adbe58599088a",
    "Expected" : "2d41c047c83e09a6d61d464906feb2a2f3c52aa4"
  },
  "NFd" : 64,
  "Containers" : 14,
  "SystemTime" : "2017-08-08T20:28:29.06202363Z",
  "MemTotal" : 2095882240,
  "DriverStatus" : [ [ "Backing Filesystem", "extfs" ], [ "Supports d_type", "true" ], [ "Native Overlay Diff", "true" ] ],
  "IPv4Forwarding" : true,
  "Isolation" : "default",
  "NCPU" : 4,
  "MemoryLimit" : true,
  "KernelVersion" : "4.9.38-moby",
  "CPUSet" : true,
  "NGoroutines" : 174,
  "CpuCfsPeriod" : true,
  "HttpProxy" : "http://user:pass@proxy.corp.example.com:8080",
  "LiveRestoreEnabled" : false,
  "SystemStatus" : [ [ "Role", "primary" ], [ "State", "Healthy" ], [ "Strategy", "spread" ], [ "Filters", "health, port, containerslots, dependency, affinity, constraint, whitelist" ], [ "Nodes", "2" ], [ " swarm-agent-00", "192.168.99.102:2376" ], [ "  └ ID", "5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376" ], [ "  └ Status", "Healthy" ], [ "  └ Containers", "1 (1 Running, 0 Paused, 0 Stopped)" ], [ "  └ Reserved CPUs", "0 / 1" ], [ "  └ Reserved Memory", "0 B / 1.021 GiB" ], [ "  └ Labels", "kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs" ], [ "  └ UpdatedAt", "2017-08-09T10:03:46Z" ], [ "  └ ServerVersion", "17.06.0-ce" ], [ " swarm-manager", "192.168.99.101:2376" ], [ "  └ ID", "TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376" ], [ "  └ Status", "Healthy" ], [ "  └ Containers", "2 (2 Running, 0 Paused, 0 Stopped)" ], [ "  └ Reserved CPUs", "0 / 1" ], [ "  └ Reserved Memory", "0 B / 1.021 GiB" ], [ "  └ Labels", "kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs" ], [ "  └ UpdatedAt", "2017-08-09T10:04:11Z" ], [ "  └ ServerVersion", "17.06.0-ce" ] ],
  "OomKillDisable" : true,
  "RuncCommit" : {
    "ID" : "cfb82a876ecc11b5ca0977d1733adbe58599088a",
    "Expected" : "2d41c047c83e09a6d61d464906feb2a2f3c52aa4"
  },
  "Debug" : true,
  "NoProxy" : "*.local, 169.254/16",
  "LoggingDriver" : "LoggingDriver",
  "IndexServerAddress" : "https://index.docker.io/v1/",
  "Name" : "node5.corp.example.com",
  "CpuCfsQuota" : true,
  "ContainersStopped" : 10,
  "HttpsProxy" : "https://user:pass@proxy.corp.example.com:4443",
  "SwapLimit" : true,
  "ServerVersion" : "17.06.0-ce"
}, contentType=application/json}]

     - returns: RequestBuilder<SystemInfo> 
     */
    public class func systemInfoWithRequestBuilder() -> RequestBuilder<SystemInfo> {
        let path = "/info"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SystemInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Ping
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemPing(completion: ((data: String?, error: ErrorType?) -> Void)) {
        systemPingWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Ping
     - GET /_ping
     - This is a dummy endpoint you can use to test if the server is accessible.
     - responseHeaders: [API-Version(String), Docker-Experimental(Bool)]
     - responseHeaders: [API-Version(String), Docker-Experimental(Bool)]
     - examples: [{output=none}]

     - returns: RequestBuilder<String> 
     */
    public class func systemPingWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/_ping"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func systemVersion(completion: ((data: SystemVersionResponse?, error: ErrorType?) -> Void)) {
        systemVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get version
     - GET /version
     - Returns the version of Docker that is running and various information about the system that Docker is running on.
     - examples: [{example={
  "Version" : "17.04.0",
  "Os" : "linux",
  "KernelVersion" : "3.19.0-23-generic",
  "GoVersion" : "go1.7.5",
  "GitCommit" : "deadbee",
  "Arch" : "amd64",
  "ApiVersion" : "1.27",
  "MinAPIVersion" : "1.12",
  "BuildTime" : "2016-06-14T07:09:13.444803460+00:00",
  "Experimental" : true
}, contentType=application/json}]

     - returns: RequestBuilder<SystemVersionResponse> 
     */
    public class func systemVersionWithRequestBuilder() -> RequestBuilder<SystemVersionResponse> {
        let path = "/version"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SystemVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
