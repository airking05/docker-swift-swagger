//
// ImageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ImageAPI: APIBase {
    /**
     Delete builder cache
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func buildPrune(completion: ((data: BuildPruneResponse?, error: ErrorType?) -> Void)) {
        buildPruneWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete builder cache
     - POST /build/prune
     - examples: [{example={
  "SpaceReclaimed" : 0
}, contentType=application/json}]

     - returns: RequestBuilder<BuildPruneResponse> 
     */
    public class func buildPruneWithRequestBuilder() -> RequestBuilder<BuildPruneResponse> {
        let path = "/build/prune"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BuildPruneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_imageBuild: String { 
        case ApplicationXTar = "application/x-tar"
    }

    /**
     Build an image
     
     - parameter inputStream: (body) A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     - parameter dockerfile: (query) Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     - parameter t: (query) A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     - parameter extrahosts: (query) Extra hosts to add to /etc/hosts (optional)
     - parameter remote: (query) A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     - parameter q: (query) Suppress verbose build output. (optional, default to false)
     - parameter nocache: (query) Do not use the cache when building the image. (optional, default to false)
     - parameter cachefrom: (query) JSON array of images used for build cache resolution. (optional)
     - parameter pull: (query) Attempt to pull the image even if an older image exists locally. (optional)
     - parameter rm: (query) Remove intermediate containers after a successful build. (optional, default to true)
     - parameter forcerm: (query) Always remove intermediate containers, even upon failure. (optional, default to false)
     - parameter memory: (query) Set memory limit for build. (optional)
     - parameter memswap: (query) Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     - parameter cpushares: (query) CPU shares (relative weight). (optional)
     - parameter cpusetcpus: (query) CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     - parameter cpuperiod: (query) The length of a CPU period in microseconds. (optional)
     - parameter cpuquota: (query) Microseconds of CPU time that the container can get in a CPU period. (optional)
     - parameter buildargs: (query) JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values. [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) (optional)
     - parameter shmsize: (query) Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     - parameter squash: (query) Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     - parameter labels: (query) Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     - parameter networkmode: (query) Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to. (optional)
     - parameter contentType: (header)  (optional, default to application/x-tar)
     - parameter xRegistryConfig: (header) This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API.  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageBuild(inputStream inputStream: NSData? = nil, dockerfile: String? = nil, t: String? = nil, extrahosts: String? = nil, remote: String? = nil, q: Bool? = nil, nocache: Bool? = nil, cachefrom: String? = nil, pull: String? = nil, rm: Bool? = nil, forcerm: Bool? = nil, memory: Int32? = nil, memswap: Int32? = nil, cpushares: Int32? = nil, cpusetcpus: String? = nil, cpuperiod: Int32? = nil, cpuquota: Int32? = nil, buildargs: Int32? = nil, shmsize: Int32? = nil, squash: Bool? = nil, labels: String? = nil, networkmode: String? = nil, contentType: ContentType_imageBuild? = nil, xRegistryConfig: String? = nil, platform: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        imageBuildWithRequestBuilder(inputStream: inputStream, dockerfile: dockerfile, t: t, extrahosts: extrahosts, remote: remote, q: q, nocache: nocache, cachefrom: cachefrom, pull: pull, rm: rm, forcerm: forcerm, memory: memory, memswap: memswap, cpushares: cpushares, cpusetcpus: cpusetcpus, cpuperiod: cpuperiod, cpuquota: cpuquota, buildargs: buildargs, shmsize: shmsize, squash: squash, labels: labels, networkmode: networkmode, contentType: contentType, xRegistryConfig: xRegistryConfig, platform: platform).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Build an image
     - POST /build
     - Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     
     - parameter inputStream: (body) A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     - parameter dockerfile: (query) Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     - parameter t: (query) A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     - parameter extrahosts: (query) Extra hosts to add to /etc/hosts (optional)
     - parameter remote: (query) A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     - parameter q: (query) Suppress verbose build output. (optional, default to false)
     - parameter nocache: (query) Do not use the cache when building the image. (optional, default to false)
     - parameter cachefrom: (query) JSON array of images used for build cache resolution. (optional)
     - parameter pull: (query) Attempt to pull the image even if an older image exists locally. (optional)
     - parameter rm: (query) Remove intermediate containers after a successful build. (optional, default to true)
     - parameter forcerm: (query) Always remove intermediate containers, even upon failure. (optional, default to false)
     - parameter memory: (query) Set memory limit for build. (optional)
     - parameter memswap: (query) Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     - parameter cpushares: (query) CPU shares (relative weight). (optional)
     - parameter cpusetcpus: (query) CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     - parameter cpuperiod: (query) The length of a CPU period in microseconds. (optional)
     - parameter cpuquota: (query) Microseconds of CPU time that the container can get in a CPU period. (optional)
     - parameter buildargs: (query) JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values. [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) (optional)
     - parameter shmsize: (query) Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     - parameter squash: (query) Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     - parameter labels: (query) Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     - parameter networkmode: (query) Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to. (optional)
     - parameter contentType: (header)  (optional, default to application/x-tar)
     - parameter xRegistryConfig: (header) This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API.  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional, default to )

     - returns: RequestBuilder<Void> 
     */
    public class func imageBuildWithRequestBuilder(inputStream inputStream: NSData? = nil, dockerfile: String? = nil, t: String? = nil, extrahosts: String? = nil, remote: String? = nil, q: Bool? = nil, nocache: Bool? = nil, cachefrom: String? = nil, pull: String? = nil, rm: Bool? = nil, forcerm: Bool? = nil, memory: Int32? = nil, memswap: Int32? = nil, cpushares: Int32? = nil, cpusetcpus: String? = nil, cpuperiod: Int32? = nil, cpuquota: Int32? = nil, buildargs: Int32? = nil, shmsize: Int32? = nil, squash: Bool? = nil, labels: String? = nil, networkmode: String? = nil, contentType: ContentType_imageBuild? = nil, xRegistryConfig: String? = nil, platform: String? = nil) -> RequestBuilder<Void> {
        let path = "/build"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inputStream?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Content-type": contentType?.rawValue,
            "X-Registry-Config": xRegistryConfig
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Create a new image from a container
     
     - parameter containerConfig: (body) The container configuration (optional)
     - parameter container: (query) The ID or name of the container to commit (optional)
     - parameter repo: (query) Repository name for the created image (optional)
     - parameter tag: (query) Tag name for the create image (optional)
     - parameter comment: (query) Commit message (optional)
     - parameter author: (query) Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     - parameter pause: (query) Whether to pause the container before committing (optional, default to true)
     - parameter changes: (query) &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageCommit(containerConfig containerConfig: ContainerConfig? = nil, container: String? = nil, repo: String? = nil, tag: String? = nil, comment: String? = nil, author: String? = nil, pause: Bool? = nil, changes: String? = nil, completion: ((data: IdResponse?, error: ErrorType?) -> Void)) {
        imageCommitWithRequestBuilder(containerConfig: containerConfig, container: container, repo: repo, tag: tag, comment: comment, author: author, pause: pause, changes: changes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new image from a container
     - POST /commit
     - examples: [{example={
  "Id" : "Id"
}, contentType=application/json}]
     
     - parameter containerConfig: (body) The container configuration (optional)
     - parameter container: (query) The ID or name of the container to commit (optional)
     - parameter repo: (query) Repository name for the created image (optional)
     - parameter tag: (query) Tag name for the create image (optional)
     - parameter comment: (query) Commit message (optional)
     - parameter author: (query) Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     - parameter pause: (query) Whether to pause the container before committing (optional, default to true)
     - parameter changes: (query) &#x60;Dockerfile&#x60; instructions to apply while committing (optional)

     - returns: RequestBuilder<IdResponse> 
     */
    public class func imageCommitWithRequestBuilder(containerConfig containerConfig: ContainerConfig? = nil, container: String? = nil, repo: String? = nil, tag: String? = nil, comment: String? = nil, author: String? = nil, pause: Bool? = nil, changes: String? = nil) -> RequestBuilder<IdResponse> {
        let path = "/commit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = containerConfig?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<IdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create an image
     
     - parameter fromImage: (query) Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     - parameter fromSrc: (query) Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     - parameter repo: (query) Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     - parameter tag: (query) Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     - parameter inputImage: (body) Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageCreate(fromImage fromImage: String? = nil, fromSrc: String? = nil, repo: String? = nil, tag: String? = nil, inputImage: String? = nil, xRegistryAuth: String? = nil, platform: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        imageCreateWithRequestBuilder(fromImage: fromImage, fromSrc: fromSrc, repo: repo, tag: tag, inputImage: inputImage, xRegistryAuth: xRegistryAuth, platform: platform).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create an image
     - POST /images/create
     - Create an image by either pulling it from a registry or importing it.
     
     - parameter fromImage: (query) Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     - parameter fromSrc: (query) Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     - parameter repo: (query) Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     - parameter tag: (query) Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     - parameter inputImage: (body) Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional, default to )

     - returns: RequestBuilder<Void> 
     */
    public class func imageCreateWithRequestBuilder(fromImage fromImage: String? = nil, fromSrc: String? = nil, repo: String? = nil, tag: String? = nil, inputImage: String? = nil, xRegistryAuth: String? = nil, platform: String? = nil) -> RequestBuilder<Void> {
        let path = "/images/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inputImage?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Remove an image
     
     - parameter name: (path) Image name or ID 
     - parameter force: (query) Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     - parameter noprune: (query) Do not delete untagged parent images (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageDelete(name name: String, force: Bool? = nil, noprune: Bool? = nil, completion: ((data: [ImageDeleteResponseItem]?, error: ErrorType?) -> Void)) {
        imageDeleteWithRequestBuilder(name: name, force: force, noprune: noprune).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove an image
     - DELETE /images/{name}
     - Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
     - examples: [{example=[ {
  "Untagged" : "3e2f21a89f"
}, {
  "Deleted" : "3e2f21a89f"
}, {
  "Deleted" : "53b4f83ac9"
} ], contentType=application/json}]
     
     - parameter name: (path) Image name or ID 
     - parameter force: (query) Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     - parameter noprune: (query) Do not delete untagged parent images (optional, default to false)

     - returns: RequestBuilder<[ImageDeleteResponseItem]> 
     */
    public class func imageDeleteWithRequestBuilder(name name: String, force: Bool? = nil, noprune: Bool? = nil) -> RequestBuilder<[ImageDeleteResponseItem]> {
        var path = "/images/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "force": force,
            "noprune": noprune
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ImageDeleteResponseItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Export an image
     
     - parameter name: (path) Image name or ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageGet(name name: String, completion: ((data: NSData?, error: ErrorType?) -> Void)) {
        imageGetWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Export an image
     - GET /images/{name}/get
     - Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     - examples: [{output=none}]
     
     - parameter name: (path) Image name or ID 

     - returns: RequestBuilder<NSData> 
     */
    public class func imageGetWithRequestBuilder(name name: String) -> RequestBuilder<NSData> {
        var path = "/images/{name}/get"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Export several images
     
     - parameter names: (query) Image names to filter by (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageGetAll(names names: [String]? = nil, completion: ((data: NSData?, error: ErrorType?) -> Void)) {
        imageGetAllWithRequestBuilder(names: names).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Export several images
     - GET /images/get
     - Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see [the export image endpoint](#operation/ImageGet). 
     - examples: [{output=none}]
     
     - parameter names: (query) Image names to filter by (optional)

     - returns: RequestBuilder<NSData> 
     */
    public class func imageGetAllWithRequestBuilder(names names: [String]? = nil) -> RequestBuilder<NSData> {
        let path = "/images/get"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "names": names
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the history of an image
     
     - parameter name: (path) Image name or ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageHistory(name name: String, completion: ((data: [HistoryResponseItem]?, error: ErrorType?) -> Void)) {
        imageHistoryWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the history of an image
     - GET /images/{name}/history
     - Return parent layers of an image.
     - examples: [{example=[ {
  "Id" : "3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710",
  "Created" : 1398108230,
  "CreatedBy" : "/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /",
  "Tags" : [ "ubuntu:lucid", "ubuntu:10.04" ],
  "Size" : 182964289,
  "Comment" : ""
}, {
  "Id" : "6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8",
  "Created" : 1398108222,
  "CreatedBy" : "/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/",
  "Tags" : [ ],
  "Size" : 0,
  "Comment" : ""
}, {
  "Id" : "511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158",
  "Created" : 1371157430,
  "CreatedBy" : "",
  "Tags" : [ "scratch12:latest", "scratch:latest" ],
  "Size" : 0,
  "Comment" : "Imported from -"
} ], contentType=application/json}]
     
     - parameter name: (path) Image name or ID 

     - returns: RequestBuilder<[HistoryResponseItem]> 
     */
    public class func imageHistoryWithRequestBuilder(name name: String) -> RequestBuilder<[HistoryResponseItem]> {
        var path = "/images/{name}/history"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[HistoryResponseItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Inspect an image
     
     - parameter name: (path) Image name or id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageInspect(name name: String, completion: ((data: Image?, error: ErrorType?) -> Void)) {
        imageInspectWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect an image
     - GET /images/{name}/json
     - Return low-level information about an image.
     - examples: [{example={
  "Id" : "sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c",
  "Container" : "cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a",
  "Comment" : "",
  "Os" : "linux",
  "Architecture" : "amd64",
  "Parent" : "sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c",
  "ContainerConfig" : {
    "Tty" : false,
    "Hostname" : "e611e15f9c9d",
    "Domainname" : "",
    "AttachStdout" : false,
    "PublishService" : "",
    "AttachStdin" : false,
    "OpenStdin" : false,
    "StdinOnce" : false,
    "NetworkDisabled" : false,
    "OnBuild" : [ ],
    "Image" : "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c",
    "User" : "",
    "WorkingDir" : "",
    "MacAddress" : "",
    "AttachStderr" : false,
    "Labels" : {
      "com.example.license" : "GPL",
      "com.example.version" : "1.0",
      "com.example.vendor" : "Acme"
    },
    "Env" : [ "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" ],
    "Cmd" : [ "/bin/sh", "-c", "#(nop) LABEL com.example.vendor=Acme com.example.license=GPL com.example.version=1.0" ]
  },
  "DockerVersion" : "1.9.0-dev",
  "VirtualSize" : 188359297,
  "Size" : 0,
  "Author" : "",
  "Created" : "2015-09-10T08:30:53.26995814Z",
  "GraphDriver" : {
    "Name" : "aufs",
    "Data" : { }
  },
  "RepoDigests" : [ "localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf" ],
  "RepoTags" : [ "example:1.0", "example:latest", "example:stable" ],
  "Config" : {
    "Image" : "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c",
    "NetworkDisabled" : false,
    "OnBuild" : [ ],
    "StdinOnce" : false,
    "PublishService" : "",
    "AttachStdin" : false,
    "OpenStdin" : false,
    "Domainname" : "",
    "AttachStdout" : false,
    "Tty" : false,
    "Hostname" : "e611e15f9c9d",
    "Cmd" : [ "/bin/bash" ],
    "Env" : [ "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" ],
    "Labels" : {
      "com.example.vendor" : "Acme",
      "com.example.version" : "1.0",
      "com.example.license" : "GPL"
    },
    "MacAddress" : "",
    "AttachStderr" : false,
    "WorkingDir" : "",
    "User" : ""
  },
  "RootFS" : {
    "Type" : "layers",
    "Layers" : [ "sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6", "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef" ]
  }
}, contentType=application/json}]
     
     - parameter name: (path) Image name or id 

     - returns: RequestBuilder<Image> 
     */
    public class func imageInspectWithRequestBuilder(name name: String) -> RequestBuilder<Image> {
        var path = "/images/{name}/json"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Image>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List Images
     
     - parameter all: (query) Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;)  (optional)
     - parameter digests: (query) Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageList(all all: Bool? = nil, filters: String? = nil, digests: Bool? = nil, completion: ((data: [ImageSummary]?, error: ErrorType?) -> Void)) {
        imageListWithRequestBuilder(all: all, filters: filters, digests: digests).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Images
     - GET /images/json
     - Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     - examples: [{example=[ {
  "Id" : "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8",
  "ParentId" : "",
  "RepoTags" : [ "ubuntu:12.04", "ubuntu:precise" ],
  "RepoDigests" : [ "ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787" ],
  "Created" : 1474925151,
  "Size" : 103579269,
  "VirtualSize" : 103579269,
  "SharedSize" : 0,
  "Labels" : { },
  "Containers" : 2
}, {
  "Id" : "sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175",
  "ParentId" : "",
  "RepoTags" : [ "ubuntu:12.10", "ubuntu:quantal" ],
  "RepoDigests" : [ "ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7", "ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3" ],
  "Created" : 1403128455,
  "Size" : 172064416,
  "VirtualSize" : 172064416,
  "SharedSize" : 0,
  "Labels" : { },
  "Containers" : 5
} ], contentType=application/json}]
     
     - parameter all: (query) Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;)  (optional)
     - parameter digests: (query) Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)

     - returns: RequestBuilder<[ImageSummary]> 
     */
    public class func imageListWithRequestBuilder(all all: Bool? = nil, filters: String? = nil, digests: Bool? = nil) -> RequestBuilder<[ImageSummary]> {
        let path = "/images/json"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "all": all,
            "filters": filters,
            "digests": digests
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ImageSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Import images
     
     - parameter imagesTarball: (body) Tar archive containing images (optional)
     - parameter quiet: (query) Suppress progress details during load. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageLoad(imagesTarball imagesTarball: NSData? = nil, quiet: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        imageLoadWithRequestBuilder(imagesTarball: imagesTarball, quiet: quiet).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Import images
     - POST /images/load
     - Load a set of images and tags into a repository.  For details on the format, see [the export image endpoint](#operation/ImageGet). 
     
     - parameter imagesTarball: (body) Tar archive containing images (optional)
     - parameter quiet: (query) Suppress progress details during load. (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    public class func imageLoadWithRequestBuilder(imagesTarball imagesTarball: NSData? = nil, quiet: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/images/load"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = imagesTarball?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete unused images
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imagePrune(filters filters: String? = nil, completion: ((data: ImagePruneResponse?, error: ErrorType?) -> Void)) {
        imagePruneWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete unused images
     - POST /images/prune
     - examples: [{example={
  "SpaceReclaimed" : 0,
  "ImagesDeleted" : [ {
    "Deleted" : "Deleted",
    "Untagged" : "Untagged"
  }, {
    "Deleted" : "Deleted",
    "Untagged" : "Untagged"
  } ]
}, contentType=application/json}]
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)

     - returns: RequestBuilder<ImagePruneResponse> 
     */
    public class func imagePruneWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<ImagePruneResponse> {
        let path = "/images/prune"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ImagePruneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Push an image
     
     - parameter name: (path) Image name or ID. 
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) 
     - parameter tag: (query) The tag to associate with the image on the registry. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imagePush(name name: String, xRegistryAuth: String, tag: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        imagePushWithRequestBuilder(name: name, xRegistryAuth: xRegistryAuth, tag: tag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Push an image
     - POST /images/{name}/push
     - Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     
     - parameter name: (path) Image name or ID. 
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) 
     - parameter tag: (query) The tag to associate with the image on the registry. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func imagePushWithRequestBuilder(name name: String, xRegistryAuth: String, tag: String? = nil) -> RequestBuilder<Void> {
        var path = "/images/{name}/push"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "tag": tag
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Search images
     
     - parameter term: (query) Term to search 
     - parameter limit: (query) Maximum number of results to return (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageSearch(term term: String, limit: Int32? = nil, filters: String? = nil, completion: ((data: [ImageSearchResponseItem]?, error: ErrorType?) -> Void)) {
        imageSearchWithRequestBuilder(term: term, limit: limit, filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search images
     - GET /images/search
     - Search for an image on Docker Hub.
     - examples: [{example=[ {
  "description" : "",
  "is_official" : false,
  "is_automated" : false,
  "name" : "wma55/u1210sshd",
  "star_count" : 0
}, {
  "description" : "",
  "is_official" : false,
  "is_automated" : false,
  "name" : "jdswinbank/sshd",
  "star_count" : 0
}, {
  "description" : "",
  "is_official" : false,
  "is_automated" : false,
  "name" : "vgauthier/sshd",
  "star_count" : 0
} ], contentType=application/json}]
     
     - parameter term: (query) Term to search 
     - parameter limit: (query) Maximum number of results to return (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  (optional)

     - returns: RequestBuilder<[ImageSearchResponseItem]> 
     */
    public class func imageSearchWithRequestBuilder(term term: String, limit: Int32? = nil, filters: String? = nil) -> RequestBuilder<[ImageSearchResponseItem]> {
        let path = "/images/search"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "term": term,
            "limit": limit?.encodeToJSON(),
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ImageSearchResponseItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Tag an image
     
     - parameter name: (path) Image name or ID to tag. 
     - parameter repo: (query) The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     - parameter tag: (query) The name of the new tag. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func imageTag(name name: String, repo: String? = nil, tag: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        imageTagWithRequestBuilder(name: name, repo: repo, tag: tag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Tag an image
     - POST /images/{name}/tag
     - Tag an image so that it becomes part of a repository.
     
     - parameter name: (path) Image name or ID to tag. 
     - parameter repo: (query) The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     - parameter tag: (query) The name of the new tag. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func imageTagWithRequestBuilder(name name: String, repo: String? = nil, tag: String? = nil) -> RequestBuilder<Void> {
        var path = "/images/{name}/tag"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "repo": repo,
            "tag": tag
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
