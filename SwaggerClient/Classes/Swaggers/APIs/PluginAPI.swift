//
// PluginAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PluginAPI: APIBase {
    /**
     Get plugin privileges
     
     - parameter remote: (query) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPluginPrivileges(remote remote: String, completion: ((data: [PluginPrivilegeItem]?, error: ErrorType?) -> Void)) {
        getPluginPrivilegesWithRequestBuilder(remote: remote).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get plugin privileges
     - GET /plugins/privileges
     - examples: [{example=[ {
  "Name" : "network",
  "Description" : "",
  "Value" : [ "host" ]
}, {
  "Name" : "mount",
  "Description" : "",
  "Value" : [ "/data" ]
}, {
  "Name" : "device",
  "Description" : "",
  "Value" : [ "/dev/cpu_dma_latency" ]
} ], contentType=application/json}]
     
     - parameter remote: (query) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 

     - returns: RequestBuilder<[PluginPrivilegeItem]> 
     */
    public class func getPluginPrivilegesWithRequestBuilder(remote remote: String) -> RequestBuilder<[PluginPrivilegeItem]> {
        let path = "/plugins/privileges"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "remote": remote
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PluginPrivilegeItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a plugin
     
     - parameter name: (query) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter tarContext: (body) Path to tar containing plugin rootfs and manifest (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginCreate(name name: String, tarContext: NSData? = nil, completion: ((error: ErrorType?) -> Void)) {
        pluginCreateWithRequestBuilder(name: name, tarContext: tarContext).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create a plugin
     - POST /plugins/create
     
     - parameter name: (query) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter tarContext: (body) Path to tar containing plugin rootfs and manifest (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func pluginCreateWithRequestBuilder(name name: String, tarContext: NSData? = nil) -> RequestBuilder<Void> {
        let path = "/plugins/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tarContext?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter force: (query) Disable the plugin before removing. This may result in issues if the plugin is in use by a container. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginDelete(name name: String, force: Bool? = nil, completion: ((data: Plugin?, error: ErrorType?) -> Void)) {
        pluginDeleteWithRequestBuilder(name: name, force: force).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove a plugin
     - DELETE /plugins/{name}
     - examples: [{example={
  "Name" : "tiborvass/sample-volume-plugin",
  "Config" : {
    "User" : {
      "UID" : 1000,
      "GID" : 1000
    },
    "Documentation" : "https://docs.docker.com/engine/extend/plugins/",
    "Description" : "A sample volume plugin for Docker",
    "WorkDir" : "/bin/",
    "IpcHost" : false,
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ],
    "Env" : [ {
      "Name" : "DEBUG",
      "Description" : "If set, prints debug messages",
      "Value" : "0"
    } ],
    "Interface" : {
      "Types" : [ "docker.volumedriver/1.0" ],
      "Socket" : "plugins.sock"
    },
    "Linux" : {
      "Devices" : [ {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      }, {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      } ],
      "AllowAllDevices" : false,
      "Capabilities" : [ "CAP_SYS_ADMIN", "CAP_SYSLOG" ]
    },
    "Entrypoint" : [ "/usr/bin/sample-volume-plugin", "/data" ],
    "Args" : {
      "Name" : "args",
      "Settable" : [ "Settable", "Settable" ],
      "Value" : [ "Value", "Value" ],
      "Description" : "command line arguments"
    },
    "PidHost" : false,
    "DockerVersion" : "17.06.0-ce",
    "rootfs" : {
      "type" : "layers",
      "diff_ids" : [ "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887", "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8" ]
    },
    "Network" : {
      "Type" : "host"
    },
    "PropagatedMount" : "/mnt/volumes"
  },
  "Enabled" : true,
  "PluginReference" : "localhost:5000/tiborvass/sample-volume-plugin:latest",
  "Settings" : {
    "Env" : [ "DEBUG=0" ],
    "Args" : [ "Args", "Args" ],
    "Devices" : [ {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    }, {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    } ],
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ]
  },
  "Id" : "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
}, contentType=application/json}]
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter force: (query) Disable the plugin before removing. This may result in issues if the plugin is in use by a container. (optional, default to false)

     - returns: RequestBuilder<Plugin> 
     */
    public class func pluginDeleteWithRequestBuilder(name name: String, force: Bool? = nil) -> RequestBuilder<Plugin> {
        var path = "/plugins/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "force": force
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Plugin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Disable a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginDisable(name name: String, completion: ((error: ErrorType?) -> Void)) {
        pluginDisableWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Disable a plugin
     - POST /plugins/{name}/disable
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 

     - returns: RequestBuilder<Void> 
     */
    public class func pluginDisableWithRequestBuilder(name name: String) -> RequestBuilder<Void> {
        var path = "/plugins/{name}/disable"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Enable a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter timeout: (query) Set the HTTP client timeout (in seconds) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginEnable(name name: String, timeout: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        pluginEnableWithRequestBuilder(name: name, timeout: timeout).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Enable a plugin
     - POST /plugins/{name}/enable
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter timeout: (query) Set the HTTP client timeout (in seconds) (optional, default to 0)

     - returns: RequestBuilder<Void> 
     */
    public class func pluginEnableWithRequestBuilder(name name: String, timeout: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/plugins/{name}/enable"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "timeout": timeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Inspect a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginInspect(name name: String, completion: ((data: Plugin?, error: ErrorType?) -> Void)) {
        pluginInspectWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Inspect a plugin
     - GET /plugins/{name}/json
     - examples: [{example={
  "Name" : "tiborvass/sample-volume-plugin",
  "Config" : {
    "User" : {
      "UID" : 1000,
      "GID" : 1000
    },
    "Documentation" : "https://docs.docker.com/engine/extend/plugins/",
    "Description" : "A sample volume plugin for Docker",
    "WorkDir" : "/bin/",
    "IpcHost" : false,
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ],
    "Env" : [ {
      "Name" : "DEBUG",
      "Description" : "If set, prints debug messages",
      "Value" : "0"
    } ],
    "Interface" : {
      "Types" : [ "docker.volumedriver/1.0" ],
      "Socket" : "plugins.sock"
    },
    "Linux" : {
      "Devices" : [ {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      }, {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      } ],
      "AllowAllDevices" : false,
      "Capabilities" : [ "CAP_SYS_ADMIN", "CAP_SYSLOG" ]
    },
    "Entrypoint" : [ "/usr/bin/sample-volume-plugin", "/data" ],
    "Args" : {
      "Name" : "args",
      "Settable" : [ "Settable", "Settable" ],
      "Value" : [ "Value", "Value" ],
      "Description" : "command line arguments"
    },
    "PidHost" : false,
    "DockerVersion" : "17.06.0-ce",
    "rootfs" : {
      "type" : "layers",
      "diff_ids" : [ "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887", "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8" ]
    },
    "Network" : {
      "Type" : "host"
    },
    "PropagatedMount" : "/mnt/volumes"
  },
  "Enabled" : true,
  "PluginReference" : "localhost:5000/tiborvass/sample-volume-plugin:latest",
  "Settings" : {
    "Env" : [ "DEBUG=0" ],
    "Args" : [ "Args", "Args" ],
    "Devices" : [ {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    }, {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    } ],
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ]
  },
  "Id" : "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
}, contentType=application/json}]
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 

     - returns: RequestBuilder<Plugin> 
     */
    public class func pluginInspectWithRequestBuilder(name name: String) -> RequestBuilder<Plugin> {
        var path = "/plugins/{name}/json"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Plugin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List plugins
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list. Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginList(filters filters: String? = nil, completion: ((data: [Plugin]?, error: ErrorType?) -> Void)) {
        pluginListWithRequestBuilder(filters: filters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List plugins
     - GET /plugins
     - Returns information about installed plugins.
     - examples: [{example=[ {
  "Name" : "tiborvass/sample-volume-plugin",
  "Config" : {
    "User" : {
      "UID" : 1000,
      "GID" : 1000
    },
    "Documentation" : "https://docs.docker.com/engine/extend/plugins/",
    "Description" : "A sample volume plugin for Docker",
    "WorkDir" : "/bin/",
    "IpcHost" : false,
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ],
    "Env" : [ {
      "Name" : "DEBUG",
      "Description" : "If set, prints debug messages",
      "Value" : "0"
    } ],
    "Interface" : {
      "Types" : [ "docker.volumedriver/1.0" ],
      "Socket" : "plugins.sock"
    },
    "Linux" : {
      "Devices" : [ {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      }, {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      } ],
      "AllowAllDevices" : false,
      "Capabilities" : [ "CAP_SYS_ADMIN", "CAP_SYSLOG" ]
    },
    "Entrypoint" : [ "/usr/bin/sample-volume-plugin", "/data" ],
    "Args" : {
      "Name" : "args",
      "Settable" : [ "Settable", "Settable" ],
      "Value" : [ "Value", "Value" ],
      "Description" : "command line arguments"
    },
    "PidHost" : false,
    "DockerVersion" : "17.06.0-ce",
    "rootfs" : {
      "type" : "layers",
      "diff_ids" : [ "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887", "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8" ]
    },
    "Network" : {
      "Type" : "host"
    },
    "PropagatedMount" : "/mnt/volumes"
  },
  "Enabled" : true,
  "PluginReference" : "localhost:5000/tiborvass/sample-volume-plugin:latest",
  "Settings" : {
    "Env" : [ "DEBUG=0" ],
    "Args" : [ "Args", "Args" ],
    "Devices" : [ {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    }, {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    } ],
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ]
  },
  "Id" : "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
}, {
  "Name" : "tiborvass/sample-volume-plugin",
  "Config" : {
    "User" : {
      "UID" : 1000,
      "GID" : 1000
    },
    "Documentation" : "https://docs.docker.com/engine/extend/plugins/",
    "Description" : "A sample volume plugin for Docker",
    "WorkDir" : "/bin/",
    "IpcHost" : false,
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ],
    "Env" : [ {
      "Name" : "DEBUG",
      "Description" : "If set, prints debug messages",
      "Value" : "0"
    } ],
    "Interface" : {
      "Types" : [ "docker.volumedriver/1.0" ],
      "Socket" : "plugins.sock"
    },
    "Linux" : {
      "Devices" : [ {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      }, {
        "Name" : "Name",
        "Settable" : [ "Settable", "Settable" ],
        "Description" : "Description",
        "Path" : "/dev/fuse"
      } ],
      "AllowAllDevices" : false,
      "Capabilities" : [ "CAP_SYS_ADMIN", "CAP_SYSLOG" ]
    },
    "Entrypoint" : [ "/usr/bin/sample-volume-plugin", "/data" ],
    "Args" : {
      "Name" : "args",
      "Settable" : [ "Settable", "Settable" ],
      "Value" : [ "Value", "Value" ],
      "Description" : "command line arguments"
    },
    "PidHost" : false,
    "DockerVersion" : "17.06.0-ce",
    "rootfs" : {
      "type" : "layers",
      "diff_ids" : [ "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887", "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8" ]
    },
    "Network" : {
      "Type" : "host"
    },
    "PropagatedMount" : "/mnt/volumes"
  },
  "Enabled" : true,
  "PluginReference" : "localhost:5000/tiborvass/sample-volume-plugin:latest",
  "Settings" : {
    "Env" : [ "DEBUG=0" ],
    "Args" : [ "Args", "Args" ],
    "Devices" : [ {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    }, {
      "Name" : "Name",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "Description",
      "Path" : "/dev/fuse"
    } ],
    "Mounts" : [ {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    }, {
      "Source" : "/var/lib/docker/plugins/",
      "Name" : "some-mount",
      "Settable" : [ "Settable", "Settable" ],
      "Description" : "This is a mount that's used by the plugin.",
      "Type" : "bind",
      "Options" : [ "rbind", "rw" ],
      "Destination" : "/mnt/state"
    } ]
  },
  "Id" : "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
} ], contentType=application/json}]
     
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list. Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60;  (optional)

     - returns: RequestBuilder<[Plugin]> 
     */
    public class func pluginListWithRequestBuilder(filters filters: String? = nil) -> RequestBuilder<[Plugin]> {
        let path = "/plugins"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters": filters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Plugin]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Install a plugin
     
     - parameter remote: (query) Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  
     - parameter name: (query) Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginPull(remote remote: String, name: String? = nil, xRegistryAuth: String? = nil, body: [Body]? = nil, completion: ((error: ErrorType?) -> Void)) {
        pluginPullWithRequestBuilder(remote: remote, name: name, xRegistryAuth: xRegistryAuth, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Install a plugin
     - POST /plugins/pull
     - Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
     
     - parameter remote: (query) Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  
     - parameter name: (query) Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  (optional)
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func pluginPullWithRequestBuilder(remote remote: String, name: String? = nil, xRegistryAuth: String? = nil, body: [Body]? = nil) -> RequestBuilder<Void> {
        let path = "/plugins/pull"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Push a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginPush(name name: String, completion: ((error: ErrorType?) -> Void)) {
        pluginPushWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Push a plugin
     - POST /plugins/{name}/push
     - Push a plugin to the registry. 
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 

     - returns: RequestBuilder<Void> 
     */
    public class func pluginPushWithRequestBuilder(name name: String) -> RequestBuilder<Void> {
        var path = "/plugins/{name}/push"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Configure a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginSet(name name: String, body: [String]? = nil, completion: ((error: ErrorType?) -> Void)) {
        pluginSetWithRequestBuilder(name: name, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Configure a plugin
     - POST /plugins/{name}/set
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func pluginSetWithRequestBuilder(name name: String, body: [String]? = nil) -> RequestBuilder<Void> {
        var path = "/plugins/{name}/set"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Upgrade a plugin
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter remote: (query) Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pluginUpgrade(name name: String, remote: String, xRegistryAuth: String? = nil, body: [Body]? = nil, completion: ((error: ErrorType?) -> Void)) {
        pluginUpgradeWithRequestBuilder(name: name, remote: remote, xRegistryAuth: xRegistryAuth, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Upgrade a plugin
     - POST /plugins/{name}/upgrade
     
     - parameter name: (path) The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     - parameter remote: (query) Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted.  
     - parameter xRegistryAuth: (header) A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func pluginUpgradeWithRequestBuilder(name name: String, remote: String, xRegistryAuth: String? = nil, body: [Body]? = nil) -> RequestBuilder<Void> {
        var path = "/plugins/{name}/upgrade"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "X-Registry-Auth": xRegistryAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

}
